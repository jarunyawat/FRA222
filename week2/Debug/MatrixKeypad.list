
MatrixKeypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002138  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080022d0  080022d0  000122d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022e8  080022e8  00020050  2**0
                  CONTENTS
  4 .ARM          00000008  080022e8  080022e8  000122e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022f0  080022f0  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022f0  080022f0  000122f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022f4  080022f4  000122f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  080022f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000050  08002348  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002348  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008573  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013d7  00000000  00000000  000285f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  000299d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a8  00000000  00000000  00029fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001505e  00000000  00000000  0002a588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000077c3  00000000  00000000  0003f5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084ac1  00000000  00000000  00046da9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cb86a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001830  00000000  00000000  000cb8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000050 	.word	0x20000050
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080022b8 	.word	0x080022b8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000054 	.word	0x20000054
 80001d4:	080022b8 	.word	0x080022b8

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ea:	f000 fce5 	bl	8000eb8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ee:	f000 fa29 	bl	8000944 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004f2:	f000 fabb 	bl	8000a6c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004f6:	f000 fa8f 	bl	8000a18 <MX_USART2_UART_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		static uint8_t buttonState = 0;
		MatrixKeypadRead();
 80004fa:	f000 fb77 	bl	8000bec <MatrixKeypadRead>
		static enum {
			lock, unlock
		} STATE = unlock;
		if (keypad > 0) {
 80004fe:	4b9f      	ldr	r3, [pc, #636]	; (800077c <main+0x298>)
 8000500:	881b      	ldrh	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	f000 80f7 	beq.w	80006f6 <main+0x212>
			if (buttonState == 0) {
 8000508:	4b9d      	ldr	r3, [pc, #628]	; (8000780 <main+0x29c>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	f040 80f5 	bne.w	80006fc <main+0x218>
				if (keypad == (1 << 0)) {
 8000512:	4b9a      	ldr	r3, [pc, #616]	; (800077c <main+0x298>)
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d10d      	bne.n	8000536 <main+0x52>
					inputCode[0] = '7';
 800051a:	4b9a      	ldr	r3, [pc, #616]	; (8000784 <main+0x2a0>)
 800051c:	2237      	movs	r2, #55	; 0x37
 800051e:	701a      	strb	r2, [r3, #0]
					strcat(code, inputCode);
 8000520:	4998      	ldr	r1, [pc, #608]	; (8000784 <main+0x2a0>)
 8000522:	4899      	ldr	r0, [pc, #612]	; (8000788 <main+0x2a4>)
 8000524:	f001 feb0 	bl	8002288 <strcat>
					numCode++;
 8000528:	4b98      	ldr	r3, [pc, #608]	; (800078c <main+0x2a8>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	3301      	adds	r3, #1
 800052e:	b2da      	uxtb	r2, r3
 8000530:	4b96      	ldr	r3, [pc, #600]	; (800078c <main+0x2a8>)
 8000532:	701a      	strb	r2, [r3, #0]
 8000534:	e0db      	b.n	80006ee <main+0x20a>
				} else if (keypad == (1 << 1)) {
 8000536:	4b91      	ldr	r3, [pc, #580]	; (800077c <main+0x298>)
 8000538:	881b      	ldrh	r3, [r3, #0]
 800053a:	2b02      	cmp	r3, #2
 800053c:	d10d      	bne.n	800055a <main+0x76>
					inputCode[0] = '8';
 800053e:	4b91      	ldr	r3, [pc, #580]	; (8000784 <main+0x2a0>)
 8000540:	2238      	movs	r2, #56	; 0x38
 8000542:	701a      	strb	r2, [r3, #0]
					strcat(code, inputCode);
 8000544:	498f      	ldr	r1, [pc, #572]	; (8000784 <main+0x2a0>)
 8000546:	4890      	ldr	r0, [pc, #576]	; (8000788 <main+0x2a4>)
 8000548:	f001 fe9e 	bl	8002288 <strcat>
					numCode++;
 800054c:	4b8f      	ldr	r3, [pc, #572]	; (800078c <main+0x2a8>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	3301      	adds	r3, #1
 8000552:	b2da      	uxtb	r2, r3
 8000554:	4b8d      	ldr	r3, [pc, #564]	; (800078c <main+0x2a8>)
 8000556:	701a      	strb	r2, [r3, #0]
 8000558:	e0c9      	b.n	80006ee <main+0x20a>
				} else if (keypad == (1 << 2)) {
 800055a:	4b88      	ldr	r3, [pc, #544]	; (800077c <main+0x298>)
 800055c:	881b      	ldrh	r3, [r3, #0]
 800055e:	2b04      	cmp	r3, #4
 8000560:	d10d      	bne.n	800057e <main+0x9a>
					inputCode[0] = '9';
 8000562:	4b88      	ldr	r3, [pc, #544]	; (8000784 <main+0x2a0>)
 8000564:	2239      	movs	r2, #57	; 0x39
 8000566:	701a      	strb	r2, [r3, #0]
					strcat(code, inputCode);
 8000568:	4986      	ldr	r1, [pc, #536]	; (8000784 <main+0x2a0>)
 800056a:	4887      	ldr	r0, [pc, #540]	; (8000788 <main+0x2a4>)
 800056c:	f001 fe8c 	bl	8002288 <strcat>
					numCode++;
 8000570:	4b86      	ldr	r3, [pc, #536]	; (800078c <main+0x2a8>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	b2da      	uxtb	r2, r3
 8000578:	4b84      	ldr	r3, [pc, #528]	; (800078c <main+0x2a8>)
 800057a:	701a      	strb	r2, [r3, #0]
 800057c:	e0b7      	b.n	80006ee <main+0x20a>
				} else if (keypad == (1 << 4)) {
 800057e:	4b7f      	ldr	r3, [pc, #508]	; (800077c <main+0x298>)
 8000580:	881b      	ldrh	r3, [r3, #0]
 8000582:	2b10      	cmp	r3, #16
 8000584:	d10d      	bne.n	80005a2 <main+0xbe>
					inputCode[0] = '4';
 8000586:	4b7f      	ldr	r3, [pc, #508]	; (8000784 <main+0x2a0>)
 8000588:	2234      	movs	r2, #52	; 0x34
 800058a:	701a      	strb	r2, [r3, #0]
					strcat(code, inputCode);
 800058c:	497d      	ldr	r1, [pc, #500]	; (8000784 <main+0x2a0>)
 800058e:	487e      	ldr	r0, [pc, #504]	; (8000788 <main+0x2a4>)
 8000590:	f001 fe7a 	bl	8002288 <strcat>
					numCode++;
 8000594:	4b7d      	ldr	r3, [pc, #500]	; (800078c <main+0x2a8>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	3301      	adds	r3, #1
 800059a:	b2da      	uxtb	r2, r3
 800059c:	4b7b      	ldr	r3, [pc, #492]	; (800078c <main+0x2a8>)
 800059e:	701a      	strb	r2, [r3, #0]
 80005a0:	e0a5      	b.n	80006ee <main+0x20a>
				} else if (keypad == (1 << 5)) {
 80005a2:	4b76      	ldr	r3, [pc, #472]	; (800077c <main+0x298>)
 80005a4:	881b      	ldrh	r3, [r3, #0]
 80005a6:	2b20      	cmp	r3, #32
 80005a8:	d10d      	bne.n	80005c6 <main+0xe2>
					inputCode[0] = '5';
 80005aa:	4b76      	ldr	r3, [pc, #472]	; (8000784 <main+0x2a0>)
 80005ac:	2235      	movs	r2, #53	; 0x35
 80005ae:	701a      	strb	r2, [r3, #0]
					strcat(code, inputCode);
 80005b0:	4974      	ldr	r1, [pc, #464]	; (8000784 <main+0x2a0>)
 80005b2:	4875      	ldr	r0, [pc, #468]	; (8000788 <main+0x2a4>)
 80005b4:	f001 fe68 	bl	8002288 <strcat>
					numCode++;
 80005b8:	4b74      	ldr	r3, [pc, #464]	; (800078c <main+0x2a8>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	4b72      	ldr	r3, [pc, #456]	; (800078c <main+0x2a8>)
 80005c2:	701a      	strb	r2, [r3, #0]
 80005c4:	e093      	b.n	80006ee <main+0x20a>
				} else if (keypad == (1 << 6)) {
 80005c6:	4b6d      	ldr	r3, [pc, #436]	; (800077c <main+0x298>)
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	2b40      	cmp	r3, #64	; 0x40
 80005cc:	d10d      	bne.n	80005ea <main+0x106>
					inputCode[0] = '6';
 80005ce:	4b6d      	ldr	r3, [pc, #436]	; (8000784 <main+0x2a0>)
 80005d0:	2236      	movs	r2, #54	; 0x36
 80005d2:	701a      	strb	r2, [r3, #0]
					strcat(code, inputCode);
 80005d4:	496b      	ldr	r1, [pc, #428]	; (8000784 <main+0x2a0>)
 80005d6:	486c      	ldr	r0, [pc, #432]	; (8000788 <main+0x2a4>)
 80005d8:	f001 fe56 	bl	8002288 <strcat>
					numCode++;
 80005dc:	4b6b      	ldr	r3, [pc, #428]	; (800078c <main+0x2a8>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	4b69      	ldr	r3, [pc, #420]	; (800078c <main+0x2a8>)
 80005e6:	701a      	strb	r2, [r3, #0]
 80005e8:	e081      	b.n	80006ee <main+0x20a>
				} else if (keypad == (1 << 8)) {
 80005ea:	4b64      	ldr	r3, [pc, #400]	; (800077c <main+0x298>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80005f2:	d10d      	bne.n	8000610 <main+0x12c>
					inputCode[0] = '1';
 80005f4:	4b63      	ldr	r3, [pc, #396]	; (8000784 <main+0x2a0>)
 80005f6:	2231      	movs	r2, #49	; 0x31
 80005f8:	701a      	strb	r2, [r3, #0]
					strcat(code, inputCode);
 80005fa:	4962      	ldr	r1, [pc, #392]	; (8000784 <main+0x2a0>)
 80005fc:	4862      	ldr	r0, [pc, #392]	; (8000788 <main+0x2a4>)
 80005fe:	f001 fe43 	bl	8002288 <strcat>
					numCode++;
 8000602:	4b62      	ldr	r3, [pc, #392]	; (800078c <main+0x2a8>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	3301      	adds	r3, #1
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4b60      	ldr	r3, [pc, #384]	; (800078c <main+0x2a8>)
 800060c:	701a      	strb	r2, [r3, #0]
 800060e:	e06e      	b.n	80006ee <main+0x20a>
				} else if (keypad == (1 << 9)) {
 8000610:	4b5a      	ldr	r3, [pc, #360]	; (800077c <main+0x298>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000618:	d10d      	bne.n	8000636 <main+0x152>
					inputCode[0] = '2';
 800061a:	4b5a      	ldr	r3, [pc, #360]	; (8000784 <main+0x2a0>)
 800061c:	2232      	movs	r2, #50	; 0x32
 800061e:	701a      	strb	r2, [r3, #0]
					strcat(code, inputCode);
 8000620:	4958      	ldr	r1, [pc, #352]	; (8000784 <main+0x2a0>)
 8000622:	4859      	ldr	r0, [pc, #356]	; (8000788 <main+0x2a4>)
 8000624:	f001 fe30 	bl	8002288 <strcat>
					numCode++;
 8000628:	4b58      	ldr	r3, [pc, #352]	; (800078c <main+0x2a8>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	3301      	adds	r3, #1
 800062e:	b2da      	uxtb	r2, r3
 8000630:	4b56      	ldr	r3, [pc, #344]	; (800078c <main+0x2a8>)
 8000632:	701a      	strb	r2, [r3, #0]
 8000634:	e05b      	b.n	80006ee <main+0x20a>
				} else if (keypad == (1 << 10)) {
 8000636:	4b51      	ldr	r3, [pc, #324]	; (800077c <main+0x298>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800063e:	d10d      	bne.n	800065c <main+0x178>
					inputCode[0] = '3';
 8000640:	4b50      	ldr	r3, [pc, #320]	; (8000784 <main+0x2a0>)
 8000642:	2233      	movs	r2, #51	; 0x33
 8000644:	701a      	strb	r2, [r3, #0]
					strcat(code, inputCode);
 8000646:	494f      	ldr	r1, [pc, #316]	; (8000784 <main+0x2a0>)
 8000648:	484f      	ldr	r0, [pc, #316]	; (8000788 <main+0x2a4>)
 800064a:	f001 fe1d 	bl	8002288 <strcat>
					numCode++;
 800064e:	4b4f      	ldr	r3, [pc, #316]	; (800078c <main+0x2a8>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	3301      	adds	r3, #1
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4b4d      	ldr	r3, [pc, #308]	; (800078c <main+0x2a8>)
 8000658:	701a      	strb	r2, [r3, #0]
 800065a:	e048      	b.n	80006ee <main+0x20a>
				} else if (keypad == (1 << 12)) {
 800065c:	4b47      	ldr	r3, [pc, #284]	; (800077c <main+0x298>)
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000664:	d10d      	bne.n	8000682 <main+0x19e>
					inputCode[0] = '0';
 8000666:	4b47      	ldr	r3, [pc, #284]	; (8000784 <main+0x2a0>)
 8000668:	2230      	movs	r2, #48	; 0x30
 800066a:	701a      	strb	r2, [r3, #0]
					strcat(code, inputCode);
 800066c:	4945      	ldr	r1, [pc, #276]	; (8000784 <main+0x2a0>)
 800066e:	4846      	ldr	r0, [pc, #280]	; (8000788 <main+0x2a4>)
 8000670:	f001 fe0a 	bl	8002288 <strcat>
					numCode++;
 8000674:	4b45      	ldr	r3, [pc, #276]	; (800078c <main+0x2a8>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	3301      	adds	r3, #1
 800067a:	b2da      	uxtb	r2, r3
 800067c:	4b43      	ldr	r3, [pc, #268]	; (800078c <main+0x2a8>)
 800067e:	701a      	strb	r2, [r3, #0]
 8000680:	e035      	b.n	80006ee <main+0x20a>
				} else if (keypad == (1 << 3)) {
 8000682:	4b3e      	ldr	r3, [pc, #248]	; (800077c <main+0x298>)
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	2b08      	cmp	r3, #8
 8000688:	d114      	bne.n	80006b4 <main+0x1d0>
					for (int i = 0; i < numCode + 1; i++) {
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
 800068e:	e007      	b.n	80006a0 <main+0x1bc>
						code[i] = '\0';
 8000690:	4a3d      	ldr	r2, [pc, #244]	; (8000788 <main+0x2a4>)
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	4413      	add	r3, r2
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < numCode + 1; i++) {
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	3301      	adds	r3, #1
 800069e:	61fb      	str	r3, [r7, #28]
 80006a0:	4b3a      	ldr	r3, [pc, #232]	; (800078c <main+0x2a8>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	4293      	cmp	r3, r2
 80006aa:	ddf1      	ble.n	8000690 <main+0x1ac>
					}
					numCode = 0;
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <main+0x2a8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
 80006b2:	e01c      	b.n	80006ee <main+0x20a>
				} else if (keypad == (1 << 7)) {
 80006b4:	4b31      	ldr	r3, [pc, #196]	; (800077c <main+0x298>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	2b80      	cmp	r3, #128	; 0x80
 80006ba:	d110      	bne.n	80006de <main+0x1fa>
					if (numCode > 0) {
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <main+0x2a8>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d005      	beq.n	80006d0 <main+0x1ec>
						numCode--;
 80006c4:	4b31      	ldr	r3, [pc, #196]	; (800078c <main+0x2a8>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	3b01      	subs	r3, #1
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b2f      	ldr	r3, [pc, #188]	; (800078c <main+0x2a8>)
 80006ce:	701a      	strb	r2, [r3, #0]
					}
					code[numCode] = '\0';
 80006d0:	4b2e      	ldr	r3, [pc, #184]	; (800078c <main+0x2a8>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b2c      	ldr	r3, [pc, #176]	; (8000788 <main+0x2a4>)
 80006d8:	2100      	movs	r1, #0
 80006da:	5499      	strb	r1, [r3, r2]
 80006dc:	e007      	b.n	80006ee <main+0x20a>
				} else if (keypad == (1 << 15)) {
 80006de:	4b27      	ldr	r3, [pc, #156]	; (800077c <main+0x298>)
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80006e6:	d102      	bne.n	80006ee <main+0x20a>
					ok = 1;
 80006e8:	4b29      	ldr	r3, [pc, #164]	; (8000790 <main+0x2ac>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	701a      	strb	r2, [r3, #0]
				}
				buttonState = 1;
 80006ee:	4b24      	ldr	r3, [pc, #144]	; (8000780 <main+0x29c>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	701a      	strb	r2, [r3, #0]
 80006f4:	e002      	b.n	80006fc <main+0x218>
			}
		} else {
			buttonState = 0;
 80006f6:	4b22      	ldr	r3, [pc, #136]	; (8000780 <main+0x29c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
		}
		switch (STATE) {
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <main+0x2b0>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	f000 80aa 	beq.w	800085a <main+0x376>
 8000706:	2b01      	cmp	r3, #1
 8000708:	f040 810a 	bne.w	8000920 <main+0x43c>
		case unlock:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	2120      	movs	r1, #32
 8000710:	4821      	ldr	r0, [pc, #132]	; (8000798 <main+0x2b4>)
 8000712:	f000 fee9 	bl	80014e8 <HAL_GPIO_WritePin>
			if (ok) {
 8000716:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <main+0x2ac>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	f000 80fd 	beq.w	800091a <main+0x436>
				if (save && numCode >= 4) {
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <main+0x2b8>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d03d      	beq.n	80007a4 <main+0x2c0>
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <main+0x2a8>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b03      	cmp	r3, #3
 800072e:	d939      	bls.n	80007a4 <main+0x2c0>
					if (strcmp(correctCode, code) == 0) {
 8000730:	4915      	ldr	r1, [pc, #84]	; (8000788 <main+0x2a4>)
 8000732:	481b      	ldr	r0, [pc, #108]	; (80007a0 <main+0x2bc>)
 8000734:	f7ff fd50 	bl	80001d8 <strcmp>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d103      	bne.n	8000746 <main+0x262>
						STATE = lock;
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <main+0x2b0>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
					if (strcmp(correctCode, code) == 0) {
 8000744:	e074      	b.n	8000830 <main+0x34c>
					} else {
						for (int i = 0; i < 5; i++) {
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
 800074a:	e012      	b.n	8000772 <main+0x28e>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800074c:	2201      	movs	r2, #1
 800074e:	2120      	movs	r1, #32
 8000750:	4811      	ldr	r0, [pc, #68]	; (8000798 <main+0x2b4>)
 8000752:	f000 fec9 	bl	80014e8 <HAL_GPIO_WritePin>
							HAL_Delay(100);
 8000756:	2064      	movs	r0, #100	; 0x64
 8000758:	f000 fc20 	bl	8000f9c <HAL_Delay>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,
 800075c:	2200      	movs	r2, #0
 800075e:	2120      	movs	r1, #32
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <main+0x2b4>)
 8000762:	f000 fec1 	bl	80014e8 <HAL_GPIO_WritePin>
									GPIO_PIN_RESET);
							HAL_Delay(100);
 8000766:	2064      	movs	r0, #100	; 0x64
 8000768:	f000 fc18 	bl	8000f9c <HAL_Delay>
						for (int i = 0; i < 5; i++) {
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	3301      	adds	r3, #1
 8000770:	61bb      	str	r3, [r7, #24]
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	2b04      	cmp	r3, #4
 8000776:	dde9      	ble.n	800074c <main+0x268>
					if (strcmp(correctCode, code) == 0) {
 8000778:	e05a      	b.n	8000830 <main+0x34c>
 800077a:	bf00      	nop
 800077c:	2000006c 	.word	0x2000006c
 8000780:	20000071 	.word	0x20000071
 8000784:	20000000 	.word	0x20000000
 8000788:	200000c0 	.word	0x200000c0
 800078c:	2000006e 	.word	0x2000006e
 8000790:	20000070 	.word	0x20000070
 8000794:	20000040 	.word	0x20000040
 8000798:	40020000 	.word	0x40020000
 800079c:	2000006f 	.word	0x2000006f
 80007a0:	20000004 	.word	0x20000004
						}
					}

				} else if (save == 0) {
 80007a4:	4b60      	ldr	r3, [pc, #384]	; (8000928 <main+0x444>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d128      	bne.n	80007fe <main+0x31a>
					if (numCode >= 4) {
 80007ac:	4b5f      	ldr	r3, [pc, #380]	; (800092c <main+0x448>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b03      	cmp	r3, #3
 80007b2:	d90a      	bls.n	80007ca <main+0x2e6>
						save = 1;
 80007b4:	4b5c      	ldr	r3, [pc, #368]	; (8000928 <main+0x444>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	701a      	strb	r2, [r3, #0]
						strcpy(correctCode, code);
 80007ba:	495d      	ldr	r1, [pc, #372]	; (8000930 <main+0x44c>)
 80007bc:	485d      	ldr	r0, [pc, #372]	; (8000934 <main+0x450>)
 80007be:	f001 fd72 	bl	80022a6 <strcpy>
						STATE = lock;
 80007c2:	4b5d      	ldr	r3, [pc, #372]	; (8000938 <main+0x454>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
 80007c8:	e032      	b.n	8000830 <main+0x34c>
					} else {
						for (int i = 0; i < 5; i++) {
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	e012      	b.n	80007f6 <main+0x312>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2120      	movs	r1, #32
 80007d4:	4859      	ldr	r0, [pc, #356]	; (800093c <main+0x458>)
 80007d6:	f000 fe87 	bl	80014e8 <HAL_GPIO_WritePin>
							HAL_Delay(100);
 80007da:	2064      	movs	r0, #100	; 0x64
 80007dc:	f000 fbde 	bl	8000f9c <HAL_Delay>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,
 80007e0:	2200      	movs	r2, #0
 80007e2:	2120      	movs	r1, #32
 80007e4:	4855      	ldr	r0, [pc, #340]	; (800093c <main+0x458>)
 80007e6:	f000 fe7f 	bl	80014e8 <HAL_GPIO_WritePin>
									GPIO_PIN_RESET);
							HAL_Delay(100);
 80007ea:	2064      	movs	r0, #100	; 0x64
 80007ec:	f000 fbd6 	bl	8000f9c <HAL_Delay>
						for (int i = 0; i < 5; i++) {
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	3301      	adds	r3, #1
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	2b04      	cmp	r3, #4
 80007fa:	dde9      	ble.n	80007d0 <main+0x2ec>
 80007fc:	e018      	b.n	8000830 <main+0x34c>
						}
					}
				} else {
					for (int i = 0; i < 5; i++) {
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	e012      	b.n	800082a <main+0x346>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	2120      	movs	r1, #32
 8000808:	484c      	ldr	r0, [pc, #304]	; (800093c <main+0x458>)
 800080a:	f000 fe6d 	bl	80014e8 <HAL_GPIO_WritePin>
						HAL_Delay(100);
 800080e:	2064      	movs	r0, #100	; 0x64
 8000810:	f000 fbc4 	bl	8000f9c <HAL_Delay>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	2120      	movs	r1, #32
 8000818:	4848      	ldr	r0, [pc, #288]	; (800093c <main+0x458>)
 800081a:	f000 fe65 	bl	80014e8 <HAL_GPIO_WritePin>
						HAL_Delay(100);
 800081e:	2064      	movs	r0, #100	; 0x64
 8000820:	f000 fbbc 	bl	8000f9c <HAL_Delay>
					for (int i = 0; i < 5; i++) {
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	3301      	adds	r3, #1
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	2b04      	cmp	r3, #4
 800082e:	dde9      	ble.n	8000804 <main+0x320>
					}
				}
				for (int i = 0; i < numCode + 1; i++) {
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	e007      	b.n	8000846 <main+0x362>
					code[i] = '\0';
 8000836:	4a3e      	ldr	r2, [pc, #248]	; (8000930 <main+0x44c>)
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	4413      	add	r3, r2
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < numCode + 1; i++) {
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	3301      	adds	r3, #1
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b39      	ldr	r3, [pc, #228]	; (800092c <main+0x448>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	461a      	mov	r2, r3
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	4293      	cmp	r3, r2
 8000850:	ddf1      	ble.n	8000836 <main+0x352>
				}
				numCode = 0;
 8000852:	4b36      	ldr	r3, [pc, #216]	; (800092c <main+0x448>)
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000858:	e05f      	b.n	800091a <main+0x436>
		case lock:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800085a:	2201      	movs	r2, #1
 800085c:	2120      	movs	r1, #32
 800085e:	4837      	ldr	r0, [pc, #220]	; (800093c <main+0x458>)
 8000860:	f000 fe42 	bl	80014e8 <HAL_GPIO_WritePin>
			if (ok) {
 8000864:	4b36      	ldr	r3, [pc, #216]	; (8000940 <main+0x45c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d058      	beq.n	800091e <main+0x43a>
				if (numCode >= 4) {
 800086c:	4b2f      	ldr	r3, [pc, #188]	; (800092c <main+0x448>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b03      	cmp	r3, #3
 8000872:	d924      	bls.n	80008be <main+0x3da>
					if (strcmp(correctCode, code) == 0) {
 8000874:	492e      	ldr	r1, [pc, #184]	; (8000930 <main+0x44c>)
 8000876:	482f      	ldr	r0, [pc, #188]	; (8000934 <main+0x450>)
 8000878:	f7ff fcae 	bl	80001d8 <strcmp>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d103      	bne.n	800088a <main+0x3a6>
						STATE = unlock;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <main+0x454>)
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]
 8000888:	e032      	b.n	80008f0 <main+0x40c>
					} else {
						for (int i = 0; i < 5; i++) {
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	e012      	b.n	80008b6 <main+0x3d2>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	2120      	movs	r1, #32
 8000894:	4829      	ldr	r0, [pc, #164]	; (800093c <main+0x458>)
 8000896:	f000 fe27 	bl	80014e8 <HAL_GPIO_WritePin>
							HAL_Delay(100);
 800089a:	2064      	movs	r0, #100	; 0x64
 800089c:	f000 fb7e 	bl	8000f9c <HAL_Delay>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,
 80008a0:	2200      	movs	r2, #0
 80008a2:	2120      	movs	r1, #32
 80008a4:	4825      	ldr	r0, [pc, #148]	; (800093c <main+0x458>)
 80008a6:	f000 fe1f 	bl	80014e8 <HAL_GPIO_WritePin>
									GPIO_PIN_RESET);
							HAL_Delay(100);
 80008aa:	2064      	movs	r0, #100	; 0x64
 80008ac:	f000 fb76 	bl	8000f9c <HAL_Delay>
						for (int i = 0; i < 5; i++) {
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	3301      	adds	r3, #1
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	dde9      	ble.n	8000890 <main+0x3ac>
 80008bc:	e018      	b.n	80008f0 <main+0x40c>
						}
					}
				} else {
					for (int i = 0; i < 5; i++) {
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	e012      	b.n	80008ea <main+0x406>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80008c4:	2201      	movs	r2, #1
 80008c6:	2120      	movs	r1, #32
 80008c8:	481c      	ldr	r0, [pc, #112]	; (800093c <main+0x458>)
 80008ca:	f000 fe0d 	bl	80014e8 <HAL_GPIO_WritePin>
						HAL_Delay(100);
 80008ce:	2064      	movs	r0, #100	; 0x64
 80008d0:	f000 fb64 	bl	8000f9c <HAL_Delay>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2120      	movs	r1, #32
 80008d8:	4818      	ldr	r0, [pc, #96]	; (800093c <main+0x458>)
 80008da:	f000 fe05 	bl	80014e8 <HAL_GPIO_WritePin>
						HAL_Delay(100);
 80008de:	2064      	movs	r0, #100	; 0x64
 80008e0:	f000 fb5c 	bl	8000f9c <HAL_Delay>
					for (int i = 0; i < 5; i++) {
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3301      	adds	r3, #1
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2b04      	cmp	r3, #4
 80008ee:	dde9      	ble.n	80008c4 <main+0x3e0>
					}
				}
				for (int i = 0; i < numCode + 1; i++) {
 80008f0:	2300      	movs	r3, #0
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	e007      	b.n	8000906 <main+0x422>
					code[i] = '\0';
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <main+0x44c>)
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < numCode + 1; i++) {
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	3301      	adds	r3, #1
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <main+0x448>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	461a      	mov	r2, r3
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	4293      	cmp	r3, r2
 8000910:	ddf1      	ble.n	80008f6 <main+0x412>
				}
				numCode = 0;
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <main+0x448>)
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000918:	e001      	b.n	800091e <main+0x43a>
			break;
 800091a:	bf00      	nop
 800091c:	e000      	b.n	8000920 <main+0x43c>
			break;
 800091e:	bf00      	nop
		}
		ok = 0;
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <main+0x45c>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
	while (1) {
 8000926:	e5e8      	b.n	80004fa <main+0x16>
 8000928:	2000006f 	.word	0x2000006f
 800092c:	2000006e 	.word	0x2000006e
 8000930:	200000c0 	.word	0x200000c0
 8000934:	20000004 	.word	0x20000004
 8000938:	20000040 	.word	0x20000040
 800093c:	40020000 	.word	0x40020000
 8000940:	20000070 	.word	0x20000070

08000944 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b094      	sub	sp, #80	; 0x50
 8000948:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800094a:	f107 0320 	add.w	r3, r7, #32
 800094e:	2230      	movs	r2, #48	; 0x30
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f001 fc90 	bl	8002278 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <SystemClock_Config+0xcc>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	4a27      	ldr	r2, [pc, #156]	; (8000a10 <SystemClock_Config+0xcc>)
 8000972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000976:	6413      	str	r3, [r2, #64]	; 0x40
 8000978:	4b25      	ldr	r3, [pc, #148]	; (8000a10 <SystemClock_Config+0xcc>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000984:	2300      	movs	r3, #0
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <SystemClock_Config+0xd0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a21      	ldr	r2, [pc, #132]	; (8000a14 <SystemClock_Config+0xd0>)
 800098e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000992:	6013      	str	r3, [r2, #0]
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <SystemClock_Config+0xd0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a0:	2302      	movs	r3, #2
 80009a2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a4:	2301      	movs	r3, #1
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a8:	2310      	movs	r3, #16
 80009aa:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ac:	2302      	movs	r3, #2
 80009ae:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b0:	2300      	movs	r3, #0
 80009b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80009b4:	2310      	movs	r3, #16
 80009b6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80009b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009bc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009be:	2304      	movs	r3, #4
 80009c0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80009c2:	2304      	movs	r3, #4
 80009c4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 fda6 	bl	800151c <HAL_RCC_OscConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0x96>
		Error_Handler();
 80009d6:	f000 f993 	bl	8000d00 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009da:	230f      	movs	r3, #15
 80009dc:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009de:	2302      	movs	r3, #2
 80009e0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ea:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	2102      	movs	r1, #2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 f808 	bl	8001a0c <HAL_RCC_ClockConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0xc2>
		Error_Handler();
 8000a02:	f000 f97d 	bl	8000d00 <Error_Handler>
	}
}
 8000a06:	bf00      	nop
 8000a08:	3750      	adds	r7, #80	; 0x50
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40007000 	.word	0x40007000

08000a18 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <MX_USART2_UART_Init+0x50>)
 8000a20:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a50:	f001 f9d8 	bl	8001e04 <HAL_UART_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000a5a:	f000 f951 	bl	8000d00 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000007c 	.word	0x2000007c
 8000a68:	40004400 	.word	0x40004400

08000a6c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b55      	ldr	r3, [pc, #340]	; (8000bdc <MX_GPIO_Init+0x170>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a54      	ldr	r2, [pc, #336]	; (8000bdc <MX_GPIO_Init+0x170>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b52      	ldr	r3, [pc, #328]	; (8000bdc <MX_GPIO_Init+0x170>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b4e      	ldr	r3, [pc, #312]	; (8000bdc <MX_GPIO_Init+0x170>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a4d      	ldr	r2, [pc, #308]	; (8000bdc <MX_GPIO_Init+0x170>)
 8000aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b4b      	ldr	r3, [pc, #300]	; (8000bdc <MX_GPIO_Init+0x170>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	4b47      	ldr	r3, [pc, #284]	; (8000bdc <MX_GPIO_Init+0x170>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a46      	ldr	r2, [pc, #280]	; (8000bdc <MX_GPIO_Init+0x170>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b44      	ldr	r3, [pc, #272]	; (8000bdc <MX_GPIO_Init+0x170>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b40      	ldr	r3, [pc, #256]	; (8000bdc <MX_GPIO_Init+0x170>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a3f      	ldr	r2, [pc, #252]	; (8000bdc <MX_GPIO_Init+0x170>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b3d      	ldr	r3, [pc, #244]	; (8000bdc <MX_GPIO_Init+0x170>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | L4_Pin | L1_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8000af8:	4839      	ldr	r0, [pc, #228]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000afa:	f000 fcf5 	bl	80014e8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	4838      	ldr	r0, [pc, #224]	; (8000be4 <MX_GPIO_Init+0x178>)
 8000b04:	f000 fcf0 	bl	80014e8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(L3_GPIO_Port, L3_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2140      	movs	r1, #64	; 0x40
 8000b0c:	4836      	ldr	r0, [pc, #216]	; (8000be8 <MX_GPIO_Init+0x17c>)
 8000b0e:	f000 fceb 	bl	80014e8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000b12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b16:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b18:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b1c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	482e      	ldr	r0, [pc, #184]	; (8000be4 <MX_GPIO_Init+0x178>)
 8000b2a:	f000 fb41 	bl	80011b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000b2e:	2320      	movs	r3, #32
 8000b30:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4826      	ldr	r0, [pc, #152]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000b46:	f000 fb33 	bl	80011b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : L4_Pin L1_Pin */
	GPIO_InitStruct.Pin = L4_Pin | L1_Pin;
 8000b4a:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000b4e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b50:	2311      	movs	r3, #17
 8000b52:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	481f      	ldr	r0, [pc, #124]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000b64:	f000 fb24 	bl	80011b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : L2_Pin */
	GPIO_InitStruct.Pin = L2_Pin;
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b6c:	2311      	movs	r3, #17
 8000b6e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(L2_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4819      	ldr	r0, [pc, #100]	; (8000be4 <MX_GPIO_Init+0x178>)
 8000b80:	f000 fb16 	bl	80011b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : R1_Pin */
	GPIO_InitStruct.Pin = R1_Pin;
 8000b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b88:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(R1_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	4811      	ldr	r0, [pc, #68]	; (8000be0 <MX_GPIO_Init+0x174>)
 8000b9a:	f000 fb09 	bl	80011b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : R2_Pin R4_Pin R3_Pin */
	GPIO_InitStruct.Pin = R2_Pin | R4_Pin | R3_Pin;
 8000b9e:	2338      	movs	r3, #56	; 0x38
 8000ba0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480d      	ldr	r0, [pc, #52]	; (8000be8 <MX_GPIO_Init+0x17c>)
 8000bb2:	f000 fafd 	bl	80011b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : L3_Pin */
	GPIO_InitStruct.Pin = L3_Pin;
 8000bb6:	2340      	movs	r3, #64	; 0x40
 8000bb8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bba:	2311      	movs	r3, #17
 8000bbc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(L3_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4806      	ldr	r0, [pc, #24]	; (8000be8 <MX_GPIO_Init+0x17c>)
 8000bce:	f000 faef 	bl	80011b0 <HAL_GPIO_Init>

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000
 8000be4:	40020800 	.word	0x40020800
 8000be8:	40020400 	.word	0x40020400

08000bec <MatrixKeypadRead>:
		{ R1_GPIO_Port, R2_GPIO_Port, R3_GPIO_Port, R4_GPIO_Port };
uint16_t Rpin[] = { R1_Pin, R2_Pin, R3_Pin, R4_Pin };
GPIO_TypeDef *Lport[] =
		{ L1_GPIO_Port, L2_GPIO_Port, L3_GPIO_Port, L4_GPIO_Port };
uint16_t Lpin[] = { L1_Pin, L2_Pin, L3_Pin, L4_Pin };
void MatrixKeypadRead() {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
	static uint32_t timeStamp = 0;
	static uint8_t currentL = 0;
	if (HAL_GetTick() - timeStamp >= 10) {
 8000bf2:	f000 f9c7 	bl	8000f84 <HAL_GetTick>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	4b3a      	ldr	r3, [pc, #232]	; (8000ce4 <MatrixKeypadRead+0xf8>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	2b09      	cmp	r3, #9
 8000c00:	d96b      	bls.n	8000cda <MatrixKeypadRead+0xee>
		timeStamp = HAL_GetTick();
 8000c02:	f000 f9bf 	bl	8000f84 <HAL_GetTick>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4a36      	ldr	r2, [pc, #216]	; (8000ce4 <MatrixKeypadRead+0xf8>)
 8000c0a:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 4; i++) {
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	e036      	b.n	8000c80 <MatrixKeypadRead+0x94>
			if (HAL_GPIO_ReadPin(Rport[i], Rpin[i]) == GPIO_PIN_RESET) {
 8000c12:	4a35      	ldr	r2, [pc, #212]	; (8000ce8 <MatrixKeypadRead+0xfc>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c1a:	4934      	ldr	r1, [pc, #208]	; (8000cec <MatrixKeypadRead+0x100>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000c22:	4619      	mov	r1, r3
 8000c24:	4610      	mov	r0, r2
 8000c26:	f000 fc47 	bl	80014b8 <HAL_GPIO_ReadPin>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d111      	bne.n	8000c54 <MatrixKeypadRead+0x68>
				keypad |= 1 << (i + (currentL * 4));
 8000c30:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <MatrixKeypadRead+0x104>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	009a      	lsls	r2, r3, #2
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	b21a      	sxth	r2, r3
 8000c42:	4b2c      	ldr	r3, [pc, #176]	; (8000cf4 <MatrixKeypadRead+0x108>)
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	b21b      	sxth	r3, r3
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	b21b      	sxth	r3, r3
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	4b29      	ldr	r3, [pc, #164]	; (8000cf4 <MatrixKeypadRead+0x108>)
 8000c50:	801a      	strh	r2, [r3, #0]
 8000c52:	e012      	b.n	8000c7a <MatrixKeypadRead+0x8e>
			} else {
				keypad &= ~(1 << (i + (currentL * 4)));
 8000c54:	4b26      	ldr	r3, [pc, #152]	; (8000cf0 <MatrixKeypadRead+0x104>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	009a      	lsls	r2, r3, #2
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	2201      	movs	r2, #1
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	b21a      	sxth	r2, r3
 8000c6a:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <MatrixKeypadRead+0x108>)
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	b21b      	sxth	r3, r3
 8000c70:	4013      	ands	r3, r2
 8000c72:	b21b      	sxth	r3, r3
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <MatrixKeypadRead+0x108>)
 8000c78:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < 4; i++) {
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b03      	cmp	r3, #3
 8000c84:	ddc5      	ble.n	8000c12 <MatrixKeypadRead+0x26>
			}
		}
		uint8_t nextL = (currentL + 1) % 4;
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <MatrixKeypadRead+0x104>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	425a      	negs	r2, r3
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	f002 0203 	and.w	r2, r2, #3
 8000c96:	bf58      	it	pl
 8000c98:	4253      	negpl	r3, r2
 8000c9a:	70fb      	strb	r3, [r7, #3]
		HAL_GPIO_WritePin(Lport[currentL], Lpin[currentL], GPIO_PIN_SET);
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <MatrixKeypadRead+0x104>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <MatrixKeypadRead+0x10c>)
 8000ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca8:	4a11      	ldr	r2, [pc, #68]	; (8000cf0 <MatrixKeypadRead+0x104>)
 8000caa:	7812      	ldrb	r2, [r2, #0]
 8000cac:	4611      	mov	r1, r2
 8000cae:	4a13      	ldr	r2, [pc, #76]	; (8000cfc <MatrixKeypadRead+0x110>)
 8000cb0:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 fc16 	bl	80014e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Lport[nextL], Lpin[nextL], GPIO_PIN_RESET);
 8000cbc:	78fb      	ldrb	r3, [r7, #3]
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <MatrixKeypadRead+0x10c>)
 8000cc0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000cc4:	78fb      	ldrb	r3, [r7, #3]
 8000cc6:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <MatrixKeypadRead+0x110>)
 8000cc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f000 fc0a 	bl	80014e8 <HAL_GPIO_WritePin>
		currentL = nextL;
 8000cd4:	4a06      	ldr	r2, [pc, #24]	; (8000cf0 <MatrixKeypadRead+0x104>)
 8000cd6:	78fb      	ldrb	r3, [r7, #3]
 8000cd8:	7013      	strb	r3, [r2, #0]
	}
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000074 	.word	0x20000074
 8000ce8:	20000010 	.word	0x20000010
 8000cec:	20000020 	.word	0x20000020
 8000cf0:	20000078 	.word	0x20000078
 8000cf4:	2000006c 	.word	0x2000006c
 8000cf8:	20000028 	.word	0x20000028
 8000cfc:	20000038 	.word	0x20000038

08000d00 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
 \brief   Disable IRQ Interrupts
 \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void) {
	__ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d08:	e7fe      	b.n	8000d08 <Error_Handler+0x8>
	...

08000d0c <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	4a0f      	ldr	r2, [pc, #60]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d20:	6453      	str	r3, [r2, #68]	; 0x44
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d4a:	2007      	movs	r0, #7
 8000d4c:	f000 f9fc 	bl	8001148 <HAL_NVIC_SetPriorityGrouping>
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40023800 	.word	0x40023800

08000d5c <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
	if (huart->Instance == USART2) {
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a19      	ldr	r2, [pc, #100]	; (8000de0 <HAL_UART_MspInit+0x84>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d12b      	bne.n	8000dd6 <HAL_UART_MspInit+0x7a>
		/* USER CODE BEGIN USART2_MspInit 0 */

		/* USER CODE END USART2_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <HAL_UART_MspInit+0x88>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	4a17      	ldr	r2, [pc, #92]	; (8000de4 <HAL_UART_MspInit+0x88>)
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_UART_MspInit+0x88>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_UART_MspInit+0x88>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a10      	ldr	r2, [pc, #64]	; (8000de4 <HAL_UART_MspInit+0x88>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <HAL_UART_MspInit+0x88>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
		/**USART2 GPIO Configuration
		 PA2     ------> USART2_TX
		 PA3     ------> USART2_RX
		 */
		GPIO_InitStruct.Pin = USART_TX_Pin | USART_RX_Pin;
 8000db6:	230c      	movs	r3, #12
 8000db8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <HAL_UART_MspInit+0x8c>)
 8000dd2:	f000 f9ed 	bl	80011b0 <HAL_GPIO_Init>
		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	}

}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	; 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40004400 	.word	0x40004400
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020000 	.word	0x40020000

08000dec <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000df0:	e7fe      	b.n	8000df0 <NMI_Handler+0x4>

08000df2 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000df6:	e7fe      	b.n	8000df6 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000dfc:	e7fe      	b.n	8000dfc <MemManage_Handler+0x4>

08000dfe <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000e02:	e7fe      	b.n	8000e02 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000e08:	e7fe      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0a <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000e38:	f000 f890 	bl	8000f5c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <SystemInit+0x20>)
 8000e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4a:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <SystemInit+0x20>)
 8000e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e6a:	490e      	ldr	r1, [pc, #56]	; (8000ea4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e80:	4c0b      	ldr	r4, [pc, #44]	; (8000eb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e8e:	f7ff ffd7 	bl	8000e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e92:	f001 f9cd 	bl	8002230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e96:	f7ff fb25 	bl	80004e4 <main>
  bx  lr    
 8000e9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000ea8:	080022f8 	.word	0x080022f8
  ldr r2, =_sbss
 8000eac:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000eb0:	200000e4 	.word	0x200000e4

08000eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC_IRQHandler>
	...

08000eb8 <HAL_Init>:
 * @note   SysTick is used as time base for the HAL_Delay() function, the application
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	/* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <HAL_Init+0x40>)
 8000ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
	__HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <HAL_Init+0x40>)
 8000ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <HAL_Init+0x40>)
 8000eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f000 f931 	bl	8001148 <HAL_NVIC_SetPriorityGrouping>

	/* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
	HAL_InitTick(TICK_INT_PRIORITY);
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f000 f808 	bl	8000efc <HAL_InitTick>

	/* Init the low level hardware */
	HAL_MspInit();
 8000eec:	f7ff ff0e 	bl	8000d0c <HAL_MspInit>

	/* Return function status */
	return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023c00 	.word	0x40023c00

08000efc <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <HAL_InitTick+0x54>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_InitTick+0x58>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f93b 	bl	8001196 <HAL_SYSTICK_Config>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_InitTick+0x2e>
		return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00e      	b.n	8000f48 <HAL_InitTick+0x4c>
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d80a      	bhi.n	8000f46 <HAL_InitTick+0x4a>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f000 f911 	bl	800115e <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 8000f3c:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <HAL_InitTick+0x5c>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
	} else {
		return HAL_ERROR;
	}

	/* Return function status */
	return HAL_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e000      	b.n	8000f48 <HAL_InitTick+0x4c>
		return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000044 	.word	0x20000044
 8000f54:	2000004c 	.word	0x2000004c
 8000f58:	20000048 	.word	0x20000048

08000f5c <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other 
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_IncTick+0x20>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x24>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <HAL_IncTick+0x24>)
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	2000004c 	.word	0x2000004c
 8000f80:	200000e0 	.word	0x200000e0

08000f84 <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
	return uwTick;
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <HAL_GetTick+0x14>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	200000e0 	.word	0x200000e0

08000f9c <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff ffee 	bl	8000f84 <HAL_GetTick>
 8000fa8:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	60fb      	str	r3, [r7, #12]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb4:	d005      	beq.n	8000fc2 <HAL_Delay+0x26>
		wait += (uint32_t) (uwTickFreq);
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_Delay+0x44>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 8000fc2:	bf00      	nop
 8000fc4:	f7ff ffde 	bl	8000f84 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d8f7      	bhi.n	8000fc4 <HAL_Delay+0x28>
	}
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	2000004c 	.word	0x2000004c

08000fe4 <__NVIC_SetPriorityGrouping>:
	 Only values from 0..7 are used.
	 In case of a conflict between priority grouping and available
	 priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
	 \param [in]      PriorityGroup  Priority grouping field.
	 */
	__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
		uint32_t reg_value;
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	60fb      	str	r3, [r7, #12]

		reg_value = SCB->AIRCR; /* read old register configuration    */
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	60bb      	str	r3, [r7, #8]
		reg_value &= ~((uint32_t) (SCB_AIRCR_VECTKEY_Msk
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001000:	4013      	ands	r3, r2
 8001002:	60bb      	str	r3, [r7, #8]
				| SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
				| (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	021a      	lsls	r2, r3, #8
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4313      	orrs	r3, r2
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
 800100c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001014:	60bb      	str	r3, [r7, #8]
		SCB->AIRCR = reg_value;
 8001016:	4a04      	ldr	r2, [pc, #16]	; (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	60d3      	str	r3, [r2, #12]
	}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_GetPriorityGrouping>:
	/**
	 \brief   Get Priority Grouping
	 \details Reads the priority grouping field from the NVIC Interrupt Controller.
	 \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
	 */
	__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void) {
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
		return ((uint32_t) ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk)
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <__NVIC_GetPriorityGrouping+0x18>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	f003 0307 	and.w	r3, r3, #7
				>> SCB_AIRCR_PRIGROUP_Pos));
	}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_SetPriority>:
	 or negative to specify a processor exception.
	 \param [in]      IRQn  Interrupt number.
	 \param [in]  priority  Priority to set.
	 \note    The priority cannot be set for every processor exception.
	 */
	__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	2b00      	cmp	r3, #0
 800105a:	db0a      	blt.n	8001072 <__NVIC_SetPriority+0x2a>
			NVIC->IP[((uint32_t) IRQn)] = (uint8_t) ((priority
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	490c      	ldr	r1, [pc, #48]	; (8001094 <__NVIC_SetPriority+0x4c>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	0112      	lsls	r2, r2, #4
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	440b      	add	r3, r1
 800106c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
					<< (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
		} else {
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
					<< (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
		}
	}
 8001070:	e00a      	b.n	8001088 <__NVIC_SetPriority+0x40>
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4908      	ldr	r1, [pc, #32]	; (8001098 <__NVIC_SetPriority+0x50>)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	3b04      	subs	r3, #4
 8001080:	0112      	lsls	r2, r2, #4
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	440b      	add	r3, r1
 8001086:	761a      	strb	r2, [r3, #24]
	}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000e100 	.word	0xe000e100
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <NVIC_EncodePriority>:
	 \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
	 \param [in]       SubPriority  Subpriority value (starting from 0).
	 \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
	 */
	__STATIC_INLINE uint32_t NVIC_EncodePriority(uint32_t PriorityGroup,
			uint32_t PreemptPriority, uint32_t SubPriority) {
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	61fb      	str	r3, [r7, #28]
		uint32_t PreemptPriorityBits;
		uint32_t SubPriorityBits;

		PreemptPriorityBits =
				((7UL - PriorityGroupTmp) > (uint32_t) (__NVIC_PRIO_BITS)) ?
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f1c3 0307 	rsb	r3, r3, #7
		PreemptPriorityBits =
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	bf28      	it	cs
 80010ba:	2304      	movcs	r3, #4
 80010bc:	61bb      	str	r3, [r7, #24]
						(uint32_t) (__NVIC_PRIO_BITS) :
						(uint32_t) (7UL - PriorityGroupTmp);
		SubPriorityBits =
				((PriorityGroupTmp + (uint32_t) (__NVIC_PRIO_BITS))
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3304      	adds	r3, #4
						< (uint32_t) 7UL) ?
						(uint32_t) 0UL :
 80010c2:	2b06      	cmp	r3, #6
 80010c4:	d902      	bls.n	80010cc <NVIC_EncodePriority+0x30>
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3b03      	subs	r3, #3
 80010ca:	e000      	b.n	80010ce <NVIC_EncodePriority+0x32>
 80010cc:	2300      	movs	r3, #0
		SubPriorityBits =
 80010ce:	617b      	str	r3, [r7, #20]
						(uint32_t) ((PriorityGroupTmp - 7UL)
								+ (uint32_t) (__NVIC_PRIO_BITS));

		return (((PreemptPriority
				& (uint32_t) ((1UL << (PreemptPriorityBits)) - 1UL))
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43da      	mvns	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	401a      	ands	r2, r3
				<< SubPriorityBits)
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	409a      	lsls	r2, r3
				| ((SubPriority & (uint32_t) ((1UL << (SubPriorityBits)) - 1UL))));
 80010e4:	f04f 31ff 	mov.w	r1, #4294967295
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	43d9      	mvns	r1, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	400b      	ands	r3, r1
 80010f4:	4313      	orrs	r3, r2
	}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3724      	adds	r7, #36	; 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001114:	d301      	bcc.n	800111a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001116:	2301      	movs	r3, #1
 8001118:	e00f      	b.n	800113a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111a:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <SysTick_Config+0x40>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001122:	210f      	movs	r1, #15
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f7ff ff8e 	bl	8001048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <SysTick_Config+0x40>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <SysTick_Config+0x40>)
 8001134:	2207      	movs	r2, #7
 8001136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	e000e010 	.word	0xe000e010

08001148 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff47 	bl	8000fe4 <__NVIC_SetPriorityGrouping>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 800115e:	b580      	push	{r7, lr}
 8001160:	b086      	sub	sp, #24
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
 800116a:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00U;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 8001170:	f7ff ff5c 	bl	800102c <__NVIC_GetPriorityGrouping>
 8001174:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	6978      	ldr	r0, [r7, #20]
 800117c:	f7ff ff8e 	bl	800109c <NVIC_EncodePriority>
 8001180:	4602      	mov	r2, r0
 8001182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff5d 	bl	8001048 <__NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
	return SysTick_Config(TicksNumb);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ffb0 	bl	8001104 <SysTick_Config>
 80011a4:	4603      	mov	r3, r0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_GPIO_Init>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t ioposition = 0x00U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
	uint32_t iocurrent = 0x00U;
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
	uint32_t temp = 0x00U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	for (position = 0U; position < GPIO_NUMBER; position++) {
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
 80011ca:	e159      	b.n	8001480 <HAL_GPIO_Init+0x2d0>
		/* Get the IO position */
		ioposition = 0x01U << position;
 80011cc:	2201      	movs	r2, #1
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	617b      	str	r3, [r7, #20]
		/* Get the current IO position */
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]

		if (iocurrent == ioposition) {
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	f040 8148 	bne.w	800147a <HAL_GPIO_Init+0x2ca>
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Output or Alternate function mode selection */
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d005      	beq.n	8001202 <HAL_GPIO_Init+0x52>
					|| (GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d130      	bne.n	8001264 <HAL_GPIO_Init+0xb4>
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	2203      	movs	r2, #3
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
				temp |= (GPIO_Init->Speed << (position * 2U));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	68da      	ldr	r2, [r3, #12]
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
				GPIOx->OSPEEDR = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	609a      	str	r2, [r3, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 8001238:	2201      	movs	r2, #1
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	091b      	lsrs	r3, r3, #4
 800124e:	f003 0201 	and.w	r2, r3, #1
						<< position);
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
				GPIOx->OTYPER = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	605a      	str	r2, [r3, #4]
			}

			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	2b03      	cmp	r3, #3
 800126e:	d017      	beq.n	80012a0 <HAL_GPIO_Init+0xf0>
				/* Check the parameters */
				assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

				/* Activate the Pull-up or Pull down resistor for the current IO */
				temp = GPIOx->PUPDR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
				temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
				GPIOx->PUPDR = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	60da      	str	r2, [r3, #12]
			}

			/* In case of Alternate function mode selection */
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d123      	bne.n	80012f4 <HAL_GPIO_Init+0x144>
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3U];
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	08da      	lsrs	r2, r3, #3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3208      	adds	r2, #8
 80012b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b8:	61bb      	str	r3, [r7, #24]
				temp &= ~(0xFU << ((uint32_t) (position & 0x07U) * 4U));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	220f      	movs	r2, #15
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	691a      	ldr	r2, [r3, #16]
						<< (((uint32_t) position & 0x07U) * 4U));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
				GPIOx->AFR[position >> 3U] = temp;
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	08da      	lsrs	r2, r3, #3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3208      	adds	r2, #8
 80012ee:	69b9      	ldr	r1, [r7, #24]
 80012f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}

			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			temp = GPIOx->MODER;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	61bb      	str	r3, [r7, #24]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	2203      	movs	r2, #3
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0203 	and.w	r2, r3, #3
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
			GPIOx->MODER = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	601a      	str	r2, [r3, #0]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U) {
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 80a2 	beq.w	800147a <HAL_GPIO_Init+0x2ca>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	4b57      	ldr	r3, [pc, #348]	; (8001498 <HAL_GPIO_Init+0x2e8>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	4a56      	ldr	r2, [pc, #344]	; (8001498 <HAL_GPIO_Init+0x2e8>)
 8001340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001344:	6453      	str	r3, [r2, #68]	; 0x44
 8001346:	4b54      	ldr	r3, [pc, #336]	; (8001498 <HAL_GPIO_Init+0x2e8>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]

				temp = SYSCFG->EXTICR[position >> 2U];
 8001352:	4a52      	ldr	r2, [pc, #328]	; (800149c <HAL_GPIO_Init+0x2ec>)
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	3302      	adds	r3, #2
 800135a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135e:	61bb      	str	r3, [r7, #24]
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	220f      	movs	r2, #15
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a49      	ldr	r2, [pc, #292]	; (80014a0 <HAL_GPIO_Init+0x2f0>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d019      	beq.n	80013b2 <HAL_GPIO_Init+0x202>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a48      	ldr	r2, [pc, #288]	; (80014a4 <HAL_GPIO_Init+0x2f4>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d013      	beq.n	80013ae <HAL_GPIO_Init+0x1fe>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a47      	ldr	r2, [pc, #284]	; (80014a8 <HAL_GPIO_Init+0x2f8>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d00d      	beq.n	80013aa <HAL_GPIO_Init+0x1fa>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a46      	ldr	r2, [pc, #280]	; (80014ac <HAL_GPIO_Init+0x2fc>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d007      	beq.n	80013a6 <HAL_GPIO_Init+0x1f6>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a45      	ldr	r2, [pc, #276]	; (80014b0 <HAL_GPIO_Init+0x300>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d101      	bne.n	80013a2 <HAL_GPIO_Init+0x1f2>
 800139e:	2304      	movs	r3, #4
 80013a0:	e008      	b.n	80013b4 <HAL_GPIO_Init+0x204>
 80013a2:	2307      	movs	r3, #7
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x204>
 80013a6:	2303      	movs	r3, #3
 80013a8:	e004      	b.n	80013b4 <HAL_GPIO_Init+0x204>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e002      	b.n	80013b4 <HAL_GPIO_Init+0x204>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_GPIO_Init+0x204>
 80013b2:	2300      	movs	r3, #0
						<< (4U * (position & 0x03U)));
 80013b4:	69fa      	ldr	r2, [r7, #28]
 80013b6:	f002 0203 	and.w	r2, r2, #3
 80013ba:	0092      	lsls	r2, r2, #2
 80013bc:	4093      	lsls	r3, r2
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
				SYSCFG->EXTICR[position >> 2U] = temp;
 80013c4:	4935      	ldr	r1, [pc, #212]	; (800149c <HAL_GPIO_Init+0x2ec>)
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 80013d2:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <HAL_GPIO_Init+0x304>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00U) {
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x246>
					temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
				}
				EXTI->IMR = temp;
 80013f6:	4a2f      	ldr	r2, [pc, #188]	; (80014b4 <HAL_GPIO_Init+0x304>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	6013      	str	r3, [r2, #0]

				temp = EXTI->EMR;
 80013fc:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <HAL_GPIO_Init+0x304>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U) {
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x270>
					temp |= iocurrent;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
				}
				EXTI->EMR = temp;
 8001420:	4a24      	ldr	r2, [pc, #144]	; (80014b4 <HAL_GPIO_Init+0x304>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	6053      	str	r3, [r2, #4]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 8001426:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <HAL_GPIO_Init+0x304>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U) {
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x29a>
					temp |= iocurrent;
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
				}
				EXTI->RTSR = temp;
 800144a:	4a1a      	ldr	r2, [pc, #104]	; (80014b4 <HAL_GPIO_Init+0x304>)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	6093      	str	r3, [r2, #8]

				temp = EXTI->FTSR;
 8001450:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_GPIO_Init+0x304>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U) {
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x2c4>
					temp |= iocurrent;
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
				}
				EXTI->FTSR = temp;
 8001474:	4a0f      	ldr	r2, [pc, #60]	; (80014b4 <HAL_GPIO_Init+0x304>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	60d3      	str	r3, [r2, #12]
	for (position = 0U; position < GPIO_NUMBER; position++) {
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3301      	adds	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	2b0f      	cmp	r3, #15
 8001484:	f67f aea2 	bls.w	80011cc <HAL_GPIO_Init+0x1c>
			}
		}
	}
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3724      	adds	r7, #36	; 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40013800 	.word	0x40013800
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40020400 	.word	0x40020400
 80014a8:	40020800 	.word	0x40020800
 80014ac:	40020c00 	.word	0x40020c00
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40013c00 	.word	0x40013c00

080014b8 <HAL_GPIO_ReadPin>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Pin specifies the port bit to read.
 *         This parameter can be GPIO_PIN_x where x can be (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	807b      	strh	r3, [r7, #2]
	GPIO_PinState bitstatus;

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	if ((GPIOx->IDR & GPIO_Pin) != (uint32_t) GPIO_PIN_RESET) {
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691a      	ldr	r2, [r3, #16]
 80014c8:	887b      	ldrh	r3, [r7, #2]
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <HAL_GPIO_ReadPin+0x1e>
		bitstatus = GPIO_PIN_SET;
 80014d0:	2301      	movs	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
 80014d4:	e001      	b.n	80014da <HAL_GPIO_ReadPin+0x22>
	} else {
		bitstatus = GPIO_PIN_RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 80014da:	7bfb      	ldrb	r3, [r7, #15]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	807b      	strh	r3, [r7, #2]
 80014f4:	4613      	mov	r3, r2
 80014f6:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 80014f8:	787b      	ldrb	r3, [r7, #1]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = GPIO_Pin;
 80014fe:	887a      	ldrh	r2, [r7, #2]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
	}
}
 8001504:	e003      	b.n	800150e <HAL_GPIO_WritePin+0x26>
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
 8001506:	887b      	ldrh	r3, [r7, #2]
 8001508:	041a      	lsls	r2, r3, #16
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	619a      	str	r2, [r3, #24]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <HAL_RCC_OscConfig>:
 *         supported by this API. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(
		RCC_OscInitTypeDef *RCC_OscInitStruct) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	uint32_t tickstart, pll_config;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_RCC_OscConfig+0x12>
		return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e264      	b.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
	}

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d075      	beq.n	8001626 <HAL_RCC_OscConfig+0x10a>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800153a:	4ba3      	ldr	r3, [pc, #652]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b04      	cmp	r3, #4
 8001544:	d00c      	beq.n	8001560 <HAL_RCC_OscConfig+0x44>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001546:	4ba0      	ldr	r3, [pc, #640]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
 800154e:	2b08      	cmp	r3, #8
 8001550:	d112      	bne.n	8001578 <HAL_RCC_OscConfig+0x5c>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8001552:	4b9d      	ldr	r3, [pc, #628]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800155a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800155e:	d10b      	bne.n	8001578 <HAL_RCC_OscConfig+0x5c>
								== RCC_PLLCFGR_PLLSRC_HSE))) {
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001560:	4b99      	ldr	r3, [pc, #612]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d05b      	beq.n	8001624 <HAL_RCC_OscConfig+0x108>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d157      	bne.n	8001624 <HAL_RCC_OscConfig+0x108>
				return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e23f      	b.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001580:	d106      	bne.n	8001590 <HAL_RCC_OscConfig+0x74>
 8001582:	4b91      	ldr	r3, [pc, #580]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a90      	ldr	r2, [pc, #576]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e01d      	b.n	80015cc <HAL_RCC_OscConfig+0xb0>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x98>
 800159a:	4b8b      	ldr	r3, [pc, #556]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a8a      	ldr	r2, [pc, #552]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b88      	ldr	r3, [pc, #544]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a87      	ldr	r2, [pc, #540]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0xb0>
 80015b4:	4b84      	ldr	r3, [pc, #528]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a83      	ldr	r2, [pc, #524]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 80015ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b81      	ldr	r3, [pc, #516]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a80      	ldr	r2, [pc, #512]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 80015c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ca:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d013      	beq.n	80015fc <HAL_RCC_OscConfig+0xe0>
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 80015d4:	f7ff fcd6 	bl	8000f84 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0xd2>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 80015dc:	f7ff fcd2 	bl	8000f84 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	; 0x64
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0xd2>
						return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e204      	b.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80015ee:	4b76      	ldr	r3, [pc, #472]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f0      	beq.n	80015dc <HAL_RCC_OscConfig+0xc0>
 80015fa:	e014      	b.n	8001626 <HAL_RCC_OscConfig+0x10a>
					}
				}
			} else {
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 80015fc:	f7ff fcc2 	bl	8000f84 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is bypassed or disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0xfa>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8001604:	f7ff fcbe 	bl	8000f84 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b64      	cmp	r3, #100	; 0x64
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0xfa>
						return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e1f0      	b.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8001616:	4b6c      	ldr	r3, [pc, #432]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0xe8>
 8001622:	e000      	b.n	8001626 <HAL_RCC_OscConfig+0x10a>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001624:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d063      	beq.n	80016fa <HAL_RCC_OscConfig+0x1de>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001632:	4b65      	ldr	r3, [pc, #404]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00b      	beq.n	8001656 <HAL_RCC_OscConfig+0x13a>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800163e:	4b62      	ldr	r3, [pc, #392]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	2b08      	cmp	r3, #8
 8001648:	d11c      	bne.n	8001684 <HAL_RCC_OscConfig+0x168>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 800164a:	4b5f      	ldr	r3, [pc, #380]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d116      	bne.n	8001684 <HAL_RCC_OscConfig+0x168>
								== RCC_PLLCFGR_PLLSRC_HSI))) {
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001656:	4b5c      	ldr	r3, [pc, #368]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d005      	beq.n	800166e <HAL_RCC_OscConfig+0x152>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d001      	beq.n	800166e <HAL_RCC_OscConfig+0x152>
				return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e1c4      	b.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 800166e:	4b56      	ldr	r3, [pc, #344]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	4952      	ldr	r1, [pc, #328]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 800167e:	4313      	orrs	r3, r2
 8001680:	600b      	str	r3, [r1, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001682:	e03a      	b.n	80016fa <HAL_RCC_OscConfig+0x1de>
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d020      	beq.n	80016ce <HAL_RCC_OscConfig+0x1b2>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 800168c:	4b4f      	ldr	r3, [pc, #316]	; (80017cc <HAL_RCC_OscConfig+0x2b0>)
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001692:	f7ff fc77 	bl	8000f84 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x190>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 800169a:	f7ff fc73 	bl	8000f84 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x190>
						return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e1a5      	b.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 80016ac:	4b46      	ldr	r3, [pc, #280]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0f0      	beq.n	800169a <HAL_RCC_OscConfig+0x17e>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80016b8:	4b43      	ldr	r3, [pc, #268]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	4940      	ldr	r1, [pc, #256]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	600b      	str	r3, [r1, #0]
 80016cc:	e015      	b.n	80016fa <HAL_RCC_OscConfig+0x1de>
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 80016ce:	4b3f      	ldr	r3, [pc, #252]	; (80017cc <HAL_RCC_OscConfig+0x2b0>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80016d4:	f7ff fc56 	bl	8000f84 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x1d2>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 80016dc:	f7ff fc52 	bl	8000f84 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x1d2>
						return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e184      	b.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 80016ee:	4b36      	ldr	r3, [pc, #216]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x1c0>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d030      	beq.n	8001768 <HAL_RCC_OscConfig+0x24c>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d016      	beq.n	800173c <HAL_RCC_OscConfig+0x220>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 800170e:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <HAL_RCC_OscConfig+0x2b4>)
 8001710:	2201      	movs	r2, #1
 8001712:	601a      	str	r2, [r3, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8001714:	f7ff fc36 	bl	8000f84 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x212>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 800171c:	f7ff fc32 	bl	8000f84 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x212>
					return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e164      	b.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 800172e:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0x200>
 800173a:	e015      	b.n	8001768 <HAL_RCC_OscConfig+0x24c>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 800173c:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <HAL_RCC_OscConfig+0x2b4>)
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 8001742:	f7ff fc1f 	bl	8000f84 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x240>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 800174a:	f7ff fc1b 	bl	8000f84 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x240>
					return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e14d      	b.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 800175e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f0      	bne.n	800174a <HAL_RCC_OscConfig+0x22e>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 80a0 	beq.w	80018b6 <HAL_RCC_OscConfig+0x39a>
			== RCC_OSCILLATORTYPE_LSE) {
		FlagStatus pwrclkchanged = RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	75fb      	strb	r3, [r7, #23]
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 800177a:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10f      	bne.n	80017a6 <HAL_RCC_OscConfig+0x28a>
			__HAL_RCC_PWR_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 80017a2:	2301      	movs	r3, #1
 80017a4:	75fb      	strb	r3, [r7, #23]
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_RCC_OscConfig+0x2b8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d121      	bne.n	80017f6 <HAL_RCC_OscConfig+0x2da>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR, PWR_CR_DBP);
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_RCC_OscConfig+0x2b8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <HAL_RCC_OscConfig+0x2b8>)
 80017b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017bc:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 80017be:	f7ff fbe1 	bl	8000f84 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 80017c4:	e011      	b.n	80017ea <HAL_RCC_OscConfig+0x2ce>
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800
 80017cc:	42470000 	.word	0x42470000
 80017d0:	42470e80 	.word	0x42470e80
 80017d4:	40007000 	.word	0x40007000
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 80017d8:	f7ff fbd4 	bl	8000f84 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x2ce>
					return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e106      	b.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 80017ea:	4b85      	ldr	r3, [pc, #532]	; (8001a00 <HAL_RCC_OscConfig+0x4e4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x2bc>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d106      	bne.n	800180c <HAL_RCC_OscConfig+0x2f0>
 80017fe:	4b81      	ldr	r3, [pc, #516]	; (8001a04 <HAL_RCC_OscConfig+0x4e8>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001802:	4a80      	ldr	r2, [pc, #512]	; (8001a04 <HAL_RCC_OscConfig+0x4e8>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6713      	str	r3, [r2, #112]	; 0x70
 800180a:	e01c      	b.n	8001846 <HAL_RCC_OscConfig+0x32a>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	2b05      	cmp	r3, #5
 8001812:	d10c      	bne.n	800182e <HAL_RCC_OscConfig+0x312>
 8001814:	4b7b      	ldr	r3, [pc, #492]	; (8001a04 <HAL_RCC_OscConfig+0x4e8>)
 8001816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001818:	4a7a      	ldr	r2, [pc, #488]	; (8001a04 <HAL_RCC_OscConfig+0x4e8>)
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	6713      	str	r3, [r2, #112]	; 0x70
 8001820:	4b78      	ldr	r3, [pc, #480]	; (8001a04 <HAL_RCC_OscConfig+0x4e8>)
 8001822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001824:	4a77      	ldr	r2, [pc, #476]	; (8001a04 <HAL_RCC_OscConfig+0x4e8>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	6713      	str	r3, [r2, #112]	; 0x70
 800182c:	e00b      	b.n	8001846 <HAL_RCC_OscConfig+0x32a>
 800182e:	4b75      	ldr	r3, [pc, #468]	; (8001a04 <HAL_RCC_OscConfig+0x4e8>)
 8001830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001832:	4a74      	ldr	r2, [pc, #464]	; (8001a04 <HAL_RCC_OscConfig+0x4e8>)
 8001834:	f023 0301 	bic.w	r3, r3, #1
 8001838:	6713      	str	r3, [r2, #112]	; 0x70
 800183a:	4b72      	ldr	r3, [pc, #456]	; (8001a04 <HAL_RCC_OscConfig+0x4e8>)
 800183c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183e:	4a71      	ldr	r2, [pc, #452]	; (8001a04 <HAL_RCC_OscConfig+0x4e8>)
 8001840:	f023 0304 	bic.w	r3, r3, #4
 8001844:	6713      	str	r3, [r2, #112]	; 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d015      	beq.n	800187a <HAL_RCC_OscConfig+0x35e>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800184e:	f7ff fb99 	bl	8000f84 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8001854:	e00a      	b.n	800186c <HAL_RCC_OscConfig+0x350>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8001856:	f7ff fb95 	bl	8000f84 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	f241 3288 	movw	r2, #5000	; 0x1388
 8001864:	4293      	cmp	r3, r2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x350>
					return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e0c5      	b.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 800186c:	4b65      	ldr	r3, [pc, #404]	; (8001a04 <HAL_RCC_OscConfig+0x4e8>)
 800186e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0ee      	beq.n	8001856 <HAL_RCC_OscConfig+0x33a>
 8001878:	e014      	b.n	80018a4 <HAL_RCC_OscConfig+0x388>
				}
			}
		} else {
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 800187a:	f7ff fb83 	bl	8000f84 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8001880:	e00a      	b.n	8001898 <HAL_RCC_OscConfig+0x37c>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8001882:	f7ff fb7f 	bl	8000f84 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001890:	4293      	cmp	r3, r2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x37c>
					return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e0af      	b.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8001898:	4b5a      	ldr	r3, [pc, #360]	; (8001a04 <HAL_RCC_OscConfig+0x4e8>)
 800189a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1ee      	bne.n	8001882 <HAL_RCC_OscConfig+0x366>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 80018a4:	7dfb      	ldrb	r3, [r7, #23]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d105      	bne.n	80018b6 <HAL_RCC_OscConfig+0x39a>
			__HAL_RCC_PWR_CLK_DISABLE();
 80018aa:	4b56      	ldr	r3, [pc, #344]	; (8001a04 <HAL_RCC_OscConfig+0x4e8>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	4a55      	ldr	r2, [pc, #340]	; (8001a04 <HAL_RCC_OscConfig+0x4e8>)
 80018b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b4:	6413      	str	r3, [r2, #64]	; 0x40
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 809b 	beq.w	80019f6 <HAL_RCC_OscConfig+0x4da>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 80018c0:	4b50      	ldr	r3, [pc, #320]	; (8001a04 <HAL_RCC_OscConfig+0x4e8>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 030c 	and.w	r3, r3, #12
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d05c      	beq.n	8001986 <HAL_RCC_OscConfig+0x46a>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d141      	bne.n	8001958 <HAL_RCC_OscConfig+0x43c>
				assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
				assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
				assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 80018d4:	4b4c      	ldr	r3, [pc, #304]	; (8001a08 <HAL_RCC_OscConfig+0x4ec>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 80018da:	f7ff fb53 	bl	8000f84 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d8>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80018e2:	f7ff fb4f 	bl	8000f84 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x3d8>
						return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e081      	b.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80018f4:	4b43      	ldr	r3, [pc, #268]	; (8001a04 <HAL_RCC_OscConfig+0x4e8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1f0      	bne.n	80018e2 <HAL_RCC_OscConfig+0x3c6>
					}
				}

				/* Configure the main PLL clock source, multiplication and division factors. */
				WRITE_REG(RCC->PLLCFGR,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69da      	ldr	r2, [r3, #28]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	019b      	lsls	r3, r3, #6
 8001910:	431a      	orrs	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001916:	085b      	lsrs	r3, r3, #1
 8001918:	3b01      	subs	r3, #1
 800191a:	041b      	lsls	r3, r3, #16
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001922:	061b      	lsls	r3, r3, #24
 8001924:	4937      	ldr	r1, [pc, #220]	; (8001a04 <HAL_RCC_OscConfig+0x4e8>)
 8001926:	4313      	orrs	r3, r2
 8001928:	604b      	str	r3, [r1, #4]
						(RCC_OscInitStruct->PLL.PLLSource | RCC_OscInitStruct->PLL.PLLM | (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos) | (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 800192a:	4b37      	ldr	r3, [pc, #220]	; (8001a08 <HAL_RCC_OscConfig+0x4ec>)
 800192c:	2201      	movs	r2, #1
 800192e:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8001930:	f7ff fb28 	bl	8000f84 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x42e>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8001938:	f7ff fb24 	bl	8000f84 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x42e>
						return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e056      	b.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 800194a:	4b2e      	ldr	r3, [pc, #184]	; (8001a04 <HAL_RCC_OscConfig+0x4e8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x41c>
 8001956:	e04e      	b.n	80019f6 <HAL_RCC_OscConfig+0x4da>
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8001958:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <HAL_RCC_OscConfig+0x4ec>)
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 800195e:	f7ff fb11 	bl	8000f84 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x45c>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8001966:	f7ff fb0d 	bl	8000f84 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x45c>
						return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e03f      	b.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8001978:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <HAL_RCC_OscConfig+0x4e8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f0      	bne.n	8001966 <HAL_RCC_OscConfig+0x44a>
 8001984:	e037      	b.n	80019f6 <HAL_RCC_OscConfig+0x4da>
					}
				}
			}
		} else {
			/* Check if there is a request to disable the PLL used as System clock source */
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_RCC_OscConfig+0x476>
				return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e032      	b.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
			} else {
				/* Do not return HAL_ERROR if request repeats the current configuration */
				pll_config = RCC->PLLCFGR;
 8001992:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <HAL_RCC_OscConfig+0x4e8>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
				if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d028      	beq.n	80019f2 <HAL_RCC_OscConfig+0x4d6>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
								!= RCC_OscInitStruct->PLL.PLLSource)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69db      	ldr	r3, [r3, #28]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d121      	bne.n	80019f2 <HAL_RCC_OscConfig+0x4d6>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
								!= (RCC_OscInitStruct->PLL.PLLM)
										<< RCC_PLLCFGR_PLLM_Pos)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d11a      	bne.n	80019f2 <HAL_RCC_OscConfig+0x4d6>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019c2:	4013      	ands	r3, r2
								!= (RCC_OscInitStruct->PLL.PLLN)
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
										<< RCC_PLLCFGR_PLLN_Pos)
 80019c8:	0192      	lsls	r2, r2, #6
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d111      	bne.n	80019f2 <HAL_RCC_OscConfig+0x4d6>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
								!= (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d8:	085b      	lsrs	r3, r3, #1
 80019da:	3b01      	subs	r3, #1
										<< RCC_PLLCFGR_PLLP_Pos)
 80019dc:	041b      	lsls	r3, r3, #16
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 80019de:	429a      	cmp	r2, r3
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_OscConfig+0x4d6>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
								!= (RCC_OscInitStruct->PLL.PLLQ
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
										<< RCC_PLLCFGR_PLLQ_Pos)))
 80019ec:	061b      	lsls	r3, r3, #24
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d001      	beq.n	80019f6 <HAL_RCC_OscConfig+0x4da>
#endif
						{
					return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
				}
			}
		}
	}
	return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40007000 	.word	0x40007000
 8001a04:	40023800 	.word	0x40023800
 8001a08:	42470060 	.word	0x42470060

08001a0c <HAL_RCC_ClockConfig>:
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL) {
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x14>
		return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0cc      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8001a20:	4b68      	ldr	r3, [pc, #416]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d90c      	bls.n	8001a48 <HAL_RCC_ClockConfig+0x3c>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b65      	ldr	r3, [pc, #404]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8001a36:	4b63      	ldr	r3, [pc, #396]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x3c>
			return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0b8      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d020      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x8a>
			== RCC_CLOCKTYPE_HCLK) {
		/* Set the highest APBx dividers in order to ensure that we do not go through
		 a non-spec phase whatever we decrease or increase HCLK. */
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x60>
				== RCC_CLOCKTYPE_PCLK1) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a60:	4b59      	ldr	r3, [pc, #356]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	4a58      	ldr	r2, [pc, #352]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a6a:	6093      	str	r3, [r2, #8]
		}

		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x78>
				== RCC_CLOCKTYPE_PCLK2) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a78:	4b53      	ldr	r3, [pc, #332]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	4a52      	ldr	r2, [pc, #328]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a82:	6093      	str	r3, [r2, #8]
		}

		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a84:	4b50      	ldr	r3, [pc, #320]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	494d      	ldr	r1, [pc, #308]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	608b      	str	r3, [r1, #8]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d044      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x120>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d107      	bne.n	8001aba <HAL_RCC_ClockConfig+0xae>
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8001aaa:	4b47      	ldr	r3, [pc, #284]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d119      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e07f      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* PLL is selected as System Clock Source */
		else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d003      	beq.n	8001aca <HAL_RCC_ClockConfig+0xbe>
				|| (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)) {
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_ClockConfig+0xce>
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8001aca:	4b3f      	ldr	r3, [pc, #252]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d109      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e06f      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* HSI is selected as System Clock Source */
		else {
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8001ada:	4b3b      	ldr	r3, [pc, #236]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e067      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
			}
		}

		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aea:	4b37      	ldr	r3, [pc, #220]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f023 0203 	bic.w	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4934      	ldr	r1, [pc, #208]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	608b      	str	r3, [r1, #8]

		/* Get Start Tick */
		tickstart = HAL_GetTick();
 8001afc:	f7ff fa42 	bl	8000f84 <HAL_GetTick>
 8001b00:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8001b02:	e00a      	b.n	8001b1a <HAL_RCC_ClockConfig+0x10e>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8001b04:	f7ff fa3e 	bl	8000f84 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_ClockConfig+0x10e>
				return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e04f      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8001b1a:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 020c 	and.w	r2, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	009b      	lsls	r3, r3, #2
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d1eb      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xf8>
			}
		}
	}

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 8001b2c:	4b25      	ldr	r3, [pc, #148]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d20c      	bcs.n	8001b54 <HAL_RCC_ClockConfig+0x148>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8001b42:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x148>
			return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e032      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x166>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 8001b60:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	4916      	ldr	r1, [pc, #88]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d009      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x186>
			== RCC_CLOCKTYPE_PCLK2) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	490e      	ldr	r1, [pc, #56]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8001b92:	f000 f821 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 8001b96:	4602      	mov	r2, r0
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	490a      	ldr	r1, [pc, #40]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001ba4:	5ccb      	ldrb	r3, [r1, r3]
 8001ba6:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8001baa:	4a09      	ldr	r2, [pc, #36]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings */
	HAL_InitTick(uwTickPrio);
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff f9a2 	bl	8000efc <HAL_InitTick>

	return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023c00 	.word	0x40023c00
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	080022d0 	.word	0x080022d0
 8001bd0:	20000044 	.word	0x20000044
 8001bd4:	20000048 	.word	0x20000048

08001bd8 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void) {
 8001bd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bdc:	b084      	sub	sp, #16
 8001bde:	af00      	add	r7, sp, #0
	uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	2300      	movs	r3, #0
 8001bea:	603b      	str	r3, [r7, #0]
	uint32_t sysclockfreq = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60bb      	str	r3, [r7, #8]

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 8001bf0:	4b67      	ldr	r3, [pc, #412]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d00d      	beq.n	8001c18 <HAL_RCC_GetSysClockFreq+0x40>
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	f200 80bd 	bhi.w	8001d7c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d002      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0x34>
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d003      	beq.n	8001c12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c0a:	e0b7      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x1a4>
	case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
	{
		sysclockfreq = HSI_VALUE;
 8001c0c:	4b61      	ldr	r3, [pc, #388]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c0e:	60bb      	str	r3, [r7, #8]
		break;
 8001c10:	e0b7      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x1aa>
	}
	case RCC_CFGR_SWS_HSE: /* HSE used as system clock  source */
	{
		sysclockfreq = HSE_VALUE;
 8001c12:	4b61      	ldr	r3, [pc, #388]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001c14:	60bb      	str	r3, [r7, #8]
		break;
 8001c16:	e0b4      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x1aa>
	}
	case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c18:	4b5d      	ldr	r3, [pc, #372]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c20:	607b      	str	r3, [r7, #4]
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 8001c22:	4b5b      	ldr	r3, [pc, #364]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d04d      	beq.n	8001cca <HAL_RCC_GetSysClockFreq+0xf2>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8001c2e:	4b58      	ldr	r3, [pc, #352]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c30:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8001c32:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8001c34:	461a      	mov	r2, r3
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c3e:	f04f 0100 	mov.w	r1, #0
 8001c42:	ea02 0800 	and.w	r8, r2, r0
 8001c46:	ea03 0901 	and.w	r9, r3, r1
 8001c4a:	4640      	mov	r0, r8
 8001c4c:	4649      	mov	r1, r9
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	014b      	lsls	r3, r1, #5
 8001c58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c5c:	0142      	lsls	r2, r0, #5
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	ebb0 0008 	subs.w	r0, r0, r8
 8001c66:	eb61 0109 	sbc.w	r1, r1, r9
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	018b      	lsls	r3, r1, #6
 8001c74:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c78:	0182      	lsls	r2, r0, #6
 8001c7a:	1a12      	subs	r2, r2, r0
 8001c7c:	eb63 0301 	sbc.w	r3, r3, r1
 8001c80:	f04f 0000 	mov.w	r0, #0
 8001c84:	f04f 0100 	mov.w	r1, #0
 8001c88:	00d9      	lsls	r1, r3, #3
 8001c8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c8e:	00d0      	lsls	r0, r2, #3
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	eb12 0208 	adds.w	r2, r2, r8
 8001c98:	eb43 0309 	adc.w	r3, r3, r9
 8001c9c:	f04f 0000 	mov.w	r0, #0
 8001ca0:	f04f 0100 	mov.w	r1, #0
 8001ca4:	0259      	lsls	r1, r3, #9
 8001ca6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001caa:	0250      	lsls	r0, r2, #9
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	f7fe fa96 	bl	80001ec <__aeabi_uldivmod>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	e04a      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x188>
		} else {
			/* HSI used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8001cca:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8001cce:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cda:	f04f 0100 	mov.w	r1, #0
 8001cde:	ea02 0400 	and.w	r4, r2, r0
 8001ce2:	ea03 0501 	and.w	r5, r3, r1
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	4629      	mov	r1, r5
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	014b      	lsls	r3, r1, #5
 8001cf4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cf8:	0142      	lsls	r2, r0, #5
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	1b00      	subs	r0, r0, r4
 8001d00:	eb61 0105 	sbc.w	r1, r1, r5
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	018b      	lsls	r3, r1, #6
 8001d0e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d12:	0182      	lsls	r2, r0, #6
 8001d14:	1a12      	subs	r2, r2, r0
 8001d16:	eb63 0301 	sbc.w	r3, r3, r1
 8001d1a:	f04f 0000 	mov.w	r0, #0
 8001d1e:	f04f 0100 	mov.w	r1, #0
 8001d22:	00d9      	lsls	r1, r3, #3
 8001d24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d28:	00d0      	lsls	r0, r2, #3
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	1912      	adds	r2, r2, r4
 8001d30:	eb45 0303 	adc.w	r3, r5, r3
 8001d34:	f04f 0000 	mov.w	r0, #0
 8001d38:	f04f 0100 	mov.w	r1, #0
 8001d3c:	0299      	lsls	r1, r3, #10
 8001d3e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d42:	0290      	lsls	r0, r2, #10
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	f7fe fa4a 	bl	80001ec <__aeabi_uldivmod>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]
		}
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	0c1b      	lsrs	r3, r3, #16
 8001d66:	f003 0303 	and.w	r3, r3, #3
				+ 1U) * 2U);
 8001d6a:	3301      	adds	r3, #1
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	603b      	str	r3, [r7, #0]

		sysclockfreq = pllvco / pllp;
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d78:	60bb      	str	r3, [r7, #8]
		break;
 8001d7a:	e002      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x1aa>
	}
	default: {
		sysclockfreq = HSI_VALUE;
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d7e:	60bb      	str	r3, [r7, #8]
		break;
 8001d80:	bf00      	nop
	}
	}
	return sysclockfreq;
 8001d82:	68bb      	ldr	r3, [r7, #8]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	00f42400 	.word	0x00f42400
 8001d98:	007a1200 	.word	0x007a1200

08001d9c <HAL_RCC_GetHCLKFreq>:
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 8001da0:	4b03      	ldr	r3, [pc, #12]	; (8001db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001da2:	681b      	ldr	r3, [r3, #0]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000044 	.word	0x20000044

08001db4 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8001db8:	f7ff fff0 	bl	8001d9c <HAL_RCC_GetHCLKFreq>
 8001dbc:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dbe:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	0a9b      	lsrs	r3, r3, #10
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	4903      	ldr	r1, [pc, #12]	; (8001dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dca:	5ccb      	ldrb	r3, [r1, r3]
 8001dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	080022e0 	.word	0x080022e0

08001ddc <HAL_RCC_GetPCLK2Freq>:
 * @brief  Returns the PCLK2 frequency
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8001de0:	f7ff ffdc 	bl	8001d9c <HAL_RCC_GetHCLKFreq>
 8001de4:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001de6:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	0b5b      	lsrs	r3, r3, #13
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	4903      	ldr	r1, [pc, #12]	; (8001e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001df2:	5ccb      	ldrb	r3, [r1, r3]
 8001df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	080022e0 	.word	0x080022e0

08001e04 <HAL_UART_Init>:
 *         the UART_InitTypeDef and create the associated handle.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
	/* Check the UART handle allocation */
	if (huart == NULL) {
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_UART_Init+0x12>
		return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e03f      	b.n	8001e96 <HAL_UART_Init+0x92>
		assert_param(IS_UART_INSTANCE(huart->Instance));
	}
	assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
	assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

	if (huart->gState == HAL_UART_STATE_RESET) {
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d106      	bne.n	8001e30 <HAL_UART_Init+0x2c>
		/* Allocate lock resource and initialize it */
		huart->Lock = HAL_UNLOCKED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
		/* Init the low level hardware : GPIO, CLOCK */
		HAL_UART_MspInit(huart);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7fe ff96 	bl	8000d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
	}

	huart->gState = HAL_UART_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2224      	movs	r2, #36	; 0x24
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Disable the peripheral */
	__HAL_UART_DISABLE(huart);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e46:	60da      	str	r2, [r3, #12]

	/* Set the UART Communication parameters */
	UART_SetConfig(huart);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f829 	bl	8001ea0 <UART_SetConfig>

	/* In asynchronous mode, the following bits must be kept cleared:
	 - LINEN and CLKEN bits in the USART_CR2 register,
	 - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e5c:	611a      	str	r2, [r3, #16]
	CLEAR_BIT(huart->Instance->CR3,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e6c:	615a      	str	r2, [r3, #20]
			(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

	/* Enable the peripheral */
	__HAL_UART_ENABLE(huart);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e7c:	60da      	str	r2, [r3, #12]

	/* Initialize the UART state */
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	641a      	str	r2, [r3, #64]	; 0x40
	huart->gState = HAL_UART_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	huart->RxState = HAL_UART_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2220      	movs	r2, #32
 8001e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <UART_SetConfig>:
 * @brief  Configures the UART peripheral.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_SetConfig(UART_HandleTypeDef *huart) {
 8001ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ea4:	b09f      	sub	sp, #124	; 0x7c
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	66f8      	str	r0, [r7, #108]	; 0x6c
	assert_param(IS_UART_MODE(huart->Init.Mode));

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits
	 according to huart->Init.StopBits value */
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eb6:	68d9      	ldr	r1, [r3, #12]
 8001eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	ea40 0301 	orr.w	r3, r0, r1
 8001ec0:	6113      	str	r3, [r2, #16]
	 Set the M bits according to huart->Init.WordLength value
	 Set PCE and PS bits according to huart->Init.Parity value
	 Set TE and RE bits according to huart->Init.Mode value
	 Set OVER8 bit according to huart->Init.OverSampling value */

	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8001ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	431a      	orrs	r2, r3
			| huart->Init.Mode | huart->Init.OverSampling;
 8001ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ed4:	69db      	ldr	r3, [r3, #28]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	673b      	str	r3, [r7, #112]	; 0x70
	MODIFY_REG(huart->Instance->CR1,
 8001eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001ee4:	f021 010c 	bic.w	r1, r1, #12
 8001ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001eee:	430b      	orrs	r3, r1
 8001ef0:	60d3      	str	r3, [r2, #12]
			(uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
			tmpreg);

	/*-------------------------- USART CR3 Configuration -----------------------*/
	/* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
	MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE),
 8001ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001efe:	6999      	ldr	r1, [r3, #24]
 8001f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	ea40 0301 	orr.w	r3, r0, r1
 8001f08:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
	if ((huart->Instance == USART1) || (huart->Instance == USART6)) {
 8001f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	4bc5      	ldr	r3, [pc, #788]	; (8002224 <UART_SetConfig+0x384>)
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d004      	beq.n	8001f1e <UART_SetConfig+0x7e>
 8001f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4bc3      	ldr	r3, [pc, #780]	; (8002228 <UART_SetConfig+0x388>)
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d103      	bne.n	8001f26 <UART_SetConfig+0x86>
		pclk = HAL_RCC_GetPCLK2Freq();
 8001f1e:	f7ff ff5d 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
 8001f22:	6778      	str	r0, [r7, #116]	; 0x74
 8001f24:	e002      	b.n	8001f2c <UART_SetConfig+0x8c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
	else {
		pclk = HAL_RCC_GetPCLK1Freq();
 8001f26:	f7ff ff45 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8001f2a:	6778      	str	r0, [r7, #116]	; 0x74
	}
	/*-------------------------- USART BRR Configuration ---------------------*/
	if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8001f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f34:	f040 80b6 	bne.w	80020a4 <UART_SetConfig+0x204>
		huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f3a:	461c      	mov	r4, r3
 8001f3c:	f04f 0500 	mov.w	r5, #0
 8001f40:	4622      	mov	r2, r4
 8001f42:	462b      	mov	r3, r5
 8001f44:	1891      	adds	r1, r2, r2
 8001f46:	6439      	str	r1, [r7, #64]	; 0x40
 8001f48:	415b      	adcs	r3, r3
 8001f4a:	647b      	str	r3, [r7, #68]	; 0x44
 8001f4c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f50:	1912      	adds	r2, r2, r4
 8001f52:	eb45 0303 	adc.w	r3, r5, r3
 8001f56:	f04f 0000 	mov.w	r0, #0
 8001f5a:	f04f 0100 	mov.w	r1, #0
 8001f5e:	00d9      	lsls	r1, r3, #3
 8001f60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f64:	00d0      	lsls	r0, r2, #3
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	1911      	adds	r1, r2, r4
 8001f6c:	6639      	str	r1, [r7, #96]	; 0x60
 8001f6e:	416b      	adcs	r3, r5
 8001f70:	667b      	str	r3, [r7, #100]	; 0x64
 8001f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	461a      	mov	r2, r3
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	1891      	adds	r1, r2, r2
 8001f7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f80:	415b      	adcs	r3, r3
 8001f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f88:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001f8c:	f7fe f92e 	bl	80001ec <__aeabi_uldivmod>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4ba5      	ldr	r3, [pc, #660]	; (800222c <UART_SetConfig+0x38c>)
 8001f96:	fba3 2302 	umull	r2, r3, r3, r2
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	011e      	lsls	r6, r3, #4
 8001f9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fa0:	461c      	mov	r4, r3
 8001fa2:	f04f 0500 	mov.w	r5, #0
 8001fa6:	4622      	mov	r2, r4
 8001fa8:	462b      	mov	r3, r5
 8001faa:	1891      	adds	r1, r2, r2
 8001fac:	6339      	str	r1, [r7, #48]	; 0x30
 8001fae:	415b      	adcs	r3, r3
 8001fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8001fb2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001fb6:	1912      	adds	r2, r2, r4
 8001fb8:	eb45 0303 	adc.w	r3, r5, r3
 8001fbc:	f04f 0000 	mov.w	r0, #0
 8001fc0:	f04f 0100 	mov.w	r1, #0
 8001fc4:	00d9      	lsls	r1, r3, #3
 8001fc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fca:	00d0      	lsls	r0, r2, #3
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	1911      	adds	r1, r2, r4
 8001fd2:	65b9      	str	r1, [r7, #88]	; 0x58
 8001fd4:	416b      	adcs	r3, r5
 8001fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	1891      	adds	r1, r2, r2
 8001fe4:	62b9      	str	r1, [r7, #40]	; 0x28
 8001fe6:	415b      	adcs	r3, r3
 8001fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001ff2:	f7fe f8fb 	bl	80001ec <__aeabi_uldivmod>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4b8c      	ldr	r3, [pc, #560]	; (800222c <UART_SetConfig+0x38c>)
 8001ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8002000:	095b      	lsrs	r3, r3, #5
 8002002:	2164      	movs	r1, #100	; 0x64
 8002004:	fb01 f303 	mul.w	r3, r1, r3
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	3332      	adds	r3, #50	; 0x32
 800200e:	4a87      	ldr	r2, [pc, #540]	; (800222c <UART_SetConfig+0x38c>)
 8002010:	fba2 2303 	umull	r2, r3, r2, r3
 8002014:	095b      	lsrs	r3, r3, #5
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800201c:	441e      	add	r6, r3
 800201e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002020:	4618      	mov	r0, r3
 8002022:	f04f 0100 	mov.w	r1, #0
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	1894      	adds	r4, r2, r2
 800202c:	623c      	str	r4, [r7, #32]
 800202e:	415b      	adcs	r3, r3
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
 8002032:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002036:	1812      	adds	r2, r2, r0
 8002038:	eb41 0303 	adc.w	r3, r1, r3
 800203c:	f04f 0400 	mov.w	r4, #0
 8002040:	f04f 0500 	mov.w	r5, #0
 8002044:	00dd      	lsls	r5, r3, #3
 8002046:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800204a:	00d4      	lsls	r4, r2, #3
 800204c:	4622      	mov	r2, r4
 800204e:	462b      	mov	r3, r5
 8002050:	1814      	adds	r4, r2, r0
 8002052:	653c      	str	r4, [r7, #80]	; 0x50
 8002054:	414b      	adcs	r3, r1
 8002056:	657b      	str	r3, [r7, #84]	; 0x54
 8002058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	461a      	mov	r2, r3
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	1891      	adds	r1, r2, r2
 8002064:	61b9      	str	r1, [r7, #24]
 8002066:	415b      	adcs	r3, r3
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800206e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002072:	f7fe f8bb 	bl	80001ec <__aeabi_uldivmod>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4b6c      	ldr	r3, [pc, #432]	; (800222c <UART_SetConfig+0x38c>)
 800207c:	fba3 1302 	umull	r1, r3, r3, r2
 8002080:	095b      	lsrs	r3, r3, #5
 8002082:	2164      	movs	r1, #100	; 0x64
 8002084:	fb01 f303 	mul.w	r3, r1, r3
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	3332      	adds	r3, #50	; 0x32
 800208e:	4a67      	ldr	r2, [pc, #412]	; (800222c <UART_SetConfig+0x38c>)
 8002090:	fba2 2303 	umull	r2, r3, r2, r3
 8002094:	095b      	lsrs	r3, r3, #5
 8002096:	f003 0207 	and.w	r2, r3, #7
 800209a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4432      	add	r2, r6
 80020a0:	609a      	str	r2, [r3, #8]
	} else {
		huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
	}
}
 80020a2:	e0b9      	b.n	8002218 <UART_SetConfig+0x378>
		huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020a6:	461c      	mov	r4, r3
 80020a8:	f04f 0500 	mov.w	r5, #0
 80020ac:	4622      	mov	r2, r4
 80020ae:	462b      	mov	r3, r5
 80020b0:	1891      	adds	r1, r2, r2
 80020b2:	6139      	str	r1, [r7, #16]
 80020b4:	415b      	adcs	r3, r3
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80020bc:	1912      	adds	r2, r2, r4
 80020be:	eb45 0303 	adc.w	r3, r5, r3
 80020c2:	f04f 0000 	mov.w	r0, #0
 80020c6:	f04f 0100 	mov.w	r1, #0
 80020ca:	00d9      	lsls	r1, r3, #3
 80020cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020d0:	00d0      	lsls	r0, r2, #3
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	eb12 0804 	adds.w	r8, r2, r4
 80020da:	eb43 0905 	adc.w	r9, r3, r5
 80020de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f04f 0100 	mov.w	r1, #0
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	008b      	lsls	r3, r1, #2
 80020f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80020f6:	0082      	lsls	r2, r0, #2
 80020f8:	4640      	mov	r0, r8
 80020fa:	4649      	mov	r1, r9
 80020fc:	f7fe f876 	bl	80001ec <__aeabi_uldivmod>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4b49      	ldr	r3, [pc, #292]	; (800222c <UART_SetConfig+0x38c>)
 8002106:	fba3 2302 	umull	r2, r3, r3, r2
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	011e      	lsls	r6, r3, #4
 800210e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002110:	4618      	mov	r0, r3
 8002112:	f04f 0100 	mov.w	r1, #0
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	1894      	adds	r4, r2, r2
 800211c:	60bc      	str	r4, [r7, #8]
 800211e:	415b      	adcs	r3, r3
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002126:	1812      	adds	r2, r2, r0
 8002128:	eb41 0303 	adc.w	r3, r1, r3
 800212c:	f04f 0400 	mov.w	r4, #0
 8002130:	f04f 0500 	mov.w	r5, #0
 8002134:	00dd      	lsls	r5, r3, #3
 8002136:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800213a:	00d4      	lsls	r4, r2, #3
 800213c:	4622      	mov	r2, r4
 800213e:	462b      	mov	r3, r5
 8002140:	1814      	adds	r4, r2, r0
 8002142:	64bc      	str	r4, [r7, #72]	; 0x48
 8002144:	414b      	adcs	r3, r1
 8002146:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4618      	mov	r0, r3
 800214e:	f04f 0100 	mov.w	r1, #0
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	008b      	lsls	r3, r1, #2
 800215c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002160:	0082      	lsls	r2, r0, #2
 8002162:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002166:	f7fe f841 	bl	80001ec <__aeabi_uldivmod>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4b2f      	ldr	r3, [pc, #188]	; (800222c <UART_SetConfig+0x38c>)
 8002170:	fba3 1302 	umull	r1, r3, r3, r2
 8002174:	095b      	lsrs	r3, r3, #5
 8002176:	2164      	movs	r1, #100	; 0x64
 8002178:	fb01 f303 	mul.w	r3, r1, r3
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	3332      	adds	r3, #50	; 0x32
 8002182:	4a2a      	ldr	r2, [pc, #168]	; (800222c <UART_SetConfig+0x38c>)
 8002184:	fba2 2303 	umull	r2, r3, r2, r3
 8002188:	095b      	lsrs	r3, r3, #5
 800218a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800218e:	441e      	add	r6, r3
 8002190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002192:	4618      	mov	r0, r3
 8002194:	f04f 0100 	mov.w	r1, #0
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	1894      	adds	r4, r2, r2
 800219e:	603c      	str	r4, [r7, #0]
 80021a0:	415b      	adcs	r3, r3
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021a8:	1812      	adds	r2, r2, r0
 80021aa:	eb41 0303 	adc.w	r3, r1, r3
 80021ae:	f04f 0400 	mov.w	r4, #0
 80021b2:	f04f 0500 	mov.w	r5, #0
 80021b6:	00dd      	lsls	r5, r3, #3
 80021b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80021bc:	00d4      	lsls	r4, r2, #3
 80021be:	4622      	mov	r2, r4
 80021c0:	462b      	mov	r3, r5
 80021c2:	eb12 0a00 	adds.w	sl, r2, r0
 80021c6:	eb43 0b01 	adc.w	fp, r3, r1
 80021ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f04f 0100 	mov.w	r1, #0
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	008b      	lsls	r3, r1, #2
 80021de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80021e2:	0082      	lsls	r2, r0, #2
 80021e4:	4650      	mov	r0, sl
 80021e6:	4659      	mov	r1, fp
 80021e8:	f7fe f800 	bl	80001ec <__aeabi_uldivmod>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4b0e      	ldr	r3, [pc, #56]	; (800222c <UART_SetConfig+0x38c>)
 80021f2:	fba3 1302 	umull	r1, r3, r3, r2
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	2164      	movs	r1, #100	; 0x64
 80021fa:	fb01 f303 	mul.w	r3, r1, r3
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	3332      	adds	r3, #50	; 0x32
 8002204:	4a09      	ldr	r2, [pc, #36]	; (800222c <UART_SetConfig+0x38c>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	f003 020f 	and.w	r2, r3, #15
 8002210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4432      	add	r2, r6
 8002216:	609a      	str	r2, [r3, #8]
}
 8002218:	bf00      	nop
 800221a:	377c      	adds	r7, #124	; 0x7c
 800221c:	46bd      	mov	sp, r7
 800221e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002222:	bf00      	nop
 8002224:	40011000 	.word	0x40011000
 8002228:	40011400 	.word	0x40011400
 800222c:	51eb851f 	.word	0x51eb851f

08002230 <__libc_init_array>:
 8002230:	b570      	push	{r4, r5, r6, lr}
 8002232:	4d0d      	ldr	r5, [pc, #52]	; (8002268 <__libc_init_array+0x38>)
 8002234:	4c0d      	ldr	r4, [pc, #52]	; (800226c <__libc_init_array+0x3c>)
 8002236:	1b64      	subs	r4, r4, r5
 8002238:	10a4      	asrs	r4, r4, #2
 800223a:	2600      	movs	r6, #0
 800223c:	42a6      	cmp	r6, r4
 800223e:	d109      	bne.n	8002254 <__libc_init_array+0x24>
 8002240:	4d0b      	ldr	r5, [pc, #44]	; (8002270 <__libc_init_array+0x40>)
 8002242:	4c0c      	ldr	r4, [pc, #48]	; (8002274 <__libc_init_array+0x44>)
 8002244:	f000 f838 	bl	80022b8 <_init>
 8002248:	1b64      	subs	r4, r4, r5
 800224a:	10a4      	asrs	r4, r4, #2
 800224c:	2600      	movs	r6, #0
 800224e:	42a6      	cmp	r6, r4
 8002250:	d105      	bne.n	800225e <__libc_init_array+0x2e>
 8002252:	bd70      	pop	{r4, r5, r6, pc}
 8002254:	f855 3b04 	ldr.w	r3, [r5], #4
 8002258:	4798      	blx	r3
 800225a:	3601      	adds	r6, #1
 800225c:	e7ee      	b.n	800223c <__libc_init_array+0xc>
 800225e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002262:	4798      	blx	r3
 8002264:	3601      	adds	r6, #1
 8002266:	e7f2      	b.n	800224e <__libc_init_array+0x1e>
 8002268:	080022f0 	.word	0x080022f0
 800226c:	080022f0 	.word	0x080022f0
 8002270:	080022f0 	.word	0x080022f0
 8002274:	080022f4 	.word	0x080022f4

08002278 <memset>:
 8002278:	4402      	add	r2, r0
 800227a:	4603      	mov	r3, r0
 800227c:	4293      	cmp	r3, r2
 800227e:	d100      	bne.n	8002282 <memset+0xa>
 8002280:	4770      	bx	lr
 8002282:	f803 1b01 	strb.w	r1, [r3], #1
 8002286:	e7f9      	b.n	800227c <memset+0x4>

08002288 <strcat>:
 8002288:	b510      	push	{r4, lr}
 800228a:	4602      	mov	r2, r0
 800228c:	7814      	ldrb	r4, [r2, #0]
 800228e:	4613      	mov	r3, r2
 8002290:	3201      	adds	r2, #1
 8002292:	2c00      	cmp	r4, #0
 8002294:	d1fa      	bne.n	800228c <strcat+0x4>
 8002296:	3b01      	subs	r3, #1
 8002298:	f811 2b01 	ldrb.w	r2, [r1], #1
 800229c:	f803 2f01 	strb.w	r2, [r3, #1]!
 80022a0:	2a00      	cmp	r2, #0
 80022a2:	d1f9      	bne.n	8002298 <strcat+0x10>
 80022a4:	bd10      	pop	{r4, pc}

080022a6 <strcpy>:
 80022a6:	4603      	mov	r3, r0
 80022a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80022ac:	f803 2b01 	strb.w	r2, [r3], #1
 80022b0:	2a00      	cmp	r2, #0
 80022b2:	d1f9      	bne.n	80022a8 <strcpy+0x2>
 80022b4:	4770      	bx	lr
	...

080022b8 <_init>:
 80022b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ba:	bf00      	nop
 80022bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022be:	bc08      	pop	{r3}
 80022c0:	469e      	mov	lr, r3
 80022c2:	4770      	bx	lr

080022c4 <_fini>:
 80022c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c6:	bf00      	nop
 80022c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ca:	bc08      	pop	{r3}
 80022cc:	469e      	mov	lr, r3
 80022ce:	4770      	bx	lr
