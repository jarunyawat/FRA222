
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038a8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003a40  08003a40  00013a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a58  08003a58  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  08003a58  08003a58  00013a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a60  08003a60  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a60  08003a60  00013a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a64  08003a64  00013a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08003a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  200000c8  08003b2c  000200c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08003b2c  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012531  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000265e  00000000  00000000  00032625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00034c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  000358f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016221  00000000  00000000  00036470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd31  00000000  00000000  0004c691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e78a  00000000  00000000  0005a3c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  000e8b4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d0  00000000  00000000  000e8c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000016fd  00000000  00000000  000ebee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000c8 	.word	0x200000c8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003a28 	.word	0x08003a28

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000cc 	.word	0x200000cc
 80001d4:	08003a28 	.word	0x08003a28

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b5b0      	push	{r4, r5, r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fe18 	bl	8001108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 fa28 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 fbb4 	bl	8000c48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 fb88 	bl	8000bf4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004e4:	f000 fb0e 	bl	8000b04 <MX_TIM2_Init>
  MX_TIM11_Init();
 80004e8:	f000 fb60 	bl	8000bac <MX_TIM11_Init>
  MX_TIM1_Init();
 80004ec:	f000 fa86 	bl	80009fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //init matrix
  arm_mat_init_f32(&F, 3, 3, F_data);
 80004f0:	4b71      	ldr	r3, [pc, #452]	; (80006b8 <main+0x1e8>)
 80004f2:	2203      	movs	r2, #3
 80004f4:	2103      	movs	r1, #3
 80004f6:	4871      	ldr	r0, [pc, #452]	; (80006bc <main+0x1ec>)
 80004f8:	f003 f9fc 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_init_f32(&FP, 3, 3, FP_data);
 80004fc:	4b70      	ldr	r3, [pc, #448]	; (80006c0 <main+0x1f0>)
 80004fe:	2203      	movs	r2, #3
 8000500:	2103      	movs	r1, #3
 8000502:	4870      	ldr	r0, [pc, #448]	; (80006c4 <main+0x1f4>)
 8000504:	f003 f9f6 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_init_f32(&Ft, 3, 3, Ft_data);
 8000508:	4b6f      	ldr	r3, [pc, #444]	; (80006c8 <main+0x1f8>)
 800050a:	2203      	movs	r2, #3
 800050c:	2103      	movs	r1, #3
 800050e:	486f      	ldr	r0, [pc, #444]	; (80006cc <main+0x1fc>)
 8000510:	f003 f9f0 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_init_f32(&FPFt, 3, 3, FPFt_data);
 8000514:	4b6e      	ldr	r3, [pc, #440]	; (80006d0 <main+0x200>)
 8000516:	2203      	movs	r2, #3
 8000518:	2103      	movs	r1, #3
 800051a:	486e      	ldr	r0, [pc, #440]	; (80006d4 <main+0x204>)
 800051c:	f003 f9ea 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_init_f32(&X, 3, 1, X_data);
 8000520:	4b6d      	ldr	r3, [pc, #436]	; (80006d8 <main+0x208>)
 8000522:	2201      	movs	r2, #1
 8000524:	2103      	movs	r1, #3
 8000526:	486d      	ldr	r0, [pc, #436]	; (80006dc <main+0x20c>)
 8000528:	f003 f9e4 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_init_f32(&X_l, 3, 1, X_l_data);
 800052c:	4b6c      	ldr	r3, [pc, #432]	; (80006e0 <main+0x210>)
 800052e:	2201      	movs	r2, #1
 8000530:	2103      	movs	r1, #3
 8000532:	486c      	ldr	r0, [pc, #432]	; (80006e4 <main+0x214>)
 8000534:	f003 f9de 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_init_f32(&P, 3, 3, P_data);
 8000538:	4b6b      	ldr	r3, [pc, #428]	; (80006e8 <main+0x218>)
 800053a:	2203      	movs	r2, #3
 800053c:	2103      	movs	r1, #3
 800053e:	486b      	ldr	r0, [pc, #428]	; (80006ec <main+0x21c>)
 8000540:	f003 f9d8 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_init_f32(&P_l, 3, 3, P_l_data);
 8000544:	4b6a      	ldr	r3, [pc, #424]	; (80006f0 <main+0x220>)
 8000546:	2203      	movs	r2, #3
 8000548:	2103      	movs	r1, #3
 800054a:	486a      	ldr	r0, [pc, #424]	; (80006f4 <main+0x224>)
 800054c:	f003 f9d2 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_init_f32(&Q, 3, 3, Q_data);
 8000550:	4b69      	ldr	r3, [pc, #420]	; (80006f8 <main+0x228>)
 8000552:	2203      	movs	r2, #3
 8000554:	2103      	movs	r1, #3
 8000556:	4869      	ldr	r0, [pc, #420]	; (80006fc <main+0x22c>)
 8000558:	f003 f9cc 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_init_f32(&z, 2, 1, z_data);
 800055c:	4b68      	ldr	r3, [pc, #416]	; (8000700 <main+0x230>)
 800055e:	2201      	movs	r2, #1
 8000560:	2102      	movs	r1, #2
 8000562:	4868      	ldr	r0, [pc, #416]	; (8000704 <main+0x234>)
 8000564:	f003 f9c6 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_init_f32(&y, 2, 1, y_data);
 8000568:	4b67      	ldr	r3, [pc, #412]	; (8000708 <main+0x238>)
 800056a:	2201      	movs	r2, #1
 800056c:	2102      	movs	r1, #2
 800056e:	4867      	ldr	r0, [pc, #412]	; (800070c <main+0x23c>)
 8000570:	f003 f9c0 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_init_f32(&z_y, 2, 1, z_y_data);
 8000574:	4b66      	ldr	r3, [pc, #408]	; (8000710 <main+0x240>)
 8000576:	2201      	movs	r2, #1
 8000578:	2102      	movs	r1, #2
 800057a:	4866      	ldr	r0, [pc, #408]	; (8000714 <main+0x244>)
 800057c:	f003 f9ba 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_init_f32(&Kz_y, 3, 1, Kz_y_data);
 8000580:	4b65      	ldr	r3, [pc, #404]	; (8000718 <main+0x248>)
 8000582:	2201      	movs	r2, #1
 8000584:	2103      	movs	r1, #3
 8000586:	4865      	ldr	r0, [pc, #404]	; (800071c <main+0x24c>)
 8000588:	f003 f9b4 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_init_f32(&R, 2, 2, R_data);
 800058c:	4b64      	ldr	r3, [pc, #400]	; (8000720 <main+0x250>)
 800058e:	2202      	movs	r2, #2
 8000590:	2102      	movs	r1, #2
 8000592:	4864      	ldr	r0, [pc, #400]	; (8000724 <main+0x254>)
 8000594:	f003 f9ae 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_init_f32(&H, 2, 3, H_data);
 8000598:	4b63      	ldr	r3, [pc, #396]	; (8000728 <main+0x258>)
 800059a:	2203      	movs	r2, #3
 800059c:	2102      	movs	r1, #2
 800059e:	4863      	ldr	r0, [pc, #396]	; (800072c <main+0x25c>)
 80005a0:	f003 f9a8 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_init_f32(&Ht, 3, 2, Ht_data);
 80005a4:	4b62      	ldr	r3, [pc, #392]	; (8000730 <main+0x260>)
 80005a6:	2202      	movs	r2, #2
 80005a8:	2103      	movs	r1, #3
 80005aa:	4862      	ldr	r0, [pc, #392]	; (8000734 <main+0x264>)
 80005ac:	f003 f9a2 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_init_f32(&HP, 2, 3, HP_data);
 80005b0:	4b61      	ldr	r3, [pc, #388]	; (8000738 <main+0x268>)
 80005b2:	2203      	movs	r2, #3
 80005b4:	2102      	movs	r1, #2
 80005b6:	4861      	ldr	r0, [pc, #388]	; (800073c <main+0x26c>)
 80005b8:	f003 f99c 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_init_f32(&KH, 3, 3, KH_data);
 80005bc:	4b60      	ldr	r3, [pc, #384]	; (8000740 <main+0x270>)
 80005be:	2203      	movs	r2, #3
 80005c0:	2103      	movs	r1, #3
 80005c2:	4860      	ldr	r0, [pc, #384]	; (8000744 <main+0x274>)
 80005c4:	f003 f996 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_init_f32(&PHt, 3, 2, PHt_data);
 80005c8:	4b5f      	ldr	r3, [pc, #380]	; (8000748 <main+0x278>)
 80005ca:	2202      	movs	r2, #2
 80005cc:	2103      	movs	r1, #3
 80005ce:	485f      	ldr	r0, [pc, #380]	; (800074c <main+0x27c>)
 80005d0:	f003 f990 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_init_f32(&HPHt, 2, 2, HPHt_data);
 80005d4:	4b5e      	ldr	r3, [pc, #376]	; (8000750 <main+0x280>)
 80005d6:	2202      	movs	r2, #2
 80005d8:	2102      	movs	r1, #2
 80005da:	485e      	ldr	r0, [pc, #376]	; (8000754 <main+0x284>)
 80005dc:	f003 f98a 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_init_f32(&HPHt_R, 2, 2, HPHt_R_data);
 80005e0:	4b5d      	ldr	r3, [pc, #372]	; (8000758 <main+0x288>)
 80005e2:	2202      	movs	r2, #2
 80005e4:	2102      	movs	r1, #2
 80005e6:	485d      	ldr	r0, [pc, #372]	; (800075c <main+0x28c>)
 80005e8:	f003 f984 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_init_f32(&HPHt_R_inv, 2, 2, HPHt_R_inv_data);
 80005ec:	4b5c      	ldr	r3, [pc, #368]	; (8000760 <main+0x290>)
 80005ee:	2202      	movs	r2, #2
 80005f0:	2102      	movs	r1, #2
 80005f2:	485c      	ldr	r0, [pc, #368]	; (8000764 <main+0x294>)
 80005f4:	f003 f97e 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_init_f32(&K, 3, 2, K_data);
 80005f8:	4b5b      	ldr	r3, [pc, #364]	; (8000768 <main+0x298>)
 80005fa:	2202      	movs	r2, #2
 80005fc:	2103      	movs	r1, #3
 80005fe:	485b      	ldr	r0, [pc, #364]	; (800076c <main+0x29c>)
 8000600:	f003 f978 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_init_f32(&I, 3, 3, I_data);
 8000604:	4b5a      	ldr	r3, [pc, #360]	; (8000770 <main+0x2a0>)
 8000606:	2203      	movs	r2, #3
 8000608:	2103      	movs	r1, #3
 800060a:	485a      	ldr	r0, [pc, #360]	; (8000774 <main+0x2a4>)
 800060c:	f003 f972 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_init_f32(&I_KH, 3, 3, I_KH_data);
 8000610:	4b59      	ldr	r3, [pc, #356]	; (8000778 <main+0x2a8>)
 8000612:	2203      	movs	r2, #3
 8000614:	2103      	movs	r1, #3
 8000616:	4859      	ldr	r0, [pc, #356]	; (800077c <main+0x2ac>)
 8000618:	f003 f96c 	bl	80038f4 <arm_mat_init_f32>
  arm_mat_trans_f32(&H, &Ht);
 800061c:	4945      	ldr	r1, [pc, #276]	; (8000734 <main+0x264>)
 800061e:	4843      	ldr	r0, [pc, #268]	; (800072c <main+0x25c>)
 8000620:	f002 fefc 	bl	800341c <arm_mat_trans_f32>
  arm_mat_trans_f32(&F, &Ft);
 8000624:	4929      	ldr	r1, [pc, #164]	; (80006cc <main+0x1fc>)
 8000626:	4825      	ldr	r0, [pc, #148]	; (80006bc <main+0x1ec>)
 8000628:	f002 fef8 	bl	800341c <arm_mat_trans_f32>
  //
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800062c:	2100      	movs	r1, #0
 800062e:	4854      	ldr	r0, [pc, #336]	; (8000780 <main+0x2b0>)
 8000630:	f001 fe02 	bl	8002238 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (&htim11);
 8000634:	4853      	ldr	r0, [pc, #332]	; (8000784 <main+0x2b4>)
 8000636:	f001 fd4d 	bl	80020d4 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800063a:	213c      	movs	r1, #60	; 0x3c
 800063c:	4852      	ldr	r0, [pc, #328]	; (8000788 <main+0x2b8>)
 800063e:	f001 ff51 	bl	80024e4 <HAL_TIM_Encoder_Start>
  	q[0]=TIM2->CNT;
 8000642:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000648:	461a      	mov	r2, r3
 800064a:	4b50      	ldr	r3, [pc, #320]	; (800078c <main+0x2bc>)
 800064c:	601a      	str	r2, [r3, #0]
  	q[1]=q[0];
 800064e:	4b4f      	ldr	r3, [pc, #316]	; (800078c <main+0x2bc>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a4e      	ldr	r2, [pc, #312]	; (800078c <main+0x2bc>)
 8000654:	6053      	str	r3, [r2, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static int timeStamp = 0;
	  		if (Micros() - timeStamp > 1000) {
 8000656:	f000 fb85 	bl	8000d64 <Micros>
 800065a:	4b4d      	ldr	r3, [pc, #308]	; (8000790 <main+0x2c0>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	461a      	mov	r2, r3
 8000660:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000664:	1a84      	subs	r4, r0, r2
 8000666:	eb61 0503 	sbc.w	r5, r1, r3
 800066a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800066e:	f04f 0300 	mov.w	r3, #0
 8000672:	42ab      	cmp	r3, r5
 8000674:	bf08      	it	eq
 8000676:	42a2      	cmpeq	r2, r4
 8000678:	d2ed      	bcs.n	8000656 <main+0x186>
	  			timeStamp = Micros();
 800067a:	f000 fb73 	bl	8000d64 <Micros>
 800067e:	4602      	mov	r2, r0
 8000680:	460b      	mov	r3, r1
 8000682:	4b43      	ldr	r3, [pc, #268]	; (8000790 <main+0x2c0>)
 8000684:	601a      	str	r2, [r3, #0]
	  			TIM1->CCR1 = 0;
 8000686:	4b43      	ldr	r3, [pc, #268]	; (8000794 <main+0x2c4>)
 8000688:	2200      	movs	r2, #0
 800068a:	635a      	str	r2, [r3, #52]	; 0x34
	  			q[0] = TIM2->CNT;
 800068c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000692:	461a      	mov	r2, r3
 8000694:	4b3d      	ldr	r3, [pc, #244]	; (800078c <main+0x2bc>)
 8000696:	601a      	str	r2, [r3, #0]
	  			if(q[0]-q[1]<-1000){
 8000698:	4b3c      	ldr	r3, [pc, #240]	; (800078c <main+0x2bc>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b3b      	ldr	r3, [pc, #236]	; (800078c <main+0x2bc>)
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80006a6:	da79      	bge.n	800079c <main+0x2cc>
	  				step+=7200;
 80006a8:	4b3b      	ldr	r3, [pc, #236]	; (8000798 <main+0x2c8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80006b0:	4a39      	ldr	r2, [pc, #228]	; (8000798 <main+0x2c8>)
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	e080      	b.n	80007b8 <main+0x2e8>
 80006b6:	bf00      	nop
 80006b8:	20000000 	.word	0x20000000
 80006bc:	20000478 	.word	0x20000478
 80006c0:	2000012c 	.word	0x2000012c
 80006c4:	200002dc 	.word	0x200002dc
 80006c8:	20000150 	.word	0x20000150
 80006cc:	200002ec 	.word	0x200002ec
 80006d0:	20000174 	.word	0x20000174
 80006d4:	2000030c 	.word	0x2000030c
 80006d8:	200000f0 	.word	0x200000f0
 80006dc:	20000488 	.word	0x20000488
 80006e0:	200000fc 	.word	0x200000fc
 80006e4:	200002cc 	.word	0x200002cc
 80006e8:	20000108 	.word	0x20000108
 80006ec:	20000480 	.word	0x20000480
 80006f0:	20000024 	.word	0x20000024
 80006f4:	200002b4 	.word	0x200002b4
 80006f8:	20000048 	.word	0x20000048
 80006fc:	200002e4 	.word	0x200002e4
 8000700:	2000024c 	.word	0x2000024c
 8000704:	200002fc 	.word	0x200002fc
 8000708:	20000254 	.word	0x20000254
 800070c:	200003b4 	.word	0x200003b4
 8000710:	2000025c 	.word	0x2000025c
 8000714:	200002f4 	.word	0x200002f4
 8000718:	20000264 	.word	0x20000264
 800071c:	200003dc 	.word	0x200003dc
 8000720:	2000006c 	.word	0x2000006c
 8000724:	200003c4 	.word	0x200003c4
 8000728:	2000007c 	.word	0x2000007c
 800072c:	200003ac 	.word	0x200003ac
 8000730:	20000198 	.word	0x20000198
 8000734:	20000304 	.word	0x20000304
 8000738:	200001b0 	.word	0x200001b0
 800073c:	200003bc 	.word	0x200003bc
 8000740:	20000228 	.word	0x20000228
 8000744:	200003cc 	.word	0x200003cc
 8000748:	200001c8 	.word	0x200001c8
 800074c:	200002bc 	.word	0x200002bc
 8000750:	200001e0 	.word	0x200001e0
 8000754:	200003d4 	.word	0x200003d4
 8000758:	200001f0 	.word	0x200001f0
 800075c:	200002c4 	.word	0x200002c4
 8000760:	20000200 	.word	0x20000200
 8000764:	200002ac 	.word	0x200002ac
 8000768:	20000210 	.word	0x20000210
 800076c:	200002d4 	.word	0x200002d4
 8000770:	20000094 	.word	0x20000094
 8000774:	200003e4 	.word	0x200003e4
 8000778:	20000270 	.word	0x20000270
 800077c:	20000314 	.word	0x20000314
 8000780:	20000364 	.word	0x20000364
 8000784:	2000031c 	.word	0x2000031c
 8000788:	200003ec 	.word	0x200003ec
 800078c:	20000294 	.word	0x20000294
 8000790:	200002a8 	.word	0x200002a8
 8000794:	40010000 	.word	0x40010000
 8000798:	2000029c 	.word	0x2000029c
	  			}
	  			else if(q[0]-q[1]>=1000){
 800079c:	4b45      	ldr	r3, [pc, #276]	; (80008b4 <main+0x3e4>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b44      	ldr	r3, [pc, #272]	; (80008b4 <main+0x3e4>)
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	1ad3      	subs	r3, r2, r3
 80007a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007aa:	db05      	blt.n	80007b8 <main+0x2e8>
	  				step-=7200;
 80007ac:	4b42      	ldr	r3, [pc, #264]	; (80008b8 <main+0x3e8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f5a3 53e1 	sub.w	r3, r3, #7200	; 0x1c20
 80007b4:	4a40      	ldr	r2, [pc, #256]	; (80008b8 <main+0x3e8>)
 80007b6:	6013      	str	r3, [r2, #0]
	  			}
	  			pos[0] = q[0] + step;
 80007b8:	4b3e      	ldr	r3, [pc, #248]	; (80008b4 <main+0x3e4>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b3e      	ldr	r3, [pc, #248]	; (80008b8 <main+0x3e8>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4413      	add	r3, r2
 80007c2:	4a3e      	ldr	r2, [pc, #248]	; (80008bc <main+0x3ec>)
 80007c4:	6013      	str	r3, [r2, #0]
	  			z_data[0]=pos[0];
 80007c6:	4b3d      	ldr	r3, [pc, #244]	; (80008bc <main+0x3ec>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	ee07 3a90 	vmov	s15, r3
 80007ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007d2:	4b3b      	ldr	r3, [pc, #236]	; (80008c0 <main+0x3f0>)
 80007d4:	edc3 7a00 	vstr	s15, [r3]
	  			z_data[1]=(pos[0]-pos[1])/dt;
 80007d8:	4b38      	ldr	r3, [pc, #224]	; (80008bc <main+0x3ec>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b37      	ldr	r3, [pc, #220]	; (80008bc <main+0x3ec>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	ee07 3a90 	vmov	s15, r3
 80007e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007ea:	eddf 6a36 	vldr	s13, [pc, #216]	; 80008c4 <main+0x3f4>
 80007ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007f2:	4b33      	ldr	r3, [pc, #204]	; (80008c0 <main+0x3f0>)
 80007f4:	edc3 7a01 	vstr	s15, [r3, #4]
	  			//predict
	  			arm_mat_mult_f32(&F, &X_l, &X);
 80007f8:	4a33      	ldr	r2, [pc, #204]	; (80008c8 <main+0x3f8>)
 80007fa:	4934      	ldr	r1, [pc, #208]	; (80008cc <main+0x3fc>)
 80007fc:	4834      	ldr	r0, [pc, #208]	; (80008d0 <main+0x400>)
 80007fe:	f002 fed3 	bl	80035a8 <arm_mat_mult_f32>
	  			arm_mat_mult_f32(&F, &P_l, &FP);
 8000802:	4a34      	ldr	r2, [pc, #208]	; (80008d4 <main+0x404>)
 8000804:	4934      	ldr	r1, [pc, #208]	; (80008d8 <main+0x408>)
 8000806:	4832      	ldr	r0, [pc, #200]	; (80008d0 <main+0x400>)
 8000808:	f002 fece 	bl	80035a8 <arm_mat_mult_f32>
	  			arm_mat_mult_f32(&FP, &Ft, &FPFt);
 800080c:	4a33      	ldr	r2, [pc, #204]	; (80008dc <main+0x40c>)
 800080e:	4934      	ldr	r1, [pc, #208]	; (80008e0 <main+0x410>)
 8000810:	4830      	ldr	r0, [pc, #192]	; (80008d4 <main+0x404>)
 8000812:	f002 fec9 	bl	80035a8 <arm_mat_mult_f32>
	  			arm_mat_add_f32(&FPFt, &Q, &P);
 8000816:	4a33      	ldr	r2, [pc, #204]	; (80008e4 <main+0x414>)
 8000818:	4933      	ldr	r1, [pc, #204]	; (80008e8 <main+0x418>)
 800081a:	4830      	ldr	r0, [pc, #192]	; (80008dc <main+0x40c>)
 800081c:	f003 f86e 	bl	80038fc <arm_mat_add_f32>
	  			//correct
	  			arm_mat_mult_f32(&P, &Ht, &PHt);
 8000820:	4a32      	ldr	r2, [pc, #200]	; (80008ec <main+0x41c>)
 8000822:	4933      	ldr	r1, [pc, #204]	; (80008f0 <main+0x420>)
 8000824:	482f      	ldr	r0, [pc, #188]	; (80008e4 <main+0x414>)
 8000826:	f002 febf 	bl	80035a8 <arm_mat_mult_f32>
	  			arm_mat_mult_f32(&H, &P, &HP);
 800082a:	4a32      	ldr	r2, [pc, #200]	; (80008f4 <main+0x424>)
 800082c:	492d      	ldr	r1, [pc, #180]	; (80008e4 <main+0x414>)
 800082e:	4832      	ldr	r0, [pc, #200]	; (80008f8 <main+0x428>)
 8000830:	f002 feba 	bl	80035a8 <arm_mat_mult_f32>
	  			arm_mat_mult_f32(&HP, &Ht, &HPHt);
 8000834:	4a31      	ldr	r2, [pc, #196]	; (80008fc <main+0x42c>)
 8000836:	492e      	ldr	r1, [pc, #184]	; (80008f0 <main+0x420>)
 8000838:	482e      	ldr	r0, [pc, #184]	; (80008f4 <main+0x424>)
 800083a:	f002 feb5 	bl	80035a8 <arm_mat_mult_f32>
	  			arm_mat_add_f32(&HPHt, &R, &HPHt_R);
 800083e:	4a30      	ldr	r2, [pc, #192]	; (8000900 <main+0x430>)
 8000840:	4930      	ldr	r1, [pc, #192]	; (8000904 <main+0x434>)
 8000842:	482e      	ldr	r0, [pc, #184]	; (80008fc <main+0x42c>)
 8000844:	f003 f85a 	bl	80038fc <arm_mat_add_f32>
	  			arm_mat_inverse_f32(&HPHt_R, &HPHt_R_inv);
 8000848:	492f      	ldr	r1, [pc, #188]	; (8000908 <main+0x438>)
 800084a:	482d      	ldr	r0, [pc, #180]	; (8000900 <main+0x430>)
 800084c:	f002 ff4c 	bl	80036e8 <arm_mat_inverse_f32>
	  			arm_mat_mult_f32(&PHt, &HPHt_R_inv, &K);
 8000850:	4a2e      	ldr	r2, [pc, #184]	; (800090c <main+0x43c>)
 8000852:	492d      	ldr	r1, [pc, #180]	; (8000908 <main+0x438>)
 8000854:	4825      	ldr	r0, [pc, #148]	; (80008ec <main+0x41c>)
 8000856:	f002 fea7 	bl	80035a8 <arm_mat_mult_f32>
	  			arm_mat_mult_f32(&H, &X, &y);
 800085a:	4a2d      	ldr	r2, [pc, #180]	; (8000910 <main+0x440>)
 800085c:	491a      	ldr	r1, [pc, #104]	; (80008c8 <main+0x3f8>)
 800085e:	4826      	ldr	r0, [pc, #152]	; (80008f8 <main+0x428>)
 8000860:	f002 fea2 	bl	80035a8 <arm_mat_mult_f32>
	  			arm_mat_sub_f32(&z, &y, &z_y);
 8000864:	4a2b      	ldr	r2, [pc, #172]	; (8000914 <main+0x444>)
 8000866:	492a      	ldr	r1, [pc, #168]	; (8000910 <main+0x440>)
 8000868:	482b      	ldr	r0, [pc, #172]	; (8000918 <main+0x448>)
 800086a:	f002 fe33 	bl	80034d4 <arm_mat_sub_f32>
	  			arm_mat_mult_f32(&K, &z_y, &Kz_y);
 800086e:	4a2b      	ldr	r2, [pc, #172]	; (800091c <main+0x44c>)
 8000870:	4928      	ldr	r1, [pc, #160]	; (8000914 <main+0x444>)
 8000872:	4826      	ldr	r0, [pc, #152]	; (800090c <main+0x43c>)
 8000874:	f002 fe98 	bl	80035a8 <arm_mat_mult_f32>
	  			arm_mat_add_f32(&X, &Kz_y, &X_l);
 8000878:	4a14      	ldr	r2, [pc, #80]	; (80008cc <main+0x3fc>)
 800087a:	4928      	ldr	r1, [pc, #160]	; (800091c <main+0x44c>)
 800087c:	4812      	ldr	r0, [pc, #72]	; (80008c8 <main+0x3f8>)
 800087e:	f003 f83d 	bl	80038fc <arm_mat_add_f32>
	  			arm_mat_mult_f32(&K, &H, &KH);
 8000882:	4a27      	ldr	r2, [pc, #156]	; (8000920 <main+0x450>)
 8000884:	491c      	ldr	r1, [pc, #112]	; (80008f8 <main+0x428>)
 8000886:	4821      	ldr	r0, [pc, #132]	; (800090c <main+0x43c>)
 8000888:	f002 fe8e 	bl	80035a8 <arm_mat_mult_f32>
	  			arm_mat_sub_f32(&I, &KH, &I_KH);
 800088c:	4a25      	ldr	r2, [pc, #148]	; (8000924 <main+0x454>)
 800088e:	4924      	ldr	r1, [pc, #144]	; (8000920 <main+0x450>)
 8000890:	4825      	ldr	r0, [pc, #148]	; (8000928 <main+0x458>)
 8000892:	f002 fe1f 	bl	80034d4 <arm_mat_sub_f32>
	  			arm_mat_mult_f32(&I_KH, &P, &P_l);
 8000896:	4a10      	ldr	r2, [pc, #64]	; (80008d8 <main+0x408>)
 8000898:	4912      	ldr	r1, [pc, #72]	; (80008e4 <main+0x414>)
 800089a:	4822      	ldr	r0, [pc, #136]	; (8000924 <main+0x454>)
 800089c:	f002 fe84 	bl	80035a8 <arm_mat_mult_f32>
	  			q[1] = q[0];
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <main+0x3e4>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a03      	ldr	r2, [pc, #12]	; (80008b4 <main+0x3e4>)
 80008a6:	6053      	str	r3, [r2, #4]
	  			pos[1] = pos[0];
 80008a8:	4b04      	ldr	r3, [pc, #16]	; (80008bc <main+0x3ec>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a03      	ldr	r2, [pc, #12]	; (80008bc <main+0x3ec>)
 80008ae:	6053      	str	r3, [r2, #4]
  {
 80008b0:	e6d1      	b.n	8000656 <main+0x186>
 80008b2:	bf00      	nop
 80008b4:	20000294 	.word	0x20000294
 80008b8:	2000029c 	.word	0x2000029c
 80008bc:	200002a0 	.word	0x200002a0
 80008c0:	2000024c 	.word	0x2000024c
 80008c4:	3a83126f 	.word	0x3a83126f
 80008c8:	20000488 	.word	0x20000488
 80008cc:	200002cc 	.word	0x200002cc
 80008d0:	20000478 	.word	0x20000478
 80008d4:	200002dc 	.word	0x200002dc
 80008d8:	200002b4 	.word	0x200002b4
 80008dc:	2000030c 	.word	0x2000030c
 80008e0:	200002ec 	.word	0x200002ec
 80008e4:	20000480 	.word	0x20000480
 80008e8:	200002e4 	.word	0x200002e4
 80008ec:	200002bc 	.word	0x200002bc
 80008f0:	20000304 	.word	0x20000304
 80008f4:	200003bc 	.word	0x200003bc
 80008f8:	200003ac 	.word	0x200003ac
 80008fc:	200003d4 	.word	0x200003d4
 8000900:	200002c4 	.word	0x200002c4
 8000904:	200003c4 	.word	0x200003c4
 8000908:	200002ac 	.word	0x200002ac
 800090c:	200002d4 	.word	0x200002d4
 8000910:	200003b4 	.word	0x200003b4
 8000914:	200002f4 	.word	0x200002f4
 8000918:	200002fc 	.word	0x200002fc
 800091c:	200003dc 	.word	0x200003dc
 8000920:	200003cc 	.word	0x200003cc
 8000924:	20000314 	.word	0x20000314
 8000928:	200003e4 	.word	0x200003e4

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b094      	sub	sp, #80	; 0x50
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0320 	add.w	r3, r7, #32
 8000936:	2230      	movs	r2, #48	; 0x30
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f003 f86c 	bl	8003a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <SystemClock_Config+0xc8>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	4a26      	ldr	r2, [pc, #152]	; (80009f4 <SystemClock_Config+0xc8>)
 800095a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095e:	6413      	str	r3, [r2, #64]	; 0x40
 8000960:	4b24      	ldr	r3, [pc, #144]	; (80009f4 <SystemClock_Config+0xc8>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <SystemClock_Config+0xcc>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a20      	ldr	r2, [pc, #128]	; (80009f8 <SystemClock_Config+0xcc>)
 8000976:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <SystemClock_Config+0xcc>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000988:	2302      	movs	r3, #2
 800098a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800098c:	2301      	movs	r3, #1
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000990:	2310      	movs	r3, #16
 8000992:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000994:	2302      	movs	r3, #2
 8000996:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000998:	2300      	movs	r3, #0
 800099a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800099c:	2308      	movs	r3, #8
 800099e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80009a0:	2364      	movs	r3, #100	; 0x64
 80009a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009a8:	2304      	movs	r3, #4
 80009aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ac:	f107 0320 	add.w	r3, r7, #32
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 fecb 	bl	800174c <HAL_RCC_OscConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009bc:	f000 f9ea 	bl	8000d94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	230f      	movs	r3, #15
 80009c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c4:	2302      	movs	r3, #2
 80009c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	2103      	movs	r1, #3
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 f92d 	bl	8001c3c <HAL_RCC_ClockConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009e8:	f000 f9d4 	bl	8000d94 <Error_Handler>
  }
}
 80009ec:	bf00      	nop
 80009ee:	3750      	adds	r7, #80	; 0x50
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40007000 	.word	0x40007000

080009fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b092      	sub	sp, #72	; 0x48
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
 8000a1c:	615a      	str	r2, [r3, #20]
 8000a1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2220      	movs	r2, #32
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f002 fff6 	bl	8003a18 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a2c:	4b33      	ldr	r3, [pc, #204]	; (8000afc <MX_TIM1_Init+0x100>)
 8000a2e:	4a34      	ldr	r2, [pc, #208]	; (8000b00 <MX_TIM1_Init+0x104>)
 8000a30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8000a32:	4b32      	ldr	r3, [pc, #200]	; (8000afc <MX_TIM1_Init+0x100>)
 8000a34:	2209      	movs	r2, #9
 8000a36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a38:	4b30      	ldr	r3, [pc, #192]	; (8000afc <MX_TIM1_Init+0x100>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8000a3e:	4b2f      	ldr	r3, [pc, #188]	; (8000afc <MX_TIM1_Init+0x100>)
 8000a40:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000a44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a46:	4b2d      	ldr	r3, [pc, #180]	; (8000afc <MX_TIM1_Init+0x100>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a4c:	4b2b      	ldr	r3, [pc, #172]	; (8000afc <MX_TIM1_Init+0x100>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a52:	4b2a      	ldr	r3, [pc, #168]	; (8000afc <MX_TIM1_Init+0x100>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a58:	4828      	ldr	r0, [pc, #160]	; (8000afc <MX_TIM1_Init+0x100>)
 8000a5a:	f001 fb9d 	bl	8002198 <HAL_TIM_PWM_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000a64:	f000 f996 	bl	8000d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a74:	4619      	mov	r1, r3
 8000a76:	4821      	ldr	r0, [pc, #132]	; (8000afc <MX_TIM1_Init+0x100>)
 8000a78:	f002 f9e6 	bl	8002e48 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000a82:	f000 f987 	bl	8000d94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a86:	2360      	movs	r3, #96	; 0x60
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a92:	2300      	movs	r3, #0
 8000a94:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4814      	ldr	r0, [pc, #80]	; (8000afc <MX_TIM1_Init+0x100>)
 8000aac:	f001 feb0 	bl	8002810 <HAL_TIM_PWM_ConfigChannel>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000ab6:	f000 f96d 	bl	8000d94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ace:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	4619      	mov	r1, r3
 8000adc:	4807      	ldr	r0, [pc, #28]	; (8000afc <MX_TIM1_Init+0x100>)
 8000ade:	f002 fa21 	bl	8002f24 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000ae8:	f000 f954 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000aec:	4803      	ldr	r0, [pc, #12]	; (8000afc <MX_TIM1_Init+0x100>)
 8000aee:	f000 fa15 	bl	8000f1c <HAL_TIM_MspPostInit>

}
 8000af2:	bf00      	nop
 8000af4:	3748      	adds	r7, #72	; 0x48
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000364 	.word	0x20000364
 8000b00:	40010000 	.word	0x40010000

08000b04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08c      	sub	sp, #48	; 0x30
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	2224      	movs	r2, #36	; 0x24
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f002 ff80 	bl	8003a18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b20:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <MX_TIM2_Init+0xa4>)
 8000b22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <MX_TIM2_Init+0xa4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <MX_TIM2_Init+0xa4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7199;
 8000b34:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <MX_TIM2_Init+0xa4>)
 8000b36:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000b3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <MX_TIM2_Init+0xa4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <MX_TIM2_Init+0xa4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b50:	2301      	movs	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b60:	2301      	movs	r3, #1
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	4619      	mov	r1, r3
 8000b72:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <MX_TIM2_Init+0xa4>)
 8000b74:	f001 fc10 	bl	8002398 <HAL_TIM_Encoder_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000b7e:	f000 f909 	bl	8000d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <MX_TIM2_Init+0xa4>)
 8000b90:	f002 f95a 	bl	8002e48 <HAL_TIMEx_MasterConfigSynchronization>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000b9a:	f000 f8fb 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	3730      	adds	r7, #48	; 0x30
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200003ec 	.word	0x200003ec

08000bac <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_TIM11_Init+0x40>)
 8000bb2:	4a0f      	ldr	r2, [pc, #60]	; (8000bf0 <MX_TIM11_Init+0x44>)
 8000bb4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <MX_TIM11_Init+0x40>)
 8000bb8:	2263      	movs	r2, #99	; 0x63
 8000bba:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <MX_TIM11_Init+0x40>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <MX_TIM11_Init+0x40>)
 8000bc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bc8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <MX_TIM11_Init+0x40>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_TIM11_Init+0x40>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_TIM11_Init+0x40>)
 8000bd8:	f001 fa2c 	bl	8002034 <HAL_TIM_Base_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000be2:	f000 f8d7 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	2000031c 	.word	0x2000031c
 8000bf0:	40014800 	.word	0x40014800

08000bf4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <MX_USART2_UART_Init+0x50>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c2c:	f002 f9e0 	bl	8002ff0 <HAL_UART_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c36:	f000 f8ad 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000434 	.word	0x20000434
 8000c44:	40004400 	.word	0x40004400

08000c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b2e      	ldr	r3, [pc, #184]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a2d      	ldr	r2, [pc, #180]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b27      	ldr	r3, [pc, #156]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a26      	ldr	r2, [pc, #152]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a1f      	ldr	r2, [pc, #124]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a18      	ldr	r2, [pc, #96]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000cd4:	4812      	ldr	r0, [pc, #72]	; (8000d20 <MX_GPIO_Init+0xd8>)
 8000cd6:	f000 fd1f 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ce0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480c      	ldr	r0, [pc, #48]	; (8000d24 <MX_GPIO_Init+0xdc>)
 8000cf2:	f000 fb8d 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 8000cf6:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <MX_GPIO_Init+0xd8>)
 8000d10:	f000 fb7e 	bl	8001410 <HAL_GPIO_Init>

}
 8000d14:	bf00      	nop
 8000d16:	3728      	adds	r7, #40	; 0x28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020000 	.word	0x40020000
 8000d24:	40020800 	.word	0x40020800

08000d28 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d28:	b4b0      	push	{r4, r5, r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d10c      	bne.n	8000d52 <HAL_TIM_PeriodElapsedCallback+0x2a>
		_micro += 65535;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d42:	f04f 0100 	mov.w	r1, #0
 8000d46:	1814      	adds	r4, r2, r0
 8000d48:	eb43 0501 	adc.w	r5, r3, r1
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000d4e:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bcb0      	pop	{r4, r5, r7}
 8000d5a:	4770      	bx	lr
 8000d5c:	2000031c 	.word	0x2000031c
 8000d60:	200000e8 	.word	0x200000e8

08000d64 <Micros>:

uint64_t Micros(){
 8000d64:	b4b0      	push	{r4, r5, r7}
 8000d66:	af00      	add	r7, sp, #0
	return _micro + TIM11->CNT;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <Micros+0x28>)
 8000d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f04f 0100 	mov.w	r1, #0
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <Micros+0x2c>)
 8000d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d78:	1884      	adds	r4, r0, r2
 8000d7a:	eb41 0503 	adc.w	r5, r1, r3
 8000d7e:	4622      	mov	r2, r4
 8000d80:	462b      	mov	r3, r5
}
 8000d82:	4610      	mov	r0, r2
 8000d84:	4619      	mov	r1, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bcb0      	pop	{r4, r5, r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	40014800 	.word	0x40014800
 8000d90:	200000e8 	.word	0x200000e8

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <Error_Handler+0x8>
	...

08000da0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	4a0f      	ldr	r2, [pc, #60]	; (8000dec <HAL_MspInit+0x4c>)
 8000db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db4:	6453      	str	r3, [r2, #68]	; 0x44
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <HAL_MspInit+0x4c>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	4a08      	ldr	r2, [pc, #32]	; (8000dec <HAL_MspInit+0x4c>)
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_MspInit+0x4c>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dde:	2007      	movs	r0, #7
 8000de0:	f000 fad4 	bl	800138c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800

08000df0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <HAL_TIM_PWM_MspInit+0x48>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d115      	bne.n	8000e2e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <HAL_TIM_PWM_MspInit+0x4c>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	4a0c      	ldr	r2, [pc, #48]	; (8000e3c <HAL_TIM_PWM_MspInit+0x4c>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6453      	str	r3, [r2, #68]	; 0x44
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_TIM_PWM_MspInit+0x4c>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	201a      	movs	r0, #26
 8000e24:	f000 fabd 	bl	80013a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000e28:	201a      	movs	r0, #26
 8000e2a:	f000 fad6 	bl	80013da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40010000 	.word	0x40010000
 8000e3c:	40023800 	.word	0x40023800

08000e40 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e60:	d12b      	bne.n	8000eba <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <HAL_TIM_Encoder_MspInit+0x84>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	4a16      	ldr	r2, [pc, #88]	; (8000ec4 <HAL_TIM_Encoder_MspInit+0x84>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6413      	str	r3, [r2, #64]	; 0x40
 8000e72:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <HAL_TIM_Encoder_MspInit+0x84>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <HAL_TIM_Encoder_MspInit+0x84>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a0f      	ldr	r2, [pc, #60]	; (8000ec4 <HAL_TIM_Encoder_MspInit+0x84>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <HAL_TIM_Encoder_MspInit+0x84>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <HAL_TIM_Encoder_MspInit+0x88>)
 8000eb6:	f000 faab 	bl	8001410 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	; 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020000 	.word	0x40020000

08000ecc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0e      	ldr	r2, [pc, #56]	; (8000f14 <HAL_TIM_Base_MspInit+0x48>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d115      	bne.n	8000f0a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <HAL_TIM_Base_MspInit+0x4c>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	4a0c      	ldr	r2, [pc, #48]	; (8000f18 <HAL_TIM_Base_MspInit+0x4c>)
 8000ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <HAL_TIM_Base_MspInit+0x4c>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	201a      	movs	r0, #26
 8000f00:	f000 fa4f 	bl	80013a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000f04:	201a      	movs	r0, #26
 8000f06:	f000 fa68 	bl	80013da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40014800 	.word	0x40014800
 8000f18:	40023800 	.word	0x40023800

08000f1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <HAL_TIM_MspPostInit+0x68>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d11e      	bne.n	8000f7c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_TIM_MspPostInit+0x6c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a10      	ldr	r2, [pc, #64]	; (8000f88 <HAL_TIM_MspPostInit+0x6c>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_TIM_MspPostInit+0x6c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	4619      	mov	r1, r3
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <HAL_TIM_MspPostInit+0x70>)
 8000f78:	f000 fa4a 	bl	8001410 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f7c:	bf00      	nop
 8000f7e:	3720      	adds	r7, #32
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40010000 	.word	0x40010000
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000

08000f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a19      	ldr	r2, [pc, #100]	; (8001014 <HAL_UART_MspInit+0x84>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d12b      	bne.n	800100a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	4a17      	ldr	r2, [pc, #92]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a10      	ldr	r2, [pc, #64]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fea:	230c      	movs	r3, #12
 8000fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	; (800101c <HAL_UART_MspInit+0x8c>)
 8001006:	f000 fa03 	bl	8001410 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3728      	adds	r7, #40	; 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40004400 	.word	0x40004400
 8001018:	40023800 	.word	0x40023800
 800101c:	40020000 	.word	0x40020000

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <NMI_Handler+0x4>

08001026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <HardFault_Handler+0x4>

0800102c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <MemManage_Handler+0x4>

08001032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <UsageFault_Handler+0x4>

0800103e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106c:	f000 f89e 	bl	80011ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001078:	4803      	ldr	r0, [pc, #12]	; (8001088 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800107a:	f001 fac1 	bl	8002600 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800107e:	4803      	ldr	r0, [pc, #12]	; (800108c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001080:	f001 fabe 	bl	8002600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000364 	.word	0x20000364
 800108c:	2000031c 	.word	0x2000031c

08001090 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <SystemInit+0x20>)
 8001096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <SystemInit+0x20>)
 800109c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010b8:	480d      	ldr	r0, [pc, #52]	; (80010f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ba:	490e      	ldr	r1, [pc, #56]	; (80010f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010bc:	4a0e      	ldr	r2, [pc, #56]	; (80010f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c0:	e002      	b.n	80010c8 <LoopCopyDataInit>

080010c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c6:	3304      	adds	r3, #4

080010c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010cc:	d3f9      	bcc.n	80010c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010d0:	4c0b      	ldr	r4, [pc, #44]	; (8001100 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d4:	e001      	b.n	80010da <LoopFillZerobss>

080010d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d8:	3204      	adds	r2, #4

080010da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010dc:	d3fb      	bcc.n	80010d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010de:	f7ff ffd7 	bl	8001090 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010e2:	f002 fc75 	bl	80039d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010e6:	f7ff f9f3 	bl	80004d0 <main>
  bx  lr    
 80010ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f4:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80010f8:	08003a68 	.word	0x08003a68
  ldr r2, =_sbss
 80010fc:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8001100:	20000494 	.word	0x20000494

08001104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC_IRQHandler>
	...

08001108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <HAL_Init+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0d      	ldr	r2, [pc, #52]	; (8001148 <HAL_Init+0x40>)
 8001112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001116:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <HAL_Init+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <HAL_Init+0x40>)
 800111e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001122:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_Init+0x40>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a07      	ldr	r2, [pc, #28]	; (8001148 <HAL_Init+0x40>)
 800112a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001130:	2003      	movs	r0, #3
 8001132:	f000 f92b 	bl	800138c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001136:	2000      	movs	r0, #0
 8001138:	f000 f808 	bl	800114c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800113c:	f7ff fe30 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023c00 	.word	0x40023c00

0800114c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_InitTick+0x54>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_InitTick+0x58>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4619      	mov	r1, r3
 800115e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001162:	fbb3 f3f1 	udiv	r3, r3, r1
 8001166:	fbb2 f3f3 	udiv	r3, r2, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f943 	bl	80013f6 <HAL_SYSTICK_Config>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e00e      	b.n	8001198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b0f      	cmp	r3, #15
 800117e:	d80a      	bhi.n	8001196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001180:	2200      	movs	r2, #0
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	f000 f90b 	bl	80013a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800118c:	4a06      	ldr	r2, [pc, #24]	; (80011a8 <HAL_InitTick+0x5c>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	e000      	b.n	8001198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200000b8 	.word	0x200000b8
 80011a4:	200000c0 	.word	0x200000c0
 80011a8:	200000bc 	.word	0x200000bc

080011ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_IncTick+0x20>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_IncTick+0x24>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <HAL_IncTick+0x24>)
 80011be:	6013      	str	r3, [r2, #0]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	200000c0 	.word	0x200000c0
 80011d0:	20000490 	.word	0x20000490

080011d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return uwTick;
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <HAL_GetTick+0x14>)
 80011da:	681b      	ldr	r3, [r3, #0]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000490 	.word	0x20000490

080011ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001208:	4013      	ands	r3, r2
 800120a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121e:	4a04      	ldr	r2, [pc, #16]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	60d3      	str	r3, [r2, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <__NVIC_GetPriorityGrouping+0x18>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	f003 0307 	and.w	r3, r3, #7
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	2b00      	cmp	r3, #0
 8001260:	db0b      	blt.n	800127a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	f003 021f 	and.w	r2, r3, #31
 8001268:	4907      	ldr	r1, [pc, #28]	; (8001288 <__NVIC_EnableIRQ+0x38>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	2001      	movs	r0, #1
 8001272:	fa00 f202 	lsl.w	r2, r0, r2
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000e100 	.word	0xe000e100

0800128c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	2b00      	cmp	r3, #0
 800129e:	db0a      	blt.n	80012b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	490c      	ldr	r1, [pc, #48]	; (80012d8 <__NVIC_SetPriority+0x4c>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	0112      	lsls	r2, r2, #4
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	440b      	add	r3, r1
 80012b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b4:	e00a      	b.n	80012cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4908      	ldr	r1, [pc, #32]	; (80012dc <__NVIC_SetPriority+0x50>)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	3b04      	subs	r3, #4
 80012c4:	0112      	lsls	r2, r2, #4
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	440b      	add	r3, r1
 80012ca:	761a      	strb	r2, [r3, #24]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000e100 	.word	0xe000e100
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f1c3 0307 	rsb	r3, r3, #7
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	bf28      	it	cs
 80012fe:	2304      	movcs	r3, #4
 8001300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3304      	adds	r3, #4
 8001306:	2b06      	cmp	r3, #6
 8001308:	d902      	bls.n	8001310 <NVIC_EncodePriority+0x30>
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3b03      	subs	r3, #3
 800130e:	e000      	b.n	8001312 <NVIC_EncodePriority+0x32>
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	f04f 32ff 	mov.w	r2, #4294967295
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43da      	mvns	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	401a      	ands	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001328:	f04f 31ff 	mov.w	r1, #4294967295
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	43d9      	mvns	r1, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	4313      	orrs	r3, r2
         );
}
 800133a:	4618      	mov	r0, r3
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001358:	d301      	bcc.n	800135e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135a:	2301      	movs	r3, #1
 800135c:	e00f      	b.n	800137e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <SysTick_Config+0x40>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001366:	210f      	movs	r1, #15
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f7ff ff8e 	bl	800128c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <SysTick_Config+0x40>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <SysTick_Config+0x40>)
 8001378:	2207      	movs	r2, #7
 800137a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	e000e010 	.word	0xe000e010

0800138c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff ff29 	bl	80011ec <__NVIC_SetPriorityGrouping>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b4:	f7ff ff3e 	bl	8001234 <__NVIC_GetPriorityGrouping>
 80013b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f7ff ff8e 	bl	80012e0 <NVIC_EncodePriority>
 80013c4:	4602      	mov	r2, r0
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff5d 	bl	800128c <__NVIC_SetPriority>
}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff31 	bl	8001250 <__NVIC_EnableIRQ>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ffa2 	bl	8001348 <SysTick_Config>
 8001404:	4603      	mov	r3, r0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
 800142a:	e159      	b.n	80016e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800142c:	2201      	movs	r2, #1
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	429a      	cmp	r2, r3
 8001446:	f040 8148 	bne.w	80016da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	2b01      	cmp	r3, #1
 8001454:	d005      	beq.n	8001462 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800145e:	2b02      	cmp	r3, #2
 8001460:	d130      	bne.n	80014c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001498:	2201      	movs	r2, #1
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	f003 0201 	and.w	r2, r3, #1
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d017      	beq.n	8001500 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d123      	bne.n	8001554 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	08da      	lsrs	r2, r3, #3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3208      	adds	r2, #8
 8001514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	220f      	movs	r2, #15
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	08da      	lsrs	r2, r3, #3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3208      	adds	r2, #8
 800154e:	69b9      	ldr	r1, [r7, #24]
 8001550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	2203      	movs	r2, #3
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0203 	and.w	r2, r3, #3
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 80a2 	beq.w	80016da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b57      	ldr	r3, [pc, #348]	; (80016f8 <HAL_GPIO_Init+0x2e8>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	4a56      	ldr	r2, [pc, #344]	; (80016f8 <HAL_GPIO_Init+0x2e8>)
 80015a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a4:	6453      	str	r3, [r2, #68]	; 0x44
 80015a6:	4b54      	ldr	r3, [pc, #336]	; (80016f8 <HAL_GPIO_Init+0x2e8>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015b2:	4a52      	ldr	r2, [pc, #328]	; (80016fc <HAL_GPIO_Init+0x2ec>)
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	089b      	lsrs	r3, r3, #2
 80015b8:	3302      	adds	r3, #2
 80015ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	220f      	movs	r2, #15
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a49      	ldr	r2, [pc, #292]	; (8001700 <HAL_GPIO_Init+0x2f0>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d019      	beq.n	8001612 <HAL_GPIO_Init+0x202>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a48      	ldr	r2, [pc, #288]	; (8001704 <HAL_GPIO_Init+0x2f4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d013      	beq.n	800160e <HAL_GPIO_Init+0x1fe>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a47      	ldr	r2, [pc, #284]	; (8001708 <HAL_GPIO_Init+0x2f8>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d00d      	beq.n	800160a <HAL_GPIO_Init+0x1fa>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a46      	ldr	r2, [pc, #280]	; (800170c <HAL_GPIO_Init+0x2fc>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d007      	beq.n	8001606 <HAL_GPIO_Init+0x1f6>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a45      	ldr	r2, [pc, #276]	; (8001710 <HAL_GPIO_Init+0x300>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d101      	bne.n	8001602 <HAL_GPIO_Init+0x1f2>
 80015fe:	2304      	movs	r3, #4
 8001600:	e008      	b.n	8001614 <HAL_GPIO_Init+0x204>
 8001602:	2307      	movs	r3, #7
 8001604:	e006      	b.n	8001614 <HAL_GPIO_Init+0x204>
 8001606:	2303      	movs	r3, #3
 8001608:	e004      	b.n	8001614 <HAL_GPIO_Init+0x204>
 800160a:	2302      	movs	r3, #2
 800160c:	e002      	b.n	8001614 <HAL_GPIO_Init+0x204>
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <HAL_GPIO_Init+0x204>
 8001612:	2300      	movs	r3, #0
 8001614:	69fa      	ldr	r2, [r7, #28]
 8001616:	f002 0203 	and.w	r2, r2, #3
 800161a:	0092      	lsls	r2, r2, #2
 800161c:	4093      	lsls	r3, r2
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001624:	4935      	ldr	r1, [pc, #212]	; (80016fc <HAL_GPIO_Init+0x2ec>)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	089b      	lsrs	r3, r3, #2
 800162a:	3302      	adds	r3, #2
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001632:	4b38      	ldr	r3, [pc, #224]	; (8001714 <HAL_GPIO_Init+0x304>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001656:	4a2f      	ldr	r2, [pc, #188]	; (8001714 <HAL_GPIO_Init+0x304>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800165c:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <HAL_GPIO_Init+0x304>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001680:	4a24      	ldr	r2, [pc, #144]	; (8001714 <HAL_GPIO_Init+0x304>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001686:	4b23      	ldr	r3, [pc, #140]	; (8001714 <HAL_GPIO_Init+0x304>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016aa:	4a1a      	ldr	r2, [pc, #104]	; (8001714 <HAL_GPIO_Init+0x304>)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016b0:	4b18      	ldr	r3, [pc, #96]	; (8001714 <HAL_GPIO_Init+0x304>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016d4:	4a0f      	ldr	r2, [pc, #60]	; (8001714 <HAL_GPIO_Init+0x304>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3301      	adds	r3, #1
 80016de:	61fb      	str	r3, [r7, #28]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	2b0f      	cmp	r3, #15
 80016e4:	f67f aea2 	bls.w	800142c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	3724      	adds	r7, #36	; 0x24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40013800 	.word	0x40013800
 8001700:	40020000 	.word	0x40020000
 8001704:	40020400 	.word	0x40020400
 8001708:	40020800 	.word	0x40020800
 800170c:	40020c00 	.word	0x40020c00
 8001710:	40021000 	.word	0x40021000
 8001714:	40013c00 	.word	0x40013c00

08001718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	807b      	strh	r3, [r7, #2]
 8001724:	4613      	mov	r3, r2
 8001726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001728:	787b      	ldrb	r3, [r7, #1]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001734:	e003      	b.n	800173e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001736:	887b      	ldrh	r3, [r7, #2]
 8001738:	041a      	lsls	r2, r3, #16
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	619a      	str	r2, [r3, #24]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e264      	b.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d075      	beq.n	8001856 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800176a:	4ba3      	ldr	r3, [pc, #652]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b04      	cmp	r3, #4
 8001774:	d00c      	beq.n	8001790 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001776:	4ba0      	ldr	r3, [pc, #640]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800177e:	2b08      	cmp	r3, #8
 8001780:	d112      	bne.n	80017a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001782:	4b9d      	ldr	r3, [pc, #628]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800178a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800178e:	d10b      	bne.n	80017a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001790:	4b99      	ldr	r3, [pc, #612]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d05b      	beq.n	8001854 <HAL_RCC_OscConfig+0x108>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d157      	bne.n	8001854 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e23f      	b.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b0:	d106      	bne.n	80017c0 <HAL_RCC_OscConfig+0x74>
 80017b2:	4b91      	ldr	r3, [pc, #580]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a90      	ldr	r2, [pc, #576]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e01d      	b.n	80017fc <HAL_RCC_OscConfig+0xb0>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c8:	d10c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x98>
 80017ca:	4b8b      	ldr	r3, [pc, #556]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a8a      	ldr	r2, [pc, #552]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 80017d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b88      	ldr	r3, [pc, #544]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a87      	ldr	r2, [pc, #540]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e00b      	b.n	80017fc <HAL_RCC_OscConfig+0xb0>
 80017e4:	4b84      	ldr	r3, [pc, #528]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a83      	ldr	r2, [pc, #524]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 80017ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b81      	ldr	r3, [pc, #516]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a80      	ldr	r2, [pc, #512]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 80017f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d013      	beq.n	800182c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff fce6 	bl	80011d4 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800180c:	f7ff fce2 	bl	80011d4 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b64      	cmp	r3, #100	; 0x64
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e204      	b.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	4b76      	ldr	r3, [pc, #472]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0f0      	beq.n	800180c <HAL_RCC_OscConfig+0xc0>
 800182a:	e014      	b.n	8001856 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff fcd2 	bl	80011d4 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001834:	f7ff fcce 	bl	80011d4 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b64      	cmp	r3, #100	; 0x64
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e1f0      	b.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001846:	4b6c      	ldr	r3, [pc, #432]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0xe8>
 8001852:	e000      	b.n	8001856 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d063      	beq.n	800192a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001862:	4b65      	ldr	r3, [pc, #404]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00b      	beq.n	8001886 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800186e:	4b62      	ldr	r3, [pc, #392]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001876:	2b08      	cmp	r3, #8
 8001878:	d11c      	bne.n	80018b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800187a:	4b5f      	ldr	r3, [pc, #380]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d116      	bne.n	80018b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001886:	4b5c      	ldr	r3, [pc, #368]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d005      	beq.n	800189e <HAL_RCC_OscConfig+0x152>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d001      	beq.n	800189e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e1c4      	b.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189e:	4b56      	ldr	r3, [pc, #344]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4952      	ldr	r1, [pc, #328]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b2:	e03a      	b.n	800192a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d020      	beq.n	80018fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <HAL_RCC_OscConfig+0x2b0>)
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c2:	f7ff fc87 	bl	80011d4 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ca:	f7ff fc83 	bl	80011d4 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e1a5      	b.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018dc:	4b46      	ldr	r3, [pc, #280]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e8:	4b43      	ldr	r3, [pc, #268]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4940      	ldr	r1, [pc, #256]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	600b      	str	r3, [r1, #0]
 80018fc:	e015      	b.n	800192a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018fe:	4b3f      	ldr	r3, [pc, #252]	; (80019fc <HAL_RCC_OscConfig+0x2b0>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff fc66 	bl	80011d4 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800190c:	f7ff fc62 	bl	80011d4 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e184      	b.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191e:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d030      	beq.n	8001998 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d016      	beq.n	800196c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800193e:	4b30      	ldr	r3, [pc, #192]	; (8001a00 <HAL_RCC_OscConfig+0x2b4>)
 8001940:	2201      	movs	r2, #1
 8001942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff fc46 	bl	80011d4 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800194c:	f7ff fc42 	bl	80011d4 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e164      	b.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195e:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 8001960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x200>
 800196a:	e015      	b.n	8001998 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800196c:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <HAL_RCC_OscConfig+0x2b4>)
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001972:	f7ff fc2f 	bl	80011d4 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800197a:	f7ff fc2b 	bl	80011d4 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e14d      	b.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800198c:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 800198e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1f0      	bne.n	800197a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 80a0 	beq.w	8001ae6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10f      	bne.n	80019d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	4a0e      	ldr	r2, [pc, #56]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c4:	6413      	str	r3, [r2, #64]	; 0x40
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <HAL_RCC_OscConfig+0x2ac>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d2:	2301      	movs	r3, #1
 80019d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_RCC_OscConfig+0x2b8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d121      	bne.n	8001a26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <HAL_RCC_OscConfig+0x2b8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a07      	ldr	r2, [pc, #28]	; (8001a04 <HAL_RCC_OscConfig+0x2b8>)
 80019e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ee:	f7ff fbf1 	bl	80011d4 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f4:	e011      	b.n	8001a1a <HAL_RCC_OscConfig+0x2ce>
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800
 80019fc:	42470000 	.word	0x42470000
 8001a00:	42470e80 	.word	0x42470e80
 8001a04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a08:	f7ff fbe4 	bl	80011d4 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e106      	b.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1a:	4b85      	ldr	r3, [pc, #532]	; (8001c30 <HAL_RCC_OscConfig+0x4e4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d106      	bne.n	8001a3c <HAL_RCC_OscConfig+0x2f0>
 8001a2e:	4b81      	ldr	r3, [pc, #516]	; (8001c34 <HAL_RCC_OscConfig+0x4e8>)
 8001a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a32:	4a80      	ldr	r2, [pc, #512]	; (8001c34 <HAL_RCC_OscConfig+0x4e8>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6713      	str	r3, [r2, #112]	; 0x70
 8001a3a:	e01c      	b.n	8001a76 <HAL_RCC_OscConfig+0x32a>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b05      	cmp	r3, #5
 8001a42:	d10c      	bne.n	8001a5e <HAL_RCC_OscConfig+0x312>
 8001a44:	4b7b      	ldr	r3, [pc, #492]	; (8001c34 <HAL_RCC_OscConfig+0x4e8>)
 8001a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a48:	4a7a      	ldr	r2, [pc, #488]	; (8001c34 <HAL_RCC_OscConfig+0x4e8>)
 8001a4a:	f043 0304 	orr.w	r3, r3, #4
 8001a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a50:	4b78      	ldr	r3, [pc, #480]	; (8001c34 <HAL_RCC_OscConfig+0x4e8>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a54:	4a77      	ldr	r2, [pc, #476]	; (8001c34 <HAL_RCC_OscConfig+0x4e8>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5c:	e00b      	b.n	8001a76 <HAL_RCC_OscConfig+0x32a>
 8001a5e:	4b75      	ldr	r3, [pc, #468]	; (8001c34 <HAL_RCC_OscConfig+0x4e8>)
 8001a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a62:	4a74      	ldr	r2, [pc, #464]	; (8001c34 <HAL_RCC_OscConfig+0x4e8>)
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	6713      	str	r3, [r2, #112]	; 0x70
 8001a6a:	4b72      	ldr	r3, [pc, #456]	; (8001c34 <HAL_RCC_OscConfig+0x4e8>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6e:	4a71      	ldr	r2, [pc, #452]	; (8001c34 <HAL_RCC_OscConfig+0x4e8>)
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d015      	beq.n	8001aaa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7e:	f7ff fba9 	bl	80011d4 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a84:	e00a      	b.n	8001a9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a86:	f7ff fba5 	bl	80011d4 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e0c5      	b.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9c:	4b65      	ldr	r3, [pc, #404]	; (8001c34 <HAL_RCC_OscConfig+0x4e8>)
 8001a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0ee      	beq.n	8001a86 <HAL_RCC_OscConfig+0x33a>
 8001aa8:	e014      	b.n	8001ad4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aaa:	f7ff fb93 	bl	80011d4 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab0:	e00a      	b.n	8001ac8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ab2:	f7ff fb8f 	bl	80011d4 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e0af      	b.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac8:	4b5a      	ldr	r3, [pc, #360]	; (8001c34 <HAL_RCC_OscConfig+0x4e8>)
 8001aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1ee      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ad4:	7dfb      	ldrb	r3, [r7, #23]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d105      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ada:	4b56      	ldr	r3, [pc, #344]	; (8001c34 <HAL_RCC_OscConfig+0x4e8>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	4a55      	ldr	r2, [pc, #340]	; (8001c34 <HAL_RCC_OscConfig+0x4e8>)
 8001ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 809b 	beq.w	8001c26 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001af0:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <HAL_RCC_OscConfig+0x4e8>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d05c      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d141      	bne.n	8001b88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b04:	4b4c      	ldr	r3, [pc, #304]	; (8001c38 <HAL_RCC_OscConfig+0x4ec>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0a:	f7ff fb63 	bl	80011d4 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b12:	f7ff fb5f 	bl	80011d4 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e081      	b.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b24:	4b43      	ldr	r3, [pc, #268]	; (8001c34 <HAL_RCC_OscConfig+0x4e8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f0      	bne.n	8001b12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69da      	ldr	r2, [r3, #28]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	019b      	lsls	r3, r3, #6
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b46:	085b      	lsrs	r3, r3, #1
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	041b      	lsls	r3, r3, #16
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b52:	061b      	lsls	r3, r3, #24
 8001b54:	4937      	ldr	r1, [pc, #220]	; (8001c34 <HAL_RCC_OscConfig+0x4e8>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b5a:	4b37      	ldr	r3, [pc, #220]	; (8001c38 <HAL_RCC_OscConfig+0x4ec>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff fb38 	bl	80011d4 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b68:	f7ff fb34 	bl	80011d4 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e056      	b.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7a:	4b2e      	ldr	r3, [pc, #184]	; (8001c34 <HAL_RCC_OscConfig+0x4e8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x41c>
 8001b86:	e04e      	b.n	8001c26 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b88:	4b2b      	ldr	r3, [pc, #172]	; (8001c38 <HAL_RCC_OscConfig+0x4ec>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8e:	f7ff fb21 	bl	80011d4 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b96:	f7ff fb1d 	bl	80011d4 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e03f      	b.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba8:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <HAL_RCC_OscConfig+0x4e8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1f0      	bne.n	8001b96 <HAL_RCC_OscConfig+0x44a>
 8001bb4:	e037      	b.n	8001c26 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d101      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e032      	b.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <HAL_RCC_OscConfig+0x4e8>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d028      	beq.n	8001c22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d121      	bne.n	8001c22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d11a      	bne.n	8001c22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bf8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d111      	bne.n	8001c22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c08:	085b      	lsrs	r3, r3, #1
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d107      	bne.n	8001c22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d001      	beq.n	8001c26 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40007000 	.word	0x40007000
 8001c34:	40023800 	.word	0x40023800
 8001c38:	42470060 	.word	0x42470060

08001c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0cc      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c50:	4b68      	ldr	r3, [pc, #416]	; (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d90c      	bls.n	8001c78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5e:	4b65      	ldr	r3, [pc, #404]	; (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c66:	4b63      	ldr	r3, [pc, #396]	; (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d001      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e0b8      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d020      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c90:	4b59      	ldr	r3, [pc, #356]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	4a58      	ldr	r2, [pc, #352]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ca8:	4b53      	ldr	r3, [pc, #332]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	4a52      	ldr	r2, [pc, #328]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb4:	4b50      	ldr	r3, [pc, #320]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	494d      	ldr	r1, [pc, #308]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d044      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d107      	bne.n	8001cea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d119      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e07f      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d003      	beq.n	8001cfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d107      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfa:	4b3f      	ldr	r3, [pc, #252]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e06f      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0a:	4b3b      	ldr	r3, [pc, #236]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e067      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d1a:	4b37      	ldr	r3, [pc, #220]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f023 0203 	bic.w	r2, r3, #3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	4934      	ldr	r1, [pc, #208]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d2c:	f7ff fa52 	bl	80011d4 <HAL_GetTick>
 8001d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d34:	f7ff fa4e 	bl	80011d4 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e04f      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 020c 	and.w	r2, r3, #12
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d1eb      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d5c:	4b25      	ldr	r3, [pc, #148]	; (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d20c      	bcs.n	8001d84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6a:	4b22      	ldr	r3, [pc, #136]	; (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e032      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d90:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4916      	ldr	r1, [pc, #88]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d009      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	490e      	ldr	r1, [pc, #56]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dc2:	f000 f821 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	490a      	ldr	r1, [pc, #40]	; (8001dfc <HAL_RCC_ClockConfig+0x1c0>)
 8001dd4:	5ccb      	ldrb	r3, [r1, r3]
 8001dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dda:	4a09      	ldr	r2, [pc, #36]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff f9b2 	bl	800114c <HAL_InitTick>

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023c00 	.word	0x40023c00
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	08003a40 	.word	0x08003a40
 8001e00:	200000b8 	.word	0x200000b8
 8001e04:	200000bc 	.word	0x200000bc

08001e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e0c:	b084      	sub	sp, #16
 8001e0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	2300      	movs	r3, #0
 8001e1a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e20:	4b67      	ldr	r3, [pc, #412]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d00d      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x40>
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	f200 80bd 	bhi.w	8001fac <HAL_RCC_GetSysClockFreq+0x1a4>
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d002      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0x34>
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d003      	beq.n	8001e42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e3a:	e0b7      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e3c:	4b61      	ldr	r3, [pc, #388]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001e3e:	60bb      	str	r3, [r7, #8]
       break;
 8001e40:	e0b7      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e42:	4b61      	ldr	r3, [pc, #388]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001e44:	60bb      	str	r3, [r7, #8]
      break;
 8001e46:	e0b4      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e48:	4b5d      	ldr	r3, [pc, #372]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e52:	4b5b      	ldr	r3, [pc, #364]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d04d      	beq.n	8001efa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e5e:	4b58      	ldr	r3, [pc, #352]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	099b      	lsrs	r3, r3, #6
 8001e64:	461a      	mov	r2, r3
 8001e66:	f04f 0300 	mov.w	r3, #0
 8001e6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e6e:	f04f 0100 	mov.w	r1, #0
 8001e72:	ea02 0800 	and.w	r8, r2, r0
 8001e76:	ea03 0901 	and.w	r9, r3, r1
 8001e7a:	4640      	mov	r0, r8
 8001e7c:	4649      	mov	r1, r9
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	014b      	lsls	r3, r1, #5
 8001e88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e8c:	0142      	lsls	r2, r0, #5
 8001e8e:	4610      	mov	r0, r2
 8001e90:	4619      	mov	r1, r3
 8001e92:	ebb0 0008 	subs.w	r0, r0, r8
 8001e96:	eb61 0109 	sbc.w	r1, r1, r9
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	018b      	lsls	r3, r1, #6
 8001ea4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ea8:	0182      	lsls	r2, r0, #6
 8001eaa:	1a12      	subs	r2, r2, r0
 8001eac:	eb63 0301 	sbc.w	r3, r3, r1
 8001eb0:	f04f 0000 	mov.w	r0, #0
 8001eb4:	f04f 0100 	mov.w	r1, #0
 8001eb8:	00d9      	lsls	r1, r3, #3
 8001eba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ebe:	00d0      	lsls	r0, r2, #3
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	eb12 0208 	adds.w	r2, r2, r8
 8001ec8:	eb43 0309 	adc.w	r3, r3, r9
 8001ecc:	f04f 0000 	mov.w	r0, #0
 8001ed0:	f04f 0100 	mov.w	r1, #0
 8001ed4:	0259      	lsls	r1, r3, #9
 8001ed6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001eda:	0250      	lsls	r0, r2, #9
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	f04f 0300 	mov.w	r3, #0
 8001eec:	f7fe f974 	bl	80001d8 <__aeabi_uldivmod>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	e04a      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001efa:	4b31      	ldr	r3, [pc, #196]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	099b      	lsrs	r3, r3, #6
 8001f00:	461a      	mov	r2, r3
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f0a:	f04f 0100 	mov.w	r1, #0
 8001f0e:	ea02 0400 	and.w	r4, r2, r0
 8001f12:	ea03 0501 	and.w	r5, r3, r1
 8001f16:	4620      	mov	r0, r4
 8001f18:	4629      	mov	r1, r5
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	014b      	lsls	r3, r1, #5
 8001f24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f28:	0142      	lsls	r2, r0, #5
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	1b00      	subs	r0, r0, r4
 8001f30:	eb61 0105 	sbc.w	r1, r1, r5
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	018b      	lsls	r3, r1, #6
 8001f3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f42:	0182      	lsls	r2, r0, #6
 8001f44:	1a12      	subs	r2, r2, r0
 8001f46:	eb63 0301 	sbc.w	r3, r3, r1
 8001f4a:	f04f 0000 	mov.w	r0, #0
 8001f4e:	f04f 0100 	mov.w	r1, #0
 8001f52:	00d9      	lsls	r1, r3, #3
 8001f54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f58:	00d0      	lsls	r0, r2, #3
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	1912      	adds	r2, r2, r4
 8001f60:	eb45 0303 	adc.w	r3, r5, r3
 8001f64:	f04f 0000 	mov.w	r0, #0
 8001f68:	f04f 0100 	mov.w	r1, #0
 8001f6c:	0299      	lsls	r1, r3, #10
 8001f6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f72:	0290      	lsls	r0, r2, #10
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	f7fe f928 	bl	80001d8 <__aeabi_uldivmod>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	0c1b      	lsrs	r3, r3, #16
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa8:	60bb      	str	r3, [r7, #8]
      break;
 8001faa:	e002      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001fae:	60bb      	str	r3, [r7, #8]
      break;
 8001fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb2:	68bb      	ldr	r3, [r7, #8]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	00f42400 	.word	0x00f42400
 8001fc8:	007a1200 	.word	0x007a1200

08001fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	200000b8 	.word	0x200000b8

08001fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fe8:	f7ff fff0 	bl	8001fcc <HAL_RCC_GetHCLKFreq>
 8001fec:	4602      	mov	r2, r0
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	0a9b      	lsrs	r3, r3, #10
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	4903      	ldr	r1, [pc, #12]	; (8002008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ffa:	5ccb      	ldrb	r3, [r1, r3]
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002000:	4618      	mov	r0, r3
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40023800 	.word	0x40023800
 8002008:	08003a50 	.word	0x08003a50

0800200c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002010:	f7ff ffdc 	bl	8001fcc <HAL_RCC_GetHCLKFreq>
 8002014:	4602      	mov	r2, r0
 8002016:	4b05      	ldr	r3, [pc, #20]	; (800202c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	0b5b      	lsrs	r3, r3, #13
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	4903      	ldr	r1, [pc, #12]	; (8002030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002022:	5ccb      	ldrb	r3, [r1, r3]
 8002024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002028:	4618      	mov	r0, r3
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800
 8002030:	08003a50 	.word	0x08003a50

08002034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e041      	b.n	80020ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d106      	bne.n	8002060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7fe ff36 	bl	8000ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3304      	adds	r3, #4
 8002070:	4619      	mov	r1, r3
 8002072:	4610      	mov	r0, r2
 8002074:	f000 fcb6 	bl	80029e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d001      	beq.n	80020ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e044      	b.n	8002176 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0201 	orr.w	r2, r2, #1
 8002102:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a1e      	ldr	r2, [pc, #120]	; (8002184 <HAL_TIM_Base_Start_IT+0xb0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d018      	beq.n	8002140 <HAL_TIM_Base_Start_IT+0x6c>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002116:	d013      	beq.n	8002140 <HAL_TIM_Base_Start_IT+0x6c>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a1a      	ldr	r2, [pc, #104]	; (8002188 <HAL_TIM_Base_Start_IT+0xb4>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00e      	beq.n	8002140 <HAL_TIM_Base_Start_IT+0x6c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a19      	ldr	r2, [pc, #100]	; (800218c <HAL_TIM_Base_Start_IT+0xb8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d009      	beq.n	8002140 <HAL_TIM_Base_Start_IT+0x6c>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a17      	ldr	r2, [pc, #92]	; (8002190 <HAL_TIM_Base_Start_IT+0xbc>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d004      	beq.n	8002140 <HAL_TIM_Base_Start_IT+0x6c>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a16      	ldr	r2, [pc, #88]	; (8002194 <HAL_TIM_Base_Start_IT+0xc0>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d111      	bne.n	8002164 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b06      	cmp	r3, #6
 8002150:	d010      	beq.n	8002174 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f042 0201 	orr.w	r2, r2, #1
 8002160:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002162:	e007      	b.n	8002174 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0201 	orr.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40010000 	.word	0x40010000
 8002188:	40000400 	.word	0x40000400
 800218c:	40000800 	.word	0x40000800
 8002190:	40000c00 	.word	0x40000c00
 8002194:	40014000 	.word	0x40014000

08002198 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e041      	b.n	800222e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe fe16 	bl	8000df0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3304      	adds	r3, #4
 80021d4:	4619      	mov	r1, r3
 80021d6:	4610      	mov	r0, r2
 80021d8:	f000 fc04 	bl	80029e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d109      	bne.n	800225c <HAL_TIM_PWM_Start+0x24>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b01      	cmp	r3, #1
 8002252:	bf14      	ite	ne
 8002254:	2301      	movne	r3, #1
 8002256:	2300      	moveq	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	e022      	b.n	80022a2 <HAL_TIM_PWM_Start+0x6a>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	2b04      	cmp	r3, #4
 8002260:	d109      	bne.n	8002276 <HAL_TIM_PWM_Start+0x3e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b01      	cmp	r3, #1
 800226c:	bf14      	ite	ne
 800226e:	2301      	movne	r3, #1
 8002270:	2300      	moveq	r3, #0
 8002272:	b2db      	uxtb	r3, r3
 8002274:	e015      	b.n	80022a2 <HAL_TIM_PWM_Start+0x6a>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2b08      	cmp	r3, #8
 800227a:	d109      	bne.n	8002290 <HAL_TIM_PWM_Start+0x58>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b01      	cmp	r3, #1
 8002286:	bf14      	ite	ne
 8002288:	2301      	movne	r3, #1
 800228a:	2300      	moveq	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	e008      	b.n	80022a2 <HAL_TIM_PWM_Start+0x6a>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b01      	cmp	r3, #1
 800229a:	bf14      	ite	ne
 800229c:	2301      	movne	r3, #1
 800229e:	2300      	moveq	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e068      	b.n	800237c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d104      	bne.n	80022ba <HAL_TIM_PWM_Start+0x82>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2202      	movs	r2, #2
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022b8:	e013      	b.n	80022e2 <HAL_TIM_PWM_Start+0xaa>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d104      	bne.n	80022ca <HAL_TIM_PWM_Start+0x92>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022c8:	e00b      	b.n	80022e2 <HAL_TIM_PWM_Start+0xaa>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d104      	bne.n	80022da <HAL_TIM_PWM_Start+0xa2>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2202      	movs	r2, #2
 80022d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022d8:	e003      	b.n	80022e2 <HAL_TIM_PWM_Start+0xaa>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2202      	movs	r2, #2
 80022de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2201      	movs	r2, #1
 80022e8:	6839      	ldr	r1, [r7, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 fd86 	bl	8002dfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a23      	ldr	r2, [pc, #140]	; (8002384 <HAL_TIM_PWM_Start+0x14c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d107      	bne.n	800230a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002308:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a1d      	ldr	r2, [pc, #116]	; (8002384 <HAL_TIM_PWM_Start+0x14c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d018      	beq.n	8002346 <HAL_TIM_PWM_Start+0x10e>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231c:	d013      	beq.n	8002346 <HAL_TIM_PWM_Start+0x10e>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a19      	ldr	r2, [pc, #100]	; (8002388 <HAL_TIM_PWM_Start+0x150>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d00e      	beq.n	8002346 <HAL_TIM_PWM_Start+0x10e>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a17      	ldr	r2, [pc, #92]	; (800238c <HAL_TIM_PWM_Start+0x154>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d009      	beq.n	8002346 <HAL_TIM_PWM_Start+0x10e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a16      	ldr	r2, [pc, #88]	; (8002390 <HAL_TIM_PWM_Start+0x158>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d004      	beq.n	8002346 <HAL_TIM_PWM_Start+0x10e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a14      	ldr	r2, [pc, #80]	; (8002394 <HAL_TIM_PWM_Start+0x15c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d111      	bne.n	800236a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b06      	cmp	r3, #6
 8002356:	d010      	beq.n	800237a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002368:	e007      	b.n	800237a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f042 0201 	orr.w	r2, r2, #1
 8002378:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40010000 	.word	0x40010000
 8002388:	40000400 	.word	0x40000400
 800238c:	40000800 	.word	0x40000800
 8002390:	40000c00 	.word	0x40000c00
 8002394:	40014000 	.word	0x40014000

08002398 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e097      	b.n	80024dc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d106      	bne.n	80023c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7fe fd3d 	bl	8000e40 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2202      	movs	r2, #2
 80023ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023dc:	f023 0307 	bic.w	r3, r3, #7
 80023e0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3304      	adds	r3, #4
 80023ea:	4619      	mov	r1, r3
 80023ec:	4610      	mov	r0, r2
 80023ee:	f000 faf9 	bl	80029e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4313      	orrs	r3, r2
 8002412:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800241a:	f023 0303 	bic.w	r3, r3, #3
 800241e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	4313      	orrs	r3, r2
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002438:	f023 030c 	bic.w	r3, r3, #12
 800243c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002444:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002448:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	021b      	lsls	r3, r3, #8
 8002454:	4313      	orrs	r3, r2
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	011a      	lsls	r2, r3, #4
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	031b      	lsls	r3, r3, #12
 8002468:	4313      	orrs	r3, r2
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002476:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800247e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	4313      	orrs	r3, r2
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80024fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002504:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800250c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d110      	bne.n	8002536 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d102      	bne.n	8002520 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800251a:	7b7b      	ldrb	r3, [r7, #13]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d001      	beq.n	8002524 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e069      	b.n	80025f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002534:	e031      	b.n	800259a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b04      	cmp	r3, #4
 800253a:	d110      	bne.n	800255e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800253c:	7bbb      	ldrb	r3, [r7, #14]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d102      	bne.n	8002548 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002542:	7b3b      	ldrb	r3, [r7, #12]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d001      	beq.n	800254c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e055      	b.n	80025f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800255c:	e01d      	b.n	800259a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d108      	bne.n	8002576 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002564:	7bbb      	ldrb	r3, [r7, #14]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d105      	bne.n	8002576 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800256a:	7b7b      	ldrb	r3, [r7, #13]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d102      	bne.n	8002576 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002570:	7b3b      	ldrb	r3, [r7, #12]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d001      	beq.n	800257a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e03e      	b.n	80025f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2202      	movs	r2, #2
 800257e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2202      	movs	r2, #2
 8002586:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2202      	movs	r2, #2
 800258e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2202      	movs	r2, #2
 8002596:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_TIM_Encoder_Start+0xc4>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d008      	beq.n	80025b8 <HAL_TIM_Encoder_Start+0xd4>
 80025a6:	e00f      	b.n	80025c8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2201      	movs	r2, #1
 80025ae:	2100      	movs	r1, #0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 fc23 	bl	8002dfc <TIM_CCxChannelCmd>
      break;
 80025b6:	e016      	b.n	80025e6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2201      	movs	r2, #1
 80025be:	2104      	movs	r1, #4
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 fc1b 	bl	8002dfc <TIM_CCxChannelCmd>
      break;
 80025c6:	e00e      	b.n	80025e6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2201      	movs	r2, #1
 80025ce:	2100      	movs	r1, #0
 80025d0:	4618      	mov	r0, r3
 80025d2:	f000 fc13 	bl	8002dfc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2201      	movs	r2, #1
 80025dc:	2104      	movs	r1, #4
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fc0c 	bl	8002dfc <TIM_CCxChannelCmd>
      break;
 80025e4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f042 0201 	orr.w	r2, r2, #1
 80025f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b02      	cmp	r3, #2
 8002614:	d122      	bne.n	800265c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b02      	cmp	r3, #2
 8002622:	d11b      	bne.n	800265c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0202 	mvn.w	r2, #2
 800262c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f9b0 	bl	80029a8 <HAL_TIM_IC_CaptureCallback>
 8002648:	e005      	b.n	8002656 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f9a2 	bl	8002994 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f9b3 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b04      	cmp	r3, #4
 8002668:	d122      	bne.n	80026b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b04      	cmp	r3, #4
 8002676:	d11b      	bne.n	80026b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0204 	mvn.w	r2, #4
 8002680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2202      	movs	r2, #2
 8002686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f986 	bl	80029a8 <HAL_TIM_IC_CaptureCallback>
 800269c:	e005      	b.n	80026aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f978 	bl	8002994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f989 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d122      	bne.n	8002704 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d11b      	bne.n	8002704 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0208 	mvn.w	r2, #8
 80026d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2204      	movs	r2, #4
 80026da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f95c 	bl	80029a8 <HAL_TIM_IC_CaptureCallback>
 80026f0:	e005      	b.n	80026fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f94e 	bl	8002994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f95f 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b10      	cmp	r3, #16
 8002710:	d122      	bne.n	8002758 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2b10      	cmp	r3, #16
 800271e:	d11b      	bne.n	8002758 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0210 	mvn.w	r2, #16
 8002728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2208      	movs	r2, #8
 800272e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f932 	bl	80029a8 <HAL_TIM_IC_CaptureCallback>
 8002744:	e005      	b.n	8002752 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f924 	bl	8002994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f935 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b01      	cmp	r3, #1
 8002764:	d10e      	bne.n	8002784 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b01      	cmp	r3, #1
 8002772:	d107      	bne.n	8002784 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0201 	mvn.w	r2, #1
 800277c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe fad2 	bl	8000d28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278e:	2b80      	cmp	r3, #128	; 0x80
 8002790:	d10e      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279c:	2b80      	cmp	r3, #128	; 0x80
 800279e:	d107      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fc16 	bl	8002fdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ba:	2b40      	cmp	r3, #64	; 0x40
 80027bc:	d10e      	bne.n	80027dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c8:	2b40      	cmp	r3, #64	; 0x40
 80027ca:	d107      	bne.n	80027dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f8fa 	bl	80029d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0320 	and.w	r3, r3, #32
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d10e      	bne.n	8002808 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d107      	bne.n	8002808 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0220 	mvn.w	r2, #32
 8002800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fbe0 	bl	8002fc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800282a:	2302      	movs	r3, #2
 800282c:	e0ae      	b.n	800298c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b0c      	cmp	r3, #12
 800283a:	f200 809f 	bhi.w	800297c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800283e:	a201      	add	r2, pc, #4	; (adr r2, 8002844 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002844:	08002879 	.word	0x08002879
 8002848:	0800297d 	.word	0x0800297d
 800284c:	0800297d 	.word	0x0800297d
 8002850:	0800297d 	.word	0x0800297d
 8002854:	080028b9 	.word	0x080028b9
 8002858:	0800297d 	.word	0x0800297d
 800285c:	0800297d 	.word	0x0800297d
 8002860:	0800297d 	.word	0x0800297d
 8002864:	080028fb 	.word	0x080028fb
 8002868:	0800297d 	.word	0x0800297d
 800286c:	0800297d 	.word	0x0800297d
 8002870:	0800297d 	.word	0x0800297d
 8002874:	0800293b 	.word	0x0800293b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	4618      	mov	r0, r3
 8002880:	f000 f930 	bl	8002ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699a      	ldr	r2, [r3, #24]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0208 	orr.w	r2, r2, #8
 8002892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699a      	ldr	r2, [r3, #24]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0204 	bic.w	r2, r2, #4
 80028a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6999      	ldr	r1, [r3, #24]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	691a      	ldr	r2, [r3, #16]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	619a      	str	r2, [r3, #24]
      break;
 80028b6:	e064      	b.n	8002982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 f976 	bl	8002bb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6999      	ldr	r1, [r3, #24]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	021a      	lsls	r2, r3, #8
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	619a      	str	r2, [r3, #24]
      break;
 80028f8:	e043      	b.n	8002982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	4618      	mov	r0, r3
 8002902:	f000 f9c1 	bl	8002c88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	69da      	ldr	r2, [r3, #28]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f042 0208 	orr.w	r2, r2, #8
 8002914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	69da      	ldr	r2, [r3, #28]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0204 	bic.w	r2, r2, #4
 8002924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	69d9      	ldr	r1, [r3, #28]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	61da      	str	r2, [r3, #28]
      break;
 8002938:	e023      	b.n	8002982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	4618      	mov	r0, r3
 8002942:	f000 fa0b 	bl	8002d5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	69da      	ldr	r2, [r3, #28]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	69da      	ldr	r2, [r3, #28]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69d9      	ldr	r1, [r3, #28]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	021a      	lsls	r2, r3, #8
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	61da      	str	r2, [r3, #28]
      break;
 800297a:	e002      	b.n	8002982 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	75fb      	strb	r3, [r7, #23]
      break;
 8002980:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800298a:	7dfb      	ldrb	r3, [r7, #23]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a34      	ldr	r2, [pc, #208]	; (8002ac8 <TIM_Base_SetConfig+0xe4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d00f      	beq.n	8002a1c <TIM_Base_SetConfig+0x38>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a02:	d00b      	beq.n	8002a1c <TIM_Base_SetConfig+0x38>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a31      	ldr	r2, [pc, #196]	; (8002acc <TIM_Base_SetConfig+0xe8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d007      	beq.n	8002a1c <TIM_Base_SetConfig+0x38>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a30      	ldr	r2, [pc, #192]	; (8002ad0 <TIM_Base_SetConfig+0xec>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d003      	beq.n	8002a1c <TIM_Base_SetConfig+0x38>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a2f      	ldr	r2, [pc, #188]	; (8002ad4 <TIM_Base_SetConfig+0xf0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d108      	bne.n	8002a2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a25      	ldr	r2, [pc, #148]	; (8002ac8 <TIM_Base_SetConfig+0xe4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d01b      	beq.n	8002a6e <TIM_Base_SetConfig+0x8a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3c:	d017      	beq.n	8002a6e <TIM_Base_SetConfig+0x8a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a22      	ldr	r2, [pc, #136]	; (8002acc <TIM_Base_SetConfig+0xe8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <TIM_Base_SetConfig+0x8a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a21      	ldr	r2, [pc, #132]	; (8002ad0 <TIM_Base_SetConfig+0xec>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00f      	beq.n	8002a6e <TIM_Base_SetConfig+0x8a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a20      	ldr	r2, [pc, #128]	; (8002ad4 <TIM_Base_SetConfig+0xf0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00b      	beq.n	8002a6e <TIM_Base_SetConfig+0x8a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a1f      	ldr	r2, [pc, #124]	; (8002ad8 <TIM_Base_SetConfig+0xf4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d007      	beq.n	8002a6e <TIM_Base_SetConfig+0x8a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a1e      	ldr	r2, [pc, #120]	; (8002adc <TIM_Base_SetConfig+0xf8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d003      	beq.n	8002a6e <TIM_Base_SetConfig+0x8a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a1d      	ldr	r2, [pc, #116]	; (8002ae0 <TIM_Base_SetConfig+0xfc>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d108      	bne.n	8002a80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a08      	ldr	r2, [pc, #32]	; (8002ac8 <TIM_Base_SetConfig+0xe4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d103      	bne.n	8002ab4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	615a      	str	r2, [r3, #20]
}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40010000 	.word	0x40010000
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40000800 	.word	0x40000800
 8002ad4:	40000c00 	.word	0x40000c00
 8002ad8:	40014000 	.word	0x40014000
 8002adc:	40014400 	.word	0x40014400
 8002ae0:	40014800 	.word	0x40014800

08002ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	f023 0201 	bic.w	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0303 	bic.w	r3, r3, #3
 8002b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f023 0302 	bic.w	r3, r3, #2
 8002b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a1c      	ldr	r2, [pc, #112]	; (8002bac <TIM_OC1_SetConfig+0xc8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d10c      	bne.n	8002b5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f023 0308 	bic.w	r3, r3, #8
 8002b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f023 0304 	bic.w	r3, r3, #4
 8002b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a13      	ldr	r2, [pc, #76]	; (8002bac <TIM_OC1_SetConfig+0xc8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d111      	bne.n	8002b86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	621a      	str	r2, [r3, #32]
}
 8002ba0:	bf00      	nop
 8002ba2:	371c      	adds	r7, #28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	40010000 	.word	0x40010000

08002bb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f023 0210 	bic.w	r2, r3, #16
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f023 0320 	bic.w	r3, r3, #32
 8002bfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a1e      	ldr	r2, [pc, #120]	; (8002c84 <TIM_OC2_SetConfig+0xd4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d10d      	bne.n	8002c2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a15      	ldr	r2, [pc, #84]	; (8002c84 <TIM_OC2_SetConfig+0xd4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d113      	bne.n	8002c5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	621a      	str	r2, [r3, #32]
}
 8002c76:	bf00      	nop
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40010000 	.word	0x40010000

08002c88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 0303 	bic.w	r3, r3, #3
 8002cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a1d      	ldr	r2, [pc, #116]	; (8002d58 <TIM_OC3_SetConfig+0xd0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d10d      	bne.n	8002d02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	021b      	lsls	r3, r3, #8
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <TIM_OC3_SetConfig+0xd0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d113      	bne.n	8002d32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	621a      	str	r2, [r3, #32]
}
 8002d4c:	bf00      	nop
 8002d4e:	371c      	adds	r7, #28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	40010000 	.word	0x40010000

08002d5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	021b      	lsls	r3, r3, #8
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002da6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	031b      	lsls	r3, r3, #12
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a10      	ldr	r2, [pc, #64]	; (8002df8 <TIM_OC4_SetConfig+0x9c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d109      	bne.n	8002dd0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	019b      	lsls	r3, r3, #6
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	621a      	str	r2, [r3, #32]
}
 8002dea:	bf00      	nop
 8002dec:	371c      	adds	r7, #28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40010000 	.word	0x40010000

08002dfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f003 031f 	and.w	r3, r3, #31
 8002e0e:	2201      	movs	r2, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a1a      	ldr	r2, [r3, #32]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	401a      	ands	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a1a      	ldr	r2, [r3, #32]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	fa01 f303 	lsl.w	r3, r1, r3
 8002e34:	431a      	orrs	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	621a      	str	r2, [r3, #32]
}
 8002e3a:	bf00      	nop
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e050      	b.n	8002f02 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1c      	ldr	r2, [pc, #112]	; (8002f10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d018      	beq.n	8002ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eac:	d013      	beq.n	8002ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a18      	ldr	r2, [pc, #96]	; (8002f14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00e      	beq.n	8002ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a16      	ldr	r2, [pc, #88]	; (8002f18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d009      	beq.n	8002ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a15      	ldr	r2, [pc, #84]	; (8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d004      	beq.n	8002ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a13      	ldr	r2, [pc, #76]	; (8002f20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002edc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40010000 	.word	0x40010000
 8002f14:	40000400 	.word	0x40000400
 8002f18:	40000800 	.word	0x40000800
 8002f1c:	40000c00 	.word	0x40000c00
 8002f20:	40014000 	.word	0x40014000

08002f24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e03d      	b.n	8002fbc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e03f      	b.n	8003082 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fd ffba 	bl	8000f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2224      	movs	r2, #36	; 0x24
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003032:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f829 	bl	800308c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003048:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695a      	ldr	r2, [r3, #20]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003058:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003068:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800308c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003090:	b09f      	sub	sp, #124	; 0x7c
 8003092:	af00      	add	r7, sp, #0
 8003094:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a2:	68d9      	ldr	r1, [r3, #12]
 80030a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	ea40 0301 	orr.w	r3, r0, r1
 80030ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	431a      	orrs	r2, r3
 80030be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80030c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030d0:	f021 010c 	bic.w	r1, r1, #12
 80030d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030da:	430b      	orrs	r3, r1
 80030dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ea:	6999      	ldr	r1, [r3, #24]
 80030ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	ea40 0301 	orr.w	r3, r0, r1
 80030f4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	4bc5      	ldr	r3, [pc, #788]	; (8003410 <UART_SetConfig+0x384>)
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d004      	beq.n	800310a <UART_SetConfig+0x7e>
 8003100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	4bc3      	ldr	r3, [pc, #780]	; (8003414 <UART_SetConfig+0x388>)
 8003106:	429a      	cmp	r2, r3
 8003108:	d103      	bne.n	8003112 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800310a:	f7fe ff7f 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 800310e:	6778      	str	r0, [r7, #116]	; 0x74
 8003110:	e002      	b.n	8003118 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003112:	f7fe ff67 	bl	8001fe4 <HAL_RCC_GetPCLK1Freq>
 8003116:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003120:	f040 80b6 	bne.w	8003290 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003124:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003126:	461c      	mov	r4, r3
 8003128:	f04f 0500 	mov.w	r5, #0
 800312c:	4622      	mov	r2, r4
 800312e:	462b      	mov	r3, r5
 8003130:	1891      	adds	r1, r2, r2
 8003132:	6439      	str	r1, [r7, #64]	; 0x40
 8003134:	415b      	adcs	r3, r3
 8003136:	647b      	str	r3, [r7, #68]	; 0x44
 8003138:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800313c:	1912      	adds	r2, r2, r4
 800313e:	eb45 0303 	adc.w	r3, r5, r3
 8003142:	f04f 0000 	mov.w	r0, #0
 8003146:	f04f 0100 	mov.w	r1, #0
 800314a:	00d9      	lsls	r1, r3, #3
 800314c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003150:	00d0      	lsls	r0, r2, #3
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	1911      	adds	r1, r2, r4
 8003158:	6639      	str	r1, [r7, #96]	; 0x60
 800315a:	416b      	adcs	r3, r5
 800315c:	667b      	str	r3, [r7, #100]	; 0x64
 800315e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	461a      	mov	r2, r3
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	1891      	adds	r1, r2, r2
 800316a:	63b9      	str	r1, [r7, #56]	; 0x38
 800316c:	415b      	adcs	r3, r3
 800316e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003170:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003174:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003178:	f7fd f82e 	bl	80001d8 <__aeabi_uldivmod>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4ba5      	ldr	r3, [pc, #660]	; (8003418 <UART_SetConfig+0x38c>)
 8003182:	fba3 2302 	umull	r2, r3, r3, r2
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	011e      	lsls	r6, r3, #4
 800318a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800318c:	461c      	mov	r4, r3
 800318e:	f04f 0500 	mov.w	r5, #0
 8003192:	4622      	mov	r2, r4
 8003194:	462b      	mov	r3, r5
 8003196:	1891      	adds	r1, r2, r2
 8003198:	6339      	str	r1, [r7, #48]	; 0x30
 800319a:	415b      	adcs	r3, r3
 800319c:	637b      	str	r3, [r7, #52]	; 0x34
 800319e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80031a2:	1912      	adds	r2, r2, r4
 80031a4:	eb45 0303 	adc.w	r3, r5, r3
 80031a8:	f04f 0000 	mov.w	r0, #0
 80031ac:	f04f 0100 	mov.w	r1, #0
 80031b0:	00d9      	lsls	r1, r3, #3
 80031b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031b6:	00d0      	lsls	r0, r2, #3
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	1911      	adds	r1, r2, r4
 80031be:	65b9      	str	r1, [r7, #88]	; 0x58
 80031c0:	416b      	adcs	r3, r5
 80031c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	461a      	mov	r2, r3
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	1891      	adds	r1, r2, r2
 80031d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80031d2:	415b      	adcs	r3, r3
 80031d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80031de:	f7fc fffb 	bl	80001d8 <__aeabi_uldivmod>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4b8c      	ldr	r3, [pc, #560]	; (8003418 <UART_SetConfig+0x38c>)
 80031e8:	fba3 1302 	umull	r1, r3, r3, r2
 80031ec:	095b      	lsrs	r3, r3, #5
 80031ee:	2164      	movs	r1, #100	; 0x64
 80031f0:	fb01 f303 	mul.w	r3, r1, r3
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	3332      	adds	r3, #50	; 0x32
 80031fa:	4a87      	ldr	r2, [pc, #540]	; (8003418 <UART_SetConfig+0x38c>)
 80031fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003200:	095b      	lsrs	r3, r3, #5
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003208:	441e      	add	r6, r3
 800320a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800320c:	4618      	mov	r0, r3
 800320e:	f04f 0100 	mov.w	r1, #0
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	1894      	adds	r4, r2, r2
 8003218:	623c      	str	r4, [r7, #32]
 800321a:	415b      	adcs	r3, r3
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
 800321e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003222:	1812      	adds	r2, r2, r0
 8003224:	eb41 0303 	adc.w	r3, r1, r3
 8003228:	f04f 0400 	mov.w	r4, #0
 800322c:	f04f 0500 	mov.w	r5, #0
 8003230:	00dd      	lsls	r5, r3, #3
 8003232:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003236:	00d4      	lsls	r4, r2, #3
 8003238:	4622      	mov	r2, r4
 800323a:	462b      	mov	r3, r5
 800323c:	1814      	adds	r4, r2, r0
 800323e:	653c      	str	r4, [r7, #80]	; 0x50
 8003240:	414b      	adcs	r3, r1
 8003242:	657b      	str	r3, [r7, #84]	; 0x54
 8003244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	461a      	mov	r2, r3
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	1891      	adds	r1, r2, r2
 8003250:	61b9      	str	r1, [r7, #24]
 8003252:	415b      	adcs	r3, r3
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800325a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800325e:	f7fc ffbb 	bl	80001d8 <__aeabi_uldivmod>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4b6c      	ldr	r3, [pc, #432]	; (8003418 <UART_SetConfig+0x38c>)
 8003268:	fba3 1302 	umull	r1, r3, r3, r2
 800326c:	095b      	lsrs	r3, r3, #5
 800326e:	2164      	movs	r1, #100	; 0x64
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	3332      	adds	r3, #50	; 0x32
 800327a:	4a67      	ldr	r2, [pc, #412]	; (8003418 <UART_SetConfig+0x38c>)
 800327c:	fba2 2303 	umull	r2, r3, r2, r3
 8003280:	095b      	lsrs	r3, r3, #5
 8003282:	f003 0207 	and.w	r2, r3, #7
 8003286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4432      	add	r2, r6
 800328c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800328e:	e0b9      	b.n	8003404 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003290:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003292:	461c      	mov	r4, r3
 8003294:	f04f 0500 	mov.w	r5, #0
 8003298:	4622      	mov	r2, r4
 800329a:	462b      	mov	r3, r5
 800329c:	1891      	adds	r1, r2, r2
 800329e:	6139      	str	r1, [r7, #16]
 80032a0:	415b      	adcs	r3, r3
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80032a8:	1912      	adds	r2, r2, r4
 80032aa:	eb45 0303 	adc.w	r3, r5, r3
 80032ae:	f04f 0000 	mov.w	r0, #0
 80032b2:	f04f 0100 	mov.w	r1, #0
 80032b6:	00d9      	lsls	r1, r3, #3
 80032b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032bc:	00d0      	lsls	r0, r2, #3
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	eb12 0804 	adds.w	r8, r2, r4
 80032c6:	eb43 0905 	adc.w	r9, r3, r5
 80032ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f04f 0100 	mov.w	r1, #0
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	008b      	lsls	r3, r1, #2
 80032de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032e2:	0082      	lsls	r2, r0, #2
 80032e4:	4640      	mov	r0, r8
 80032e6:	4649      	mov	r1, r9
 80032e8:	f7fc ff76 	bl	80001d8 <__aeabi_uldivmod>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4b49      	ldr	r3, [pc, #292]	; (8003418 <UART_SetConfig+0x38c>)
 80032f2:	fba3 2302 	umull	r2, r3, r3, r2
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	011e      	lsls	r6, r3, #4
 80032fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032fc:	4618      	mov	r0, r3
 80032fe:	f04f 0100 	mov.w	r1, #0
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	1894      	adds	r4, r2, r2
 8003308:	60bc      	str	r4, [r7, #8]
 800330a:	415b      	adcs	r3, r3
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003312:	1812      	adds	r2, r2, r0
 8003314:	eb41 0303 	adc.w	r3, r1, r3
 8003318:	f04f 0400 	mov.w	r4, #0
 800331c:	f04f 0500 	mov.w	r5, #0
 8003320:	00dd      	lsls	r5, r3, #3
 8003322:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003326:	00d4      	lsls	r4, r2, #3
 8003328:	4622      	mov	r2, r4
 800332a:	462b      	mov	r3, r5
 800332c:	1814      	adds	r4, r2, r0
 800332e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003330:	414b      	adcs	r3, r1
 8003332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	4618      	mov	r0, r3
 800333a:	f04f 0100 	mov.w	r1, #0
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	008b      	lsls	r3, r1, #2
 8003348:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800334c:	0082      	lsls	r2, r0, #2
 800334e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003352:	f7fc ff41 	bl	80001d8 <__aeabi_uldivmod>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4b2f      	ldr	r3, [pc, #188]	; (8003418 <UART_SetConfig+0x38c>)
 800335c:	fba3 1302 	umull	r1, r3, r3, r2
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	2164      	movs	r1, #100	; 0x64
 8003364:	fb01 f303 	mul.w	r3, r1, r3
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	3332      	adds	r3, #50	; 0x32
 800336e:	4a2a      	ldr	r2, [pc, #168]	; (8003418 <UART_SetConfig+0x38c>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	095b      	lsrs	r3, r3, #5
 8003376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800337a:	441e      	add	r6, r3
 800337c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800337e:	4618      	mov	r0, r3
 8003380:	f04f 0100 	mov.w	r1, #0
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	1894      	adds	r4, r2, r2
 800338a:	603c      	str	r4, [r7, #0]
 800338c:	415b      	adcs	r3, r3
 800338e:	607b      	str	r3, [r7, #4]
 8003390:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003394:	1812      	adds	r2, r2, r0
 8003396:	eb41 0303 	adc.w	r3, r1, r3
 800339a:	f04f 0400 	mov.w	r4, #0
 800339e:	f04f 0500 	mov.w	r5, #0
 80033a2:	00dd      	lsls	r5, r3, #3
 80033a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80033a8:	00d4      	lsls	r4, r2, #3
 80033aa:	4622      	mov	r2, r4
 80033ac:	462b      	mov	r3, r5
 80033ae:	eb12 0a00 	adds.w	sl, r2, r0
 80033b2:	eb43 0b01 	adc.w	fp, r3, r1
 80033b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f04f 0100 	mov.w	r1, #0
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	008b      	lsls	r3, r1, #2
 80033ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80033ce:	0082      	lsls	r2, r0, #2
 80033d0:	4650      	mov	r0, sl
 80033d2:	4659      	mov	r1, fp
 80033d4:	f7fc ff00 	bl	80001d8 <__aeabi_uldivmod>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <UART_SetConfig+0x38c>)
 80033de:	fba3 1302 	umull	r1, r3, r3, r2
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	2164      	movs	r1, #100	; 0x64
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	3332      	adds	r3, #50	; 0x32
 80033f0:	4a09      	ldr	r2, [pc, #36]	; (8003418 <UART_SetConfig+0x38c>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	f003 020f 	and.w	r2, r3, #15
 80033fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4432      	add	r2, r6
 8003402:	609a      	str	r2, [r3, #8]
}
 8003404:	bf00      	nop
 8003406:	377c      	adds	r7, #124	; 0x7c
 8003408:	46bd      	mov	sp, r7
 800340a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800340e:	bf00      	nop
 8003410:	40011000 	.word	0x40011000
 8003414:	40011400 	.word	0x40011400
 8003418:	51eb851f 	.word	0x51eb851f

0800341c <arm_mat_trans_f32>:
 800341c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003420:	8802      	ldrh	r2, [r0, #0]
 8003422:	884b      	ldrh	r3, [r1, #2]
 8003424:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8003428:	684f      	ldr	r7, [r1, #4]
 800342a:	8840      	ldrh	r0, [r0, #2]
 800342c:	4293      	cmp	r3, r2
 800342e:	b083      	sub	sp, #12
 8003430:	d14c      	bne.n	80034cc <arm_mat_trans_f32+0xb0>
 8003432:	f8b1 e000 	ldrh.w	lr, [r1]
 8003436:	4586      	cmp	lr, r0
 8003438:	d148      	bne.n	80034cc <arm_mat_trans_f32+0xb0>
 800343a:	ea4f 089e 	mov.w	r8, lr, lsr #2
 800343e:	009c      	lsls	r4, r3, #2
 8003440:	f00e 0e03 	and.w	lr, lr, #3
 8003444:	fb08 f904 	mul.w	r9, r8, r4
 8003448:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800344c:	011d      	lsls	r5, r3, #4
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8003454:	eb07 0a04 	add.w	sl, r7, r4
 8003458:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 800345c:	9201      	str	r2, [sp, #4]
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	463b      	mov	r3, r7
 8003462:	f1b8 0f00 	cmp.w	r8, #0
 8003466:	d01d      	beq.n	80034a4 <arm_mat_trans_f32+0x88>
 8003468:	9900      	ldr	r1, [sp, #0]
 800346a:	f10c 0210 	add.w	r2, ip, #16
 800346e:	4439      	add	r1, r7
 8003470:	4640      	mov	r0, r8
 8003472:	f852 6c10 	ldr.w	r6, [r2, #-16]
 8003476:	601e      	str	r6, [r3, #0]
 8003478:	ed52 7a03 	vldr	s15, [r2, #-12]
 800347c:	191e      	adds	r6, r3, r4
 800347e:	edc6 7a00 	vstr	s15, [r6]
 8003482:	f852 6c08 	ldr.w	r6, [r2, #-8]
 8003486:	600e      	str	r6, [r1, #0]
 8003488:	ed52 7a01 	vldr	s15, [r2, #-4]
 800348c:	190e      	adds	r6, r1, r4
 800348e:	3801      	subs	r0, #1
 8003490:	442b      	add	r3, r5
 8003492:	f102 0210 	add.w	r2, r2, #16
 8003496:	edc6 7a00 	vstr	s15, [r6]
 800349a:	4429      	add	r1, r5
 800349c:	d1e9      	bne.n	8003472 <arm_mat_trans_f32+0x56>
 800349e:	44dc      	add	ip, fp
 80034a0:	eb09 0307 	add.w	r3, r9, r7
 80034a4:	f1be 0f00 	cmp.w	lr, #0
 80034a8:	d009      	beq.n	80034be <arm_mat_trans_f32+0xa2>
 80034aa:	4672      	mov	r2, lr
 80034ac:	4661      	mov	r1, ip
 80034ae:	f851 0b04 	ldr.w	r0, [r1], #4
 80034b2:	6018      	str	r0, [r3, #0]
 80034b4:	3a01      	subs	r2, #1
 80034b6:	4423      	add	r3, r4
 80034b8:	d1f9      	bne.n	80034ae <arm_mat_trans_f32+0x92>
 80034ba:	9b01      	ldr	r3, [sp, #4]
 80034bc:	449c      	add	ip, r3
 80034be:	3704      	adds	r7, #4
 80034c0:	4557      	cmp	r7, sl
 80034c2:	d1cd      	bne.n	8003460 <arm_mat_trans_f32+0x44>
 80034c4:	2000      	movs	r0, #0
 80034c6:	b003      	add	sp, #12
 80034c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034cc:	f06f 0002 	mvn.w	r0, #2
 80034d0:	e7f9      	b.n	80034c6 <arm_mat_trans_f32+0xaa>
 80034d2:	bf00      	nop

080034d4 <arm_mat_sub_f32>:
 80034d4:	b4f0      	push	{r4, r5, r6, r7}
 80034d6:	e9d1 4700 	ldrd	r4, r7, [r1]
 80034da:	6803      	ldr	r3, [r0, #0]
 80034dc:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80034e0:	6856      	ldr	r6, [r2, #4]
 80034e2:	42a3      	cmp	r3, r4
 80034e4:	d15d      	bne.n	80035a2 <arm_mat_sub_f32+0xce>
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d15a      	bne.n	80035a2 <arm_mat_sub_f32+0xce>
 80034ec:	8803      	ldrh	r3, [r0, #0]
 80034ee:	8844      	ldrh	r4, [r0, #2]
 80034f0:	fb04 f403 	mul.w	r4, r4, r3
 80034f4:	08a5      	lsrs	r5, r4, #2
 80034f6:	d032      	beq.n	800355e <arm_mat_sub_f32+0x8a>
 80034f8:	f10c 0110 	add.w	r1, ip, #16
 80034fc:	f107 0210 	add.w	r2, r7, #16
 8003500:	f106 0310 	add.w	r3, r6, #16
 8003504:	4628      	mov	r0, r5
 8003506:	ed12 7a04 	vldr	s14, [r2, #-16]
 800350a:	ed51 7a04 	vldr	s15, [r1, #-16]
 800350e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003512:	3801      	subs	r0, #1
 8003514:	ed43 7a04 	vstr	s15, [r3, #-16]
 8003518:	ed12 7a03 	vldr	s14, [r2, #-12]
 800351c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8003520:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003524:	f101 0110 	add.w	r1, r1, #16
 8003528:	ed43 7a03 	vstr	s15, [r3, #-12]
 800352c:	ed12 7a02 	vldr	s14, [r2, #-8]
 8003530:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 8003534:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003538:	f102 0210 	add.w	r2, r2, #16
 800353c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8003540:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 8003544:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8003548:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800354c:	f103 0310 	add.w	r3, r3, #16
 8003550:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8003554:	d1d7      	bne.n	8003506 <arm_mat_sub_f32+0x32>
 8003556:	012b      	lsls	r3, r5, #4
 8003558:	449c      	add	ip, r3
 800355a:	441f      	add	r7, r3
 800355c:	441e      	add	r6, r3
 800355e:	f014 0403 	ands.w	r4, r4, #3
 8003562:	d01b      	beq.n	800359c <arm_mat_sub_f32+0xc8>
 8003564:	eddc 7a00 	vldr	s15, [ip]
 8003568:	ed97 7a00 	vldr	s14, [r7]
 800356c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003570:	3c01      	subs	r4, #1
 8003572:	edc6 7a00 	vstr	s15, [r6]
 8003576:	d011      	beq.n	800359c <arm_mat_sub_f32+0xc8>
 8003578:	eddc 7a01 	vldr	s15, [ip, #4]
 800357c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003580:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003584:	2c01      	cmp	r4, #1
 8003586:	edc6 7a01 	vstr	s15, [r6, #4]
 800358a:	d007      	beq.n	800359c <arm_mat_sub_f32+0xc8>
 800358c:	eddc 7a02 	vldr	s15, [ip, #8]
 8003590:	ed97 7a02 	vldr	s14, [r7, #8]
 8003594:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003598:	edc6 7a02 	vstr	s15, [r6, #8]
 800359c:	2000      	movs	r0, #0
 800359e:	bcf0      	pop	{r4, r5, r6, r7}
 80035a0:	4770      	bx	lr
 80035a2:	f06f 0002 	mvn.w	r0, #2
 80035a6:	e7fa      	b.n	800359e <arm_mat_sub_f32+0xca>

080035a8 <arm_mat_mult_f32>:
 80035a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ac:	8845      	ldrh	r5, [r0, #2]
 80035ae:	880b      	ldrh	r3, [r1, #0]
 80035b0:	8806      	ldrh	r6, [r0, #0]
 80035b2:	6847      	ldr	r7, [r0, #4]
 80035b4:	6854      	ldr	r4, [r2, #4]
 80035b6:	6848      	ldr	r0, [r1, #4]
 80035b8:	b08b      	sub	sp, #44	; 0x2c
 80035ba:	42ab      	cmp	r3, r5
 80035bc:	9109      	str	r1, [sp, #36]	; 0x24
 80035be:	9604      	str	r6, [sp, #16]
 80035c0:	8849      	ldrh	r1, [r1, #2]
 80035c2:	f040 808a 	bne.w	80036da <arm_mat_mult_f32+0x132>
 80035c6:	8815      	ldrh	r5, [r2, #0]
 80035c8:	42b5      	cmp	r5, r6
 80035ca:	f040 8086 	bne.w	80036da <arm_mat_mult_f32+0x132>
 80035ce:	8852      	ldrh	r2, [r2, #2]
 80035d0:	428a      	cmp	r2, r1
 80035d2:	f040 8082 	bne.w	80036da <arm_mat_mult_f32+0x132>
 80035d6:	ea4f 0893 	mov.w	r8, r3, lsr #2
 80035da:	1d01      	adds	r1, r0, #4
 80035dc:	0116      	lsls	r6, r2, #4
 80035de:	9108      	str	r1, [sp, #32]
 80035e0:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 80035e4:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 80035e8:	9101      	str	r1, [sp, #4]
 80035ea:	fb06 f108 	mul.w	r1, r6, r8
 80035ee:	0095      	lsls	r5, r2, #2
 80035f0:	9103      	str	r1, [sp, #12]
 80035f2:	00d2      	lsls	r2, r2, #3
 80035f4:	ea4f 018c 	mov.w	r1, ip, lsl #2
 80035f8:	f003 0903 	and.w	r9, r3, #3
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	f107 0b10 	add.w	fp, r7, #16
 8003602:	eb04 0a05 	add.w	sl, r4, r5
 8003606:	9107      	str	r1, [sp, #28]
 8003608:	9202      	str	r2, [sp, #8]
 800360a:	9306      	str	r3, [sp, #24]
 800360c:	f1ab 0310 	sub.w	r3, fp, #16
 8003610:	9305      	str	r3, [sp, #20]
 8003612:	9b07      	ldr	r3, [sp, #28]
 8003614:	f8dd e020 	ldr.w	lr, [sp, #32]
 8003618:	eb03 0c0a 	add.w	ip, r3, sl
 800361c:	eddf 7a31 	vldr	s15, [pc, #196]	; 80036e4 <arm_mat_mult_f32+0x13c>
 8003620:	f1b8 0f00 	cmp.w	r8, #0
 8003624:	d053      	beq.n	80036ce <arm_mat_mult_f32+0x126>
 8003626:	9b02      	ldr	r3, [sp, #8]
 8003628:	4644      	mov	r4, r8
 800362a:	18c1      	adds	r1, r0, r3
 800362c:	4602      	mov	r2, r0
 800362e:	465b      	mov	r3, fp
 8003630:	ed92 6a00 	vldr	s12, [r2]
 8003634:	ed13 7a04 	vldr	s14, [r3, #-16]
 8003638:	ed53 4a03 	vldr	s9, [r3, #-12]
 800363c:	ed53 6a02 	vldr	s13, [r3, #-8]
 8003640:	ed91 5a00 	vldr	s10, [r1]
 8003644:	ed53 5a01 	vldr	s11, [r3, #-4]
 8003648:	1957      	adds	r7, r2, r5
 800364a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800364e:	ed97 6a00 	vldr	s12, [r7]
 8003652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003656:	ee26 6a24 	vmul.f32	s12, s12, s9
 800365a:	194f      	adds	r7, r1, r5
 800365c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003660:	ee26 7a85 	vmul.f32	s14, s13, s10
 8003664:	edd7 7a00 	vldr	s15, [r7]
 8003668:	ee37 7a06 	vadd.f32	s14, s14, s12
 800366c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003670:	3c01      	subs	r4, #1
 8003672:	4432      	add	r2, r6
 8003674:	4431      	add	r1, r6
 8003676:	ee77 7a87 	vadd.f32	s15, s15, s14
 800367a:	f103 0310 	add.w	r3, r3, #16
 800367e:	d1d7      	bne.n	8003630 <arm_mat_mult_f32+0x88>
 8003680:	9b03      	ldr	r3, [sp, #12]
 8003682:	9a01      	ldr	r2, [sp, #4]
 8003684:	4418      	add	r0, r3
 8003686:	f1b9 0f00 	cmp.w	r9, #0
 800368a:	d00b      	beq.n	80036a4 <arm_mat_mult_f32+0xfc>
 800368c:	464b      	mov	r3, r9
 800368e:	edd0 6a00 	vldr	s13, [r0]
 8003692:	ecb2 7a01 	vldmia	r2!, {s14}
 8003696:	ee27 7a26 	vmul.f32	s14, s14, s13
 800369a:	3b01      	subs	r3, #1
 800369c:	4428      	add	r0, r5
 800369e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036a2:	d1f4      	bne.n	800368e <arm_mat_mult_f32+0xe6>
 80036a4:	ecec 7a01 	vstmia	ip!, {s15}
 80036a8:	45d4      	cmp	ip, sl
 80036aa:	4670      	mov	r0, lr
 80036ac:	f10e 0e04 	add.w	lr, lr, #4
 80036b0:	d1b4      	bne.n	800361c <arm_mat_mult_f32+0x74>
 80036b2:	9a01      	ldr	r2, [sp, #4]
 80036b4:	9b06      	ldr	r3, [sp, #24]
 80036b6:	4611      	mov	r1, r2
 80036b8:	4419      	add	r1, r3
 80036ba:	449b      	add	fp, r3
 80036bc:	9b04      	ldr	r3, [sp, #16]
 80036be:	9101      	str	r1, [sp, #4]
 80036c0:	3b01      	subs	r3, #1
 80036c2:	44aa      	add	sl, r5
 80036c4:	9304      	str	r3, [sp, #16]
 80036c6:	d004      	beq.n	80036d2 <arm_mat_mult_f32+0x12a>
 80036c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036ca:	6858      	ldr	r0, [r3, #4]
 80036cc:	e79e      	b.n	800360c <arm_mat_mult_f32+0x64>
 80036ce:	9a05      	ldr	r2, [sp, #20]
 80036d0:	e7d9      	b.n	8003686 <arm_mat_mult_f32+0xde>
 80036d2:	4618      	mov	r0, r3
 80036d4:	b00b      	add	sp, #44	; 0x2c
 80036d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036da:	f06f 0002 	mvn.w	r0, #2
 80036de:	b00b      	add	sp, #44	; 0x2c
 80036e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036e4:	00000000 	.word	0x00000000

080036e8 <arm_mat_inverse_f32>:
 80036e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ec:	8843      	ldrh	r3, [r0, #2]
 80036ee:	8804      	ldrh	r4, [r0, #0]
 80036f0:	684e      	ldr	r6, [r1, #4]
 80036f2:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80036f6:	b087      	sub	sp, #28
 80036f8:	429c      	cmp	r4, r3
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	9603      	str	r6, [sp, #12]
 80036fe:	f040 80ea 	bne.w	80038d6 <arm_mat_inverse_f32+0x1ee>
 8003702:	880a      	ldrh	r2, [r1, #0]
 8003704:	884b      	ldrh	r3, [r1, #2]
 8003706:	4293      	cmp	r3, r2
 8003708:	f040 80e5 	bne.w	80038d6 <arm_mat_inverse_f32+0x1ee>
 800370c:	429c      	cmp	r4, r3
 800370e:	f040 80e2 	bne.w	80038d6 <arm_mat_inverse_f32+0x1ee>
 8003712:	9005      	str	r0, [sp, #20]
 8003714:	b30c      	cbz	r4, 800375a <arm_mat_inverse_f32+0x72>
 8003716:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800371a:	1e67      	subs	r7, r4, #1
 800371c:	f846 bb04 	str.w	fp, [r6], #4
 8003720:	d01b      	beq.n	800375a <arm_mat_inverse_f32+0x72>
 8003722:	f04f 0801 	mov.w	r8, #1
 8003726:	00ba      	lsls	r2, r7, #2
 8003728:	eb06 0a02 	add.w	sl, r6, r2
 800372c:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8003730:	4630      	mov	r0, r6
 8003732:	2100      	movs	r1, #0
 8003734:	f000 f970 	bl	8003a18 <memset>
 8003738:	eb0a 0605 	add.w	r6, sl, r5
 800373c:	462a      	mov	r2, r5
 800373e:	2100      	movs	r1, #0
 8003740:	4650      	mov	r0, sl
 8003742:	f1b8 0f00 	cmp.w	r8, #0
 8003746:	f000 80cb 	beq.w	80038e0 <arm_mat_inverse_f32+0x1f8>
 800374a:	f000 f965 	bl	8003a18 <memset>
 800374e:	3f01      	subs	r7, #1
 8003750:	f108 0801 	add.w	r8, r8, #1
 8003754:	f846 bb04 	str.w	fp, [r6], #4
 8003758:	d1e5      	bne.n	8003726 <arm_mat_inverse_f32+0x3e>
 800375a:	9b01      	ldr	r3, [sp, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 80b5 	beq.w	80038cc <arm_mat_inverse_f32+0x1e4>
 8003762:	009d      	lsls	r5, r3, #2
 8003764:	eb09 0205 	add.w	r2, r9, r5
 8003768:	46cc      	mov	ip, r9
 800376a:	9202      	str	r2, [sp, #8]
 800376c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003770:	1d2a      	adds	r2, r5, #4
 8003772:	9204      	str	r2, [sp, #16]
 8003774:	462f      	mov	r7, r5
 8003776:	469e      	mov	lr, r3
 8003778:	2600      	movs	r6, #0
 800377a:	9b02      	ldr	r3, [sp, #8]
 800377c:	eddc 6a00 	vldr	s13, [ip]
 8003780:	42b4      	cmp	r4, r6
 8003782:	eba3 0b07 	sub.w	fp, r3, r7
 8003786:	f000 80a1 	beq.w	80038cc <arm_mat_inverse_f32+0x1e4>
 800378a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80038f0 <arm_mat_inverse_f32+0x208>
 800378e:	4632      	mov	r2, r6
 8003790:	4663      	mov	r3, ip
 8003792:	e00b      	b.n	80037ac <arm_mat_inverse_f32+0xc4>
 8003794:	eef4 7a47 	vcmp.f32	s15, s14
 8003798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379c:	f102 0201 	add.w	r2, r2, #1
 80037a0:	bfc8      	it	gt
 80037a2:	eeb0 7a67 	vmovgt.f32	s14, s15
 80037a6:	42a2      	cmp	r2, r4
 80037a8:	442b      	add	r3, r5
 80037aa:	d014      	beq.n	80037d6 <arm_mat_inverse_f32+0xee>
 80037ac:	edd3 7a00 	vldr	s15, [r3]
 80037b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b8:	eeb1 6a67 	vneg.f32	s12, s15
 80037bc:	dcea      	bgt.n	8003794 <arm_mat_inverse_f32+0xac>
 80037be:	eeb4 6a47 	vcmp.f32	s12, s14
 80037c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c6:	f102 0201 	add.w	r2, r2, #1
 80037ca:	bfc8      	it	gt
 80037cc:	eeb0 7a46 	vmovgt.f32	s14, s12
 80037d0:	42a2      	cmp	r2, r4
 80037d2:	442b      	add	r3, r5
 80037d4:	d1ea      	bne.n	80037ac <arm_mat_inverse_f32+0xc4>
 80037d6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80037da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037de:	d075      	beq.n	80038cc <arm_mat_inverse_f32+0x1e4>
 80037e0:	eef5 6a40 	vcmp.f32	s13, #0.0
 80037e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e8:	d070      	beq.n	80038cc <arm_mat_inverse_f32+0x1e4>
 80037ea:	4672      	mov	r2, lr
 80037ec:	4663      	mov	r3, ip
 80037ee:	ed93 7a00 	vldr	s14, [r3]
 80037f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037f6:	3a01      	subs	r2, #1
 80037f8:	ece3 7a01 	vstmia	r3!, {s15}
 80037fc:	d1f7      	bne.n	80037ee <arm_mat_inverse_f32+0x106>
 80037fe:	9901      	ldr	r1, [sp, #4]
 8003800:	464b      	mov	r3, r9
 8003802:	ed93 7a00 	vldr	s14, [r3]
 8003806:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800380a:	3901      	subs	r1, #1
 800380c:	ece3 7a01 	vstmia	r3!, {s15}
 8003810:	d1f7      	bne.n	8003802 <arm_mat_inverse_f32+0x11a>
 8003812:	9803      	ldr	r0, [sp, #12]
 8003814:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8003818:	42b1      	cmp	r1, r6
 800381a:	d039      	beq.n	8003890 <arm_mat_inverse_f32+0x1a8>
 800381c:	eddb 6a00 	vldr	s13, [fp]
 8003820:	465a      	mov	r2, fp
 8003822:	4673      	mov	r3, lr
 8003824:	46e2      	mov	sl, ip
 8003826:	ecba 7a01 	vldmia	sl!, {s14}
 800382a:	edd2 7a00 	vldr	s15, [r2]
 800382e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8003832:	3b01      	subs	r3, #1
 8003834:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003838:	ece2 7a01 	vstmia	r2!, {s15}
 800383c:	d1f3      	bne.n	8003826 <arm_mat_inverse_f32+0x13e>
 800383e:	9b01      	ldr	r3, [sp, #4]
 8003840:	44bb      	add	fp, r7
 8003842:	4602      	mov	r2, r0
 8003844:	46ca      	mov	sl, r9
 8003846:	ecba 7a01 	vldmia	sl!, {s14}
 800384a:	edd2 7a00 	vldr	s15, [r2]
 800384e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8003852:	3b01      	subs	r3, #1
 8003854:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003858:	ece2 7a01 	vstmia	r2!, {s15}
 800385c:	d1f3      	bne.n	8003846 <arm_mat_inverse_f32+0x15e>
 800385e:	4428      	add	r0, r5
 8003860:	3101      	adds	r1, #1
 8003862:	428c      	cmp	r4, r1
 8003864:	44c3      	add	fp, r8
 8003866:	d1d7      	bne.n	8003818 <arm_mat_inverse_f32+0x130>
 8003868:	9b04      	ldr	r3, [sp, #16]
 800386a:	f1be 0e01 	subs.w	lr, lr, #1
 800386e:	f106 0601 	add.w	r6, r6, #1
 8003872:	449c      	add	ip, r3
 8003874:	f1a7 0704 	sub.w	r7, r7, #4
 8003878:	44a9      	add	r9, r5
 800387a:	f47f af7e 	bne.w	800377a <arm_mat_inverse_f32+0x92>
 800387e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8003882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003886:	d006      	beq.n	8003896 <arm_mat_inverse_f32+0x1ae>
 8003888:	2000      	movs	r0, #0
 800388a:	b007      	add	sp, #28
 800388c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003890:	44bb      	add	fp, r7
 8003892:	4428      	add	r0, r5
 8003894:	e7e4      	b.n	8003860 <arm_mat_inverse_f32+0x178>
 8003896:	9b05      	ldr	r3, [sp, #20]
 8003898:	9a01      	ldr	r2, [sp, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	edd3 7a00 	vldr	s15, [r3]
 80038a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038a4:	fb02 f204 	mul.w	r2, r2, r4
 80038a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ac:	4614      	mov	r4, r2
 80038ae:	bf08      	it	eq
 80038b0:	3304      	addeq	r3, #4
 80038b2:	d007      	beq.n	80038c4 <arm_mat_inverse_f32+0x1dc>
 80038b4:	e7e8      	b.n	8003888 <arm_mat_inverse_f32+0x1a0>
 80038b6:	ecf3 7a01 	vldmia	r3!, {s15}
 80038ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c2:	d1e1      	bne.n	8003888 <arm_mat_inverse_f32+0x1a0>
 80038c4:	f10e 0e01 	add.w	lr, lr, #1
 80038c8:	4574      	cmp	r4, lr
 80038ca:	d1f4      	bne.n	80038b6 <arm_mat_inverse_f32+0x1ce>
 80038cc:	f06f 0004 	mvn.w	r0, #4
 80038d0:	b007      	add	sp, #28
 80038d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038d6:	f06f 0002 	mvn.w	r0, #2
 80038da:	b007      	add	sp, #28
 80038dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038e0:	4656      	mov	r6, sl
 80038e2:	3f01      	subs	r7, #1
 80038e4:	f846 bb04 	str.w	fp, [r6], #4
 80038e8:	f47f af1b 	bne.w	8003722 <arm_mat_inverse_f32+0x3a>
 80038ec:	e735      	b.n	800375a <arm_mat_inverse_f32+0x72>
 80038ee:	bf00      	nop
 80038f0:	00000000 	.word	0x00000000

080038f4 <arm_mat_init_f32>:
 80038f4:	8001      	strh	r1, [r0, #0]
 80038f6:	8042      	strh	r2, [r0, #2]
 80038f8:	6043      	str	r3, [r0, #4]
 80038fa:	4770      	bx	lr

080038fc <arm_mat_add_f32>:
 80038fc:	b4f0      	push	{r4, r5, r6, r7}
 80038fe:	e9d1 4700 	ldrd	r4, r7, [r1]
 8003902:	6803      	ldr	r3, [r0, #0]
 8003904:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8003908:	6856      	ldr	r6, [r2, #4]
 800390a:	42a3      	cmp	r3, r4
 800390c:	d15d      	bne.n	80039ca <arm_mat_add_f32+0xce>
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	4293      	cmp	r3, r2
 8003912:	d15a      	bne.n	80039ca <arm_mat_add_f32+0xce>
 8003914:	8803      	ldrh	r3, [r0, #0]
 8003916:	8844      	ldrh	r4, [r0, #2]
 8003918:	fb04 f403 	mul.w	r4, r4, r3
 800391c:	08a5      	lsrs	r5, r4, #2
 800391e:	d032      	beq.n	8003986 <arm_mat_add_f32+0x8a>
 8003920:	f10c 0110 	add.w	r1, ip, #16
 8003924:	f107 0210 	add.w	r2, r7, #16
 8003928:	f106 0310 	add.w	r3, r6, #16
 800392c:	4628      	mov	r0, r5
 800392e:	ed12 7a04 	vldr	s14, [r2, #-16]
 8003932:	ed51 7a04 	vldr	s15, [r1, #-16]
 8003936:	ee77 7a87 	vadd.f32	s15, s15, s14
 800393a:	3801      	subs	r0, #1
 800393c:	ed43 7a04 	vstr	s15, [r3, #-16]
 8003940:	ed12 7a03 	vldr	s14, [r2, #-12]
 8003944:	ed51 7a03 	vldr	s15, [r1, #-12]
 8003948:	ee77 7a87 	vadd.f32	s15, s15, s14
 800394c:	f101 0110 	add.w	r1, r1, #16
 8003950:	ed43 7a03 	vstr	s15, [r3, #-12]
 8003954:	ed12 7a02 	vldr	s14, [r2, #-8]
 8003958:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800395c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003960:	f102 0210 	add.w	r2, r2, #16
 8003964:	ed43 7a02 	vstr	s15, [r3, #-8]
 8003968:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800396c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8003970:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003974:	f103 0310 	add.w	r3, r3, #16
 8003978:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800397c:	d1d7      	bne.n	800392e <arm_mat_add_f32+0x32>
 800397e:	012b      	lsls	r3, r5, #4
 8003980:	449c      	add	ip, r3
 8003982:	441f      	add	r7, r3
 8003984:	441e      	add	r6, r3
 8003986:	f014 0403 	ands.w	r4, r4, #3
 800398a:	d01b      	beq.n	80039c4 <arm_mat_add_f32+0xc8>
 800398c:	edd7 7a00 	vldr	s15, [r7]
 8003990:	ed9c 7a00 	vldr	s14, [ip]
 8003994:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003998:	3c01      	subs	r4, #1
 800399a:	edc6 7a00 	vstr	s15, [r6]
 800399e:	d011      	beq.n	80039c4 <arm_mat_add_f32+0xc8>
 80039a0:	eddc 7a01 	vldr	s15, [ip, #4]
 80039a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80039a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039ac:	2c01      	cmp	r4, #1
 80039ae:	edc6 7a01 	vstr	s15, [r6, #4]
 80039b2:	d007      	beq.n	80039c4 <arm_mat_add_f32+0xc8>
 80039b4:	eddc 7a02 	vldr	s15, [ip, #8]
 80039b8:	ed97 7a02 	vldr	s14, [r7, #8]
 80039bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039c0:	edc6 7a02 	vstr	s15, [r6, #8]
 80039c4:	2000      	movs	r0, #0
 80039c6:	bcf0      	pop	{r4, r5, r6, r7}
 80039c8:	4770      	bx	lr
 80039ca:	f06f 0002 	mvn.w	r0, #2
 80039ce:	e7fa      	b.n	80039c6 <arm_mat_add_f32+0xca>

080039d0 <__libc_init_array>:
 80039d0:	b570      	push	{r4, r5, r6, lr}
 80039d2:	4d0d      	ldr	r5, [pc, #52]	; (8003a08 <__libc_init_array+0x38>)
 80039d4:	4c0d      	ldr	r4, [pc, #52]	; (8003a0c <__libc_init_array+0x3c>)
 80039d6:	1b64      	subs	r4, r4, r5
 80039d8:	10a4      	asrs	r4, r4, #2
 80039da:	2600      	movs	r6, #0
 80039dc:	42a6      	cmp	r6, r4
 80039de:	d109      	bne.n	80039f4 <__libc_init_array+0x24>
 80039e0:	4d0b      	ldr	r5, [pc, #44]	; (8003a10 <__libc_init_array+0x40>)
 80039e2:	4c0c      	ldr	r4, [pc, #48]	; (8003a14 <__libc_init_array+0x44>)
 80039e4:	f000 f820 	bl	8003a28 <_init>
 80039e8:	1b64      	subs	r4, r4, r5
 80039ea:	10a4      	asrs	r4, r4, #2
 80039ec:	2600      	movs	r6, #0
 80039ee:	42a6      	cmp	r6, r4
 80039f0:	d105      	bne.n	80039fe <__libc_init_array+0x2e>
 80039f2:	bd70      	pop	{r4, r5, r6, pc}
 80039f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f8:	4798      	blx	r3
 80039fa:	3601      	adds	r6, #1
 80039fc:	e7ee      	b.n	80039dc <__libc_init_array+0xc>
 80039fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a02:	4798      	blx	r3
 8003a04:	3601      	adds	r6, #1
 8003a06:	e7f2      	b.n	80039ee <__libc_init_array+0x1e>
 8003a08:	08003a60 	.word	0x08003a60
 8003a0c:	08003a60 	.word	0x08003a60
 8003a10:	08003a60 	.word	0x08003a60
 8003a14:	08003a64 	.word	0x08003a64

08003a18 <memset>:
 8003a18:	4402      	add	r2, r0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d100      	bne.n	8003a22 <memset+0xa>
 8003a20:	4770      	bx	lr
 8003a22:	f803 1b01 	strb.w	r1, [r3], #1
 8003a26:	e7f9      	b.n	8003a1c <memset+0x4>

08003a28 <_init>:
 8003a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2a:	bf00      	nop
 8003a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2e:	bc08      	pop	{r3}
 8003a30:	469e      	mov	lr, r3
 8003a32:	4770      	bx	lr

08003a34 <_fini>:
 8003a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a36:	bf00      	nop
 8003a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3a:	bc08      	pop	{r3}
 8003a3c:	469e      	mov	lr, r3
 8003a3e:	4770      	bx	lr
