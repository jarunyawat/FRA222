
Week10-UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003624  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080037bc  080037bc  000137bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038b0  080038b0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080038b0  080038b0  000138b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038b8  080038b8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038b8  080038b8  000138b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038bc  080038bc  000138bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080038c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000010  080038d0  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  080038d0  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009822  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001660  00000000  00000000  00029862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  0002aec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000660  00000000  00000000  0002b5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015632  00000000  00000000  0002bc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000087f0  00000000  00000000  00041232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085ca4  00000000  00000000  00049a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf6c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b04  00000000  00000000  000cf71c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080037a4 	.word	0x080037a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	080037a4 	.word	0x080037a4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96e 	b.w	80004dc <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468c      	mov	ip, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	f040 8083 	bne.w	800032e <__udivmoddi4+0x116>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d947      	bls.n	80002be <__udivmoddi4+0xa6>
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	b142      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000234:	f1c2 0020 	rsb	r0, r2, #32
 8000238:	fa24 f000 	lsr.w	r0, r4, r0
 800023c:	4091      	lsls	r1, r2
 800023e:	4097      	lsls	r7, r2
 8000240:	ea40 0c01 	orr.w	ip, r0, r1
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbbc f6f8 	udiv	r6, ip, r8
 8000250:	fa1f fe87 	uxth.w	lr, r7
 8000254:	fb08 c116 	mls	r1, r8, r6, ip
 8000258:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025c:	fb06 f10e 	mul.w	r1, r6, lr
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18fb      	adds	r3, r7, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 8119 	bcs.w	80004a0 <__udivmoddi4+0x288>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8116 	bls.w	80004a0 <__udivmoddi4+0x288>
 8000274:	3e02      	subs	r6, #2
 8000276:	443b      	add	r3, r7
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fe0e 	mul.w	lr, r0, lr
 800028c:	45a6      	cmp	lr, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	193c      	adds	r4, r7, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8105 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800029a:	45a6      	cmp	lr, r4
 800029c:	f240 8102 	bls.w	80004a4 <__udivmoddi4+0x28c>
 80002a0:	3802      	subs	r0, #2
 80002a2:	443c      	add	r4, r7
 80002a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a8:	eba4 040e 	sub.w	r4, r4, lr
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	b902      	cbnz	r2, 80002c2 <__udivmoddi4+0xaa>
 80002c0:	deff      	udf	#255	; 0xff
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d150      	bne.n	800036c <__udivmoddi4+0x154>
 80002ca:	1bcb      	subs	r3, r1, r7
 80002cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d0:	fa1f f887 	uxth.w	r8, r7
 80002d4:	2601      	movs	r6, #1
 80002d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002da:	0c21      	lsrs	r1, r4, #16
 80002dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e4:	fb08 f30c 	mul.w	r3, r8, ip
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xe4>
 80002ec:	1879      	adds	r1, r7, r1
 80002ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0xe2>
 80002f4:	428b      	cmp	r3, r1
 80002f6:	f200 80e9 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 80002fa:	4684      	mov	ip, r0
 80002fc:	1ac9      	subs	r1, r1, r3
 80002fe:	b2a3      	uxth	r3, r4
 8000300:	fbb1 f0fe 	udiv	r0, r1, lr
 8000304:	fb0e 1110 	mls	r1, lr, r0, r1
 8000308:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800030c:	fb08 f800 	mul.w	r8, r8, r0
 8000310:	45a0      	cmp	r8, r4
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x10c>
 8000314:	193c      	adds	r4, r7, r4
 8000316:	f100 33ff 	add.w	r3, r0, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x10a>
 800031c:	45a0      	cmp	r8, r4
 800031e:	f200 80d9 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 8000322:	4618      	mov	r0, r3
 8000324:	eba4 0408 	sub.w	r4, r4, r8
 8000328:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800032c:	e7bf      	b.n	80002ae <__udivmoddi4+0x96>
 800032e:	428b      	cmp	r3, r1
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x12e>
 8000332:	2d00      	cmp	r5, #0
 8000334:	f000 80b1 	beq.w	800049a <__udivmoddi4+0x282>
 8000338:	2600      	movs	r6, #0
 800033a:	e9c5 0100 	strd	r0, r1, [r5]
 800033e:	4630      	mov	r0, r6
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	fab3 f683 	clz	r6, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d14a      	bne.n	80003e4 <__udivmoddi4+0x1cc>
 800034e:	428b      	cmp	r3, r1
 8000350:	d302      	bcc.n	8000358 <__udivmoddi4+0x140>
 8000352:	4282      	cmp	r2, r0
 8000354:	f200 80b8 	bhi.w	80004c8 <__udivmoddi4+0x2b0>
 8000358:	1a84      	subs	r4, r0, r2
 800035a:	eb61 0103 	sbc.w	r1, r1, r3
 800035e:	2001      	movs	r0, #1
 8000360:	468c      	mov	ip, r1
 8000362:	2d00      	cmp	r5, #0
 8000364:	d0a8      	beq.n	80002b8 <__udivmoddi4+0xa0>
 8000366:	e9c5 4c00 	strd	r4, ip, [r5]
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0xa0>
 800036c:	f1c2 0320 	rsb	r3, r2, #32
 8000370:	fa20 f603 	lsr.w	r6, r0, r3
 8000374:	4097      	lsls	r7, r2
 8000376:	fa01 f002 	lsl.w	r0, r1, r2
 800037a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037e:	40d9      	lsrs	r1, r3
 8000380:	4330      	orrs	r0, r6
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	fbb1 f6fe 	udiv	r6, r1, lr
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f108 	mul.w	r1, r6, r8
 8000398:	4299      	cmp	r1, r3
 800039a:	fa04 f402 	lsl.w	r4, r4, r2
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x19c>
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003a6:	f080 808d 	bcs.w	80004c4 <__udivmoddi4+0x2ac>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 808a 	bls.w	80004c4 <__udivmoddi4+0x2ac>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	443b      	add	r3, r7
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b281      	uxth	r1, r0
 80003b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c4:	fb00 f308 	mul.w	r3, r0, r8
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x1c4>
 80003cc:	1879      	adds	r1, r7, r1
 80003ce:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d2:	d273      	bcs.n	80004bc <__udivmoddi4+0x2a4>
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d971      	bls.n	80004bc <__udivmoddi4+0x2a4>
 80003d8:	3802      	subs	r0, #2
 80003da:	4439      	add	r1, r7
 80003dc:	1acb      	subs	r3, r1, r3
 80003de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e2:	e778      	b.n	80002d6 <__udivmoddi4+0xbe>
 80003e4:	f1c6 0c20 	rsb	ip, r6, #32
 80003e8:	fa03 f406 	lsl.w	r4, r3, r6
 80003ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f0:	431c      	orrs	r4, r3
 80003f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f6:	fa01 f306 	lsl.w	r3, r1, r6
 80003fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000402:	431f      	orrs	r7, r3
 8000404:	0c3b      	lsrs	r3, r7, #16
 8000406:	fbb1 f9fe 	udiv	r9, r1, lr
 800040a:	fa1f f884 	uxth.w	r8, r4
 800040e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000412:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000416:	fb09 fa08 	mul.w	sl, r9, r8
 800041a:	458a      	cmp	sl, r1
 800041c:	fa02 f206 	lsl.w	r2, r2, r6
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x220>
 8000426:	1861      	adds	r1, r4, r1
 8000428:	f109 30ff 	add.w	r0, r9, #4294967295
 800042c:	d248      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 800042e:	458a      	cmp	sl, r1
 8000430:	d946      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000432:	f1a9 0902 	sub.w	r9, r9, #2
 8000436:	4421      	add	r1, r4
 8000438:	eba1 010a 	sub.w	r1, r1, sl
 800043c:	b2bf      	uxth	r7, r7
 800043e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000442:	fb0e 1110 	mls	r1, lr, r0, r1
 8000446:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044a:	fb00 f808 	mul.w	r8, r0, r8
 800044e:	45b8      	cmp	r8, r7
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x24a>
 8000452:	19e7      	adds	r7, r4, r7
 8000454:	f100 31ff 	add.w	r1, r0, #4294967295
 8000458:	d22e      	bcs.n	80004b8 <__udivmoddi4+0x2a0>
 800045a:	45b8      	cmp	r8, r7
 800045c:	d92c      	bls.n	80004b8 <__udivmoddi4+0x2a0>
 800045e:	3802      	subs	r0, #2
 8000460:	4427      	add	r7, r4
 8000462:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000466:	eba7 0708 	sub.w	r7, r7, r8
 800046a:	fba0 8902 	umull	r8, r9, r0, r2
 800046e:	454f      	cmp	r7, r9
 8000470:	46c6      	mov	lr, r8
 8000472:	4649      	mov	r1, r9
 8000474:	d31a      	bcc.n	80004ac <__udivmoddi4+0x294>
 8000476:	d017      	beq.n	80004a8 <__udivmoddi4+0x290>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x27a>
 800047a:	ebb3 020e 	subs.w	r2, r3, lr
 800047e:	eb67 0701 	sbc.w	r7, r7, r1
 8000482:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000486:	40f2      	lsrs	r2, r6
 8000488:	ea4c 0202 	orr.w	r2, ip, r2
 800048c:	40f7      	lsrs	r7, r6
 800048e:	e9c5 2700 	strd	r2, r7, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e70b      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fd      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004a8:	4543      	cmp	r3, r8
 80004aa:	d2e5      	bcs.n	8000478 <__udivmoddi4+0x260>
 80004ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b0:	eb69 0104 	sbc.w	r1, r9, r4
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7df      	b.n	8000478 <__udivmoddi4+0x260>
 80004b8:	4608      	mov	r0, r1
 80004ba:	e7d2      	b.n	8000462 <__udivmoddi4+0x24a>
 80004bc:	4660      	mov	r0, ip
 80004be:	e78d      	b.n	80003dc <__udivmoddi4+0x1c4>
 80004c0:	4681      	mov	r9, r0
 80004c2:	e7b9      	b.n	8000438 <__udivmoddi4+0x220>
 80004c4:	4666      	mov	r6, ip
 80004c6:	e775      	b.n	80003b4 <__udivmoddi4+0x19c>
 80004c8:	4630      	mov	r0, r6
 80004ca:	e74a      	b.n	8000362 <__udivmoddi4+0x14a>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	4439      	add	r1, r7
 80004d2:	e713      	b.n	80002fc <__udivmoddi4+0xe4>
 80004d4:	3802      	subs	r0, #2
 80004d6:	443c      	add	r4, r7
 80004d8:	e724      	b.n	8000324 <__udivmoddi4+0x10c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80004e4:	b0b2      	sub	sp, #200	; 0xc8
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fc48 	bl	8000d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f980 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 80004f0:	f000 fa12 	bl	8000918 <MX_DMA_Init>
  MX_GPIO_Init();
 80004f4:	f000 fa30 	bl	8000958 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f8:	f000 f9e4 	bl	80008c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	/*char temp[]="HELLO WORLD\r\n please type something to test UART\r\n";
	 HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);*/
	char home_menu[] =
 80004fc:	4baf      	ldr	r3, [pc, #700]	; (80007bc <main+0x2dc>)
 80004fe:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8000502:	461d      	mov	r5, r3
 8000504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800050a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800050c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800050e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000510:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000514:	c407      	stmia	r4!, {r0, r1, r2}
 8000516:	7023      	strb	r3, [r4, #0]
			"\r\nWelcome To Experiment8!!\r\n\t0.LED Control\r\n\t1.Button status";
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*) home_menu, strlen(home_menu));
 8000518:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff fe5b 	bl	80001d8 <strlen>
 8000522:	4603      	mov	r3, r0
 8000524:	b29a      	uxth	r2, r3
 8000526:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800052a:	4619      	mov	r1, r3
 800052c:	48a4      	ldr	r0, [pc, #656]	; (80007c0 <main+0x2e0>)
 800052e:	f002 f8ff 	bl	8002730 <HAL_UART_Transmit_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		static uint64_t timeStamp = 0;
		HAL_UART_Receive_IT(&huart2, (uint8_t*) RxDataBuffer, 32);
 8000532:	2220      	movs	r2, #32
 8000534:	49a3      	ldr	r1, [pc, #652]	; (80007c4 <main+0x2e4>)
 8000536:	48a2      	ldr	r0, [pc, #648]	; (80007c0 <main+0x2e0>)
 8000538:	f002 f8c9 	bl	80026ce <HAL_UART_Receive_IT>
		int16_t inputchar = UARTRecieveIT();
 800053c:	f000 fa7a 	bl	8000a34 <UARTRecieveIT>
 8000540:	4603      	mov	r3, r0
 8000542:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		switch (STATE) {
 8000546:	4ba0      	ldr	r3, [pc, #640]	; (80007c8 <main+0x2e8>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b02      	cmp	r3, #2
 800054c:	f000 80a2 	beq.w	8000694 <main+0x1b4>
 8000550:	2b02      	cmp	r3, #2
 8000552:	f300 8102 	bgt.w	800075a <main+0x27a>
 8000556:	2b00      	cmp	r3, #0
 8000558:	d002      	beq.n	8000560 <main+0x80>
 800055a:	2b01      	cmp	r3, #1
 800055c:	d047      	beq.n	80005ee <main+0x10e>
 800055e:	e0fc      	b.n	800075a <main+0x27a>
		case home:
			if (inputchar != -1) {
 8000560:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 8000564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000568:	f000 80f2 	beq.w	8000750 <main+0x270>
				if (inputchar == '0') {
 800056c:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 8000570:	2b30      	cmp	r3, #48	; 0x30
 8000572:	d11e      	bne.n	80005b2 <main+0xd2>
					char menu_select[] =
 8000574:	4b95      	ldr	r3, [pc, #596]	; (80007cc <main+0x2ec>)
 8000576:	1d3c      	adds	r4, r7, #4
 8000578:	461d      	mov	r5, r3
 800057a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000586:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800058a:	c407      	stmia	r4!, {r0, r1, r2}
 800058c:	8023      	strh	r3, [r4, #0]
 800058e:	3402      	adds	r4, #2
 8000590:	0c1b      	lsrs	r3, r3, #16
 8000592:	7023      	strb	r3, [r4, #0]
							"\r\n0 press\r\na:Speed up 1 Hz\r\ns:Slow down 1 Hz\r\nd:On\\Off\r\nx:Back";
					HAL_UART_Transmit(&huart2, (uint8_t*) menu_select,
							strlen(menu_select), 10);
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff fe1e 	bl	80001d8 <strlen>
 800059c:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart2, (uint8_t*) menu_select,
 800059e:	b29a      	uxth	r2, r3
 80005a0:	1d39      	adds	r1, r7, #4
 80005a2:	230a      	movs	r3, #10
 80005a4:	4886      	ldr	r0, [pc, #536]	; (80007c0 <main+0x2e0>)
 80005a6:	f002 f800 	bl	80025aa <HAL_UART_Transmit>
					STATE = control;
 80005aa:	4b87      	ldr	r3, [pc, #540]	; (80007c8 <main+0x2e8>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) menu_select,
							strlen(menu_select), 10);
					STATE = status;
				}
			}
			break;
 80005b0:	e0ce      	b.n	8000750 <main+0x270>
				} else if (inputchar == '1') {
 80005b2:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 80005b6:	2b31      	cmp	r3, #49	; 0x31
 80005b8:	f040 80ca 	bne.w	8000750 <main+0x270>
					char menu_select[] = "\r\n1 press\r\nx:Back";
 80005bc:	4b84      	ldr	r3, [pc, #528]	; (80007d0 <main+0x2f0>)
 80005be:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80005c2:	461d      	mov	r5, r3
 80005c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c8:	682b      	ldr	r3, [r5, #0]
 80005ca:	8023      	strh	r3, [r4, #0]
							strlen(menu_select), 10);
 80005cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff fe01 	bl	80001d8 <strlen>
 80005d6:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart2, (uint8_t*) menu_select,
 80005d8:	b29a      	uxth	r2, r3
 80005da:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80005de:	230a      	movs	r3, #10
 80005e0:	4877      	ldr	r0, [pc, #476]	; (80007c0 <main+0x2e0>)
 80005e2:	f001 ffe2 	bl	80025aa <HAL_UART_Transmit>
					STATE = status;
 80005e6:	4b78      	ldr	r3, [pc, #480]	; (80007c8 <main+0x2e8>)
 80005e8:	2202      	movs	r2, #2
 80005ea:	701a      	strb	r2, [r3, #0]
			break;
 80005ec:	e0b0      	b.n	8000750 <main+0x270>
		case control:
			if (inputchar != -1) {
 80005ee:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 80005f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f6:	f000 80ad 	beq.w	8000754 <main+0x274>
				if(inputchar == 'a'){
 80005fa:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 80005fe:	2b61      	cmp	r3, #97	; 0x61
 8000600:	d10e      	bne.n	8000620 <main+0x140>
					f_value /= 2;
 8000602:	4b74      	ldr	r3, [pc, #464]	; (80007d4 <main+0x2f4>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	085b      	lsrs	r3, r3, #1
 8000608:	b29a      	uxth	r2, r3
 800060a:	4b72      	ldr	r3, [pc, #456]	; (80007d4 <main+0x2f4>)
 800060c:	801a      	strh	r2, [r3, #0]
					if(f_value<=1){
 800060e:	4b71      	ldr	r3, [pc, #452]	; (80007d4 <main+0x2f4>)
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	2b01      	cmp	r3, #1
 8000614:	f200 809e 	bhi.w	8000754 <main+0x274>
						f_value = 1;
 8000618:	4b6e      	ldr	r3, [pc, #440]	; (80007d4 <main+0x2f4>)
 800061a:	2201      	movs	r2, #1
 800061c:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) home_menu,
							strlen(home_menu), 10);
					STATE = home;
				}
			}
			break;
 800061e:	e099      	b.n	8000754 <main+0x274>
				else if(inputchar == 's'){
 8000620:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 8000624:	2b73      	cmp	r3, #115	; 0x73
 8000626:	d106      	bne.n	8000636 <main+0x156>
					f_value *= 2;
 8000628:	4b6a      	ldr	r3, [pc, #424]	; (80007d4 <main+0x2f4>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	b29a      	uxth	r2, r3
 8000630:	4b68      	ldr	r3, [pc, #416]	; (80007d4 <main+0x2f4>)
 8000632:	801a      	strh	r2, [r3, #0]
			break;
 8000634:	e08e      	b.n	8000754 <main+0x274>
				else if(inputchar == 'd'){
 8000636:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 800063a:	2b64      	cmp	r3, #100	; 0x64
 800063c:	d10a      	bne.n	8000654 <main+0x174>
					flag = !flag;
 800063e:	4b66      	ldr	r3, [pc, #408]	; (80007d8 <main+0x2f8>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	bf0c      	ite	eq
 8000646:	2301      	moveq	r3, #1
 8000648:	2300      	movne	r3, #0
 800064a:	b2db      	uxtb	r3, r3
 800064c:	461a      	mov	r2, r3
 800064e:	4b62      	ldr	r3, [pc, #392]	; (80007d8 <main+0x2f8>)
 8000650:	701a      	strb	r2, [r3, #0]
			break;
 8000652:	e07f      	b.n	8000754 <main+0x274>
				else if (inputchar == 'x') {
 8000654:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 8000658:	2b78      	cmp	r3, #120	; 0x78
 800065a:	d17b      	bne.n	8000754 <main+0x274>
					char home_menu[] =
 800065c:	4b57      	ldr	r3, [pc, #348]	; (80007bc <main+0x2dc>)
 800065e:	1d3c      	adds	r4, r7, #4
 8000660:	461d      	mov	r5, r3
 8000662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000672:	c407      	stmia	r4!, {r0, r1, r2}
 8000674:	7023      	strb	r3, [r4, #0]
							strlen(home_menu), 10);
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fdad 	bl	80001d8 <strlen>
 800067e:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart2, (uint8_t*) home_menu,
 8000680:	b29a      	uxth	r2, r3
 8000682:	1d39      	adds	r1, r7, #4
 8000684:	230a      	movs	r3, #10
 8000686:	484e      	ldr	r0, [pc, #312]	; (80007c0 <main+0x2e0>)
 8000688:	f001 ff8f 	bl	80025aa <HAL_UART_Transmit>
					STATE = home;
 800068c:	4b4e      	ldr	r3, [pc, #312]	; (80007c8 <main+0x2e8>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
			break;
 8000692:	e05f      	b.n	8000754 <main+0x274>
		case status:
			if (fallingDetect()) {
 8000694:	f000 fa08 	bl	8000aa8 <fallingDetect>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d017      	beq.n	80006ce <main+0x1ee>
				char text[] = "\r\nButton Status:Press";
 800069e:	4b4f      	ldr	r3, [pc, #316]	; (80007dc <main+0x2fc>)
 80006a0:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80006a4:	461d      	mov	r5, r3
 80006a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006ae:	6020      	str	r0, [r4, #0]
 80006b0:	3404      	adds	r4, #4
 80006b2:	8021      	strh	r1, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) text, strlen(text), 10);
 80006b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fd8d 	bl	80001d8 <strlen>
 80006be:	4603      	mov	r3, r0
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80006c6:	230a      	movs	r3, #10
 80006c8:	483d      	ldr	r0, [pc, #244]	; (80007c0 <main+0x2e0>)
 80006ca:	f001 ff6e 	bl	80025aa <HAL_UART_Transmit>
			}
			if (risingDetect()) {
 80006ce:	f000 fa0b 	bl	8000ae8 <risingDetect>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d016      	beq.n	8000706 <main+0x226>
				char text[] = "\r\nButton Status:Unpress";
 80006d8:	4b41      	ldr	r3, [pc, #260]	; (80007e0 <main+0x300>)
 80006da:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80006de:	461d      	mov	r5, r3
 80006e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006e8:	e884 0003 	stmia.w	r4, {r0, r1}
				HAL_UART_Transmit(&huart2, (uint8_t*) text, strlen(text), 10);
 80006ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fd71 	bl	80001d8 <strlen>
 80006f6:	4603      	mov	r3, r0
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80006fe:	230a      	movs	r3, #10
 8000700:	482f      	ldr	r0, [pc, #188]	; (80007c0 <main+0x2e0>)
 8000702:	f001 ff52 	bl	80025aa <HAL_UART_Transmit>
			}
			if (inputchar != -1) {
 8000706:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 800070a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800070e:	d023      	beq.n	8000758 <main+0x278>
				if (inputchar == 'x') {
 8000710:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 8000714:	2b78      	cmp	r3, #120	; 0x78
 8000716:	d11f      	bne.n	8000758 <main+0x278>
					char home_menu[] =
 8000718:	4b28      	ldr	r3, [pc, #160]	; (80007bc <main+0x2dc>)
 800071a:	1d3c      	adds	r4, r7, #4
 800071c:	461d      	mov	r5, r3
 800071e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800072e:	c407      	stmia	r4!, {r0, r1, r2}
 8000730:	7023      	strb	r3, [r4, #0]
							"\r\nWelcome To Experiment8!!\r\n\t0.LED Control\r\n\t1.Button status";
					HAL_UART_Transmit(&huart2, (uint8_t*) home_menu,
							strlen(home_menu), 10);
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fd4f 	bl	80001d8 <strlen>
 800073a:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart2, (uint8_t*) home_menu,
 800073c:	b29a      	uxth	r2, r3
 800073e:	1d39      	adds	r1, r7, #4
 8000740:	230a      	movs	r3, #10
 8000742:	481f      	ldr	r0, [pc, #124]	; (80007c0 <main+0x2e0>)
 8000744:	f001 ff31 	bl	80025aa <HAL_UART_Transmit>
					STATE = home;
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <main+0x2e8>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 800074e:	e003      	b.n	8000758 <main+0x278>
			break;
 8000750:	bf00      	nop
 8000752:	e002      	b.n	800075a <main+0x27a>
			break;
 8000754:	bf00      	nop
 8000756:	e000      	b.n	800075a <main+0x27a>
			break;
 8000758:	bf00      	nop
		 sprintf(TxDataBuffer, "ReceivedChar:[%c]\r\n", inputchar);
		 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
		 }*/

		/*This section just simmulate Work Load*/
		if(flag==1){
 800075a:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <main+0x2f8>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d124      	bne.n	80007ac <main+0x2cc>
			if(HAL_GetTick()-timeStamp>f_value){
 8000762:	f000 fb71 	bl	8000e48 <HAL_GetTick>
 8000766:	4603      	mov	r3, r0
 8000768:	4618      	mov	r0, r3
 800076a:	f04f 0100 	mov.w	r1, #0
 800076e:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <main+0x304>)
 8000770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000774:	ebb0 0802 	subs.w	r8, r0, r2
 8000778:	eb61 0903 	sbc.w	r9, r1, r3
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <main+0x2f4>)
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	b29a      	uxth	r2, r3
 8000782:	f04f 0300 	mov.w	r3, #0
 8000786:	454b      	cmp	r3, r9
 8000788:	bf08      	it	eq
 800078a:	4542      	cmpeq	r2, r8
 800078c:	f4bf aed1 	bcs.w	8000532 <main+0x52>
						timeStamp = HAL_GetTick();
 8000790:	f000 fb5a 	bl	8000e48 <HAL_GetTick>
 8000794:	4603      	mov	r3, r0
 8000796:	461a      	mov	r2, r3
 8000798:	f04f 0300 	mov.w	r3, #0
 800079c:	4911      	ldr	r1, [pc, #68]	; (80007e4 <main+0x304>)
 800079e:	e9c1 2300 	strd	r2, r3, [r1]
						HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007a2:	2120      	movs	r1, #32
 80007a4:	4810      	ldr	r0, [pc, #64]	; (80007e8 <main+0x308>)
 80007a6:	f001 fa24 	bl	8001bf2 <HAL_GPIO_TogglePin>
 80007aa:	e6c2      	b.n	8000532 <main+0x52>
					}
		}
		else{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b2:	480e      	ldr	r0, [pc, #56]	; (80007ec <main+0x30c>)
 80007b4:	f001 fa04 	bl	8001bc0 <HAL_GPIO_WritePin>
	while (1) {
 80007b8:	e6bb      	b.n	8000532 <main+0x52>
 80007ba:	bf00      	nop
 80007bc:	080037bc 	.word	0x080037bc
 80007c0:	200000c0 	.word	0x200000c0
 80007c4:	2000002c 	.word	0x2000002c
 80007c8:	2000004c 	.word	0x2000004c
 80007cc:	080037fc 	.word	0x080037fc
 80007d0:	0800383c 	.word	0x0800383c
 80007d4:	20000000 	.word	0x20000000
 80007d8:	20000002 	.word	0x20000002
 80007dc:	08003850 	.word	0x08003850
 80007e0:	08003868 	.word	0x08003868
 80007e4:	20000050 	.word	0x20000050
 80007e8:	40020000 	.word	0x40020000
 80007ec:	40020800 	.word	0x40020800

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b094      	sub	sp, #80	; 0x50
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0320 	add.w	r3, r7, #32
 80007fa:	2230      	movs	r2, #48	; 0x30
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f002 ffc8 	bl	8003794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000814:	2300      	movs	r3, #0
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	4b28      	ldr	r3, [pc, #160]	; (80008bc <SystemClock_Config+0xcc>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	4a27      	ldr	r2, [pc, #156]	; (80008bc <SystemClock_Config+0xcc>)
 800081e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000822:	6413      	str	r3, [r2, #64]	; 0x40
 8000824:	4b25      	ldr	r3, [pc, #148]	; (80008bc <SystemClock_Config+0xcc>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <SystemClock_Config+0xd0>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <SystemClock_Config+0xd0>)
 800083a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <SystemClock_Config+0xd0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800084c:	2302      	movs	r3, #2
 800084e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000850:	2301      	movs	r3, #1
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000854:	2310      	movs	r3, #16
 8000856:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000858:	2302      	movs	r3, #2
 800085a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800085c:	2300      	movs	r3, #0
 800085e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000860:	2310      	movs	r3, #16
 8000862:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000864:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000868:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800086a:	2304      	movs	r3, #4
 800086c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800086e:	2304      	movs	r3, #4
 8000870:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000872:	f107 0320 	add.w	r3, r7, #32
 8000876:	4618      	mov	r0, r3
 8000878:	f001 f9d6 	bl	8001c28 <HAL_RCC_OscConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000882:	f000 f951 	bl	8000b28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000886:	230f      	movs	r3, #15
 8000888:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088a:	2302      	movs	r3, #2
 800088c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000896:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2102      	movs	r1, #2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 fc38 	bl	8002118 <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008ae:	f000 f93b 	bl	8000b28 <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3750      	adds	r7, #80	; 0x50
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40007000 	.word	0x40007000

080008c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008ca:	4a12      	ldr	r2, [pc, #72]	; (8000914 <MX_USART2_UART_Init+0x50>)
 80008cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008fc:	f001 fe08 	bl	8002510 <HAL_UART_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000906:	f000 f90f 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200000c0 	.word	0x200000c0
 8000914:	40004400 	.word	0x40004400

08000918 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_DMA_Init+0x3c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <MX_DMA_Init+0x3c>)
 8000928:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_DMA_Init+0x3c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	2011      	movs	r0, #17
 8000940:	f000 fb69 	bl	8001016 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000944:	2011      	movs	r0, #17
 8000946:	f000 fb82 	bl	800104e <HAL_NVIC_EnableIRQ>

}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b2d      	ldr	r3, [pc, #180]	; (8000a28 <MX_GPIO_Init+0xd0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a2c      	ldr	r2, [pc, #176]	; (8000a28 <MX_GPIO_Init+0xd0>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b2a      	ldr	r3, [pc, #168]	; (8000a28 <MX_GPIO_Init+0xd0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <MX_GPIO_Init+0xd0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a25      	ldr	r2, [pc, #148]	; (8000a28 <MX_GPIO_Init+0xd0>)
 8000994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <MX_GPIO_Init+0xd0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <MX_GPIO_Init+0xd0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a1e      	ldr	r2, [pc, #120]	; (8000a28 <MX_GPIO_Init+0xd0>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <MX_GPIO_Init+0xd0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_GPIO_Init+0xd0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a17      	ldr	r2, [pc, #92]	; (8000a28 <MX_GPIO_Init+0xd0>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <MX_GPIO_Init+0xd0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2120      	movs	r1, #32
 80009e2:	4812      	ldr	r0, [pc, #72]	; (8000a2c <MX_GPIO_Init+0xd4>)
 80009e4:	f001 f8ec 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	480c      	ldr	r0, [pc, #48]	; (8000a30 <MX_GPIO_Init+0xd8>)
 8000a00:	f000 ff42 	bl	8001888 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a04:	2320      	movs	r3, #32
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4804      	ldr	r0, [pc, #16]	; (8000a2c <MX_GPIO_Init+0xd4>)
 8000a1c:	f000 ff34 	bl	8001888 <HAL_GPIO_Init>

}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	; 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	40020800 	.word	0x40020800

08000a34 <UARTRecieveIT>:
	HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer, strlen(TxDataBuffer),
			1000);

}

int16_t UARTRecieveIT() {
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
	static uint32_t dataPos = 0;
	int16_t data = -1;
 8000a3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a3e:	80fb      	strh	r3, [r7, #6]
	if (huart2.RxXferSize - huart2.RxXferCount != dataPos) {
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <UARTRecieveIT+0x54>)
 8000a42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <UARTRecieveIT+0x54>)
 8000a48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	4a0f      	ldr	r2, [pc, #60]	; (8000a8c <UARTRecieveIT+0x58>)
 8000a50:	6812      	ldr	r2, [r2, #0]
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d010      	beq.n	8000a78 <UARTRecieveIT+0x44>
		data = RxDataBuffer[dataPos];
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <UARTRecieveIT+0x58>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <UARTRecieveIT+0x5c>)
 8000a5c:	5cd3      	ldrb	r3, [r2, r3]
 8000a5e:	80fb      	strh	r3, [r7, #6]
		dataPos = (dataPos + 1) % huart2.RxXferSize;
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <UARTRecieveIT+0x58>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	3301      	adds	r3, #1
 8000a66:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <UARTRecieveIT+0x54>)
 8000a68:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8000a6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a6e:	fb02 f201 	mul.w	r2, r2, r1
 8000a72:	1a9b      	subs	r3, r3, r2
 8000a74:	4a05      	ldr	r2, [pc, #20]	; (8000a8c <UARTRecieveIT+0x58>)
 8000a76:	6013      	str	r3, [r2, #0]
	}
	return data;
 8000a78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	200000c0 	.word	0x200000c0
 8000a8c:	20000058 	.word	0x20000058
 8000a90:	2000002c 	.word	0x2000002c

08000a94 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	/*sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
	 HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);*/
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <fallingDetect>:

uint8_t fallingDetect() {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	static uint8_t buttonStatus = 0;
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8000aac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab0:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <fallingDetect+0x38>)
 8000ab2:	f001 f86d 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d10a      	bne.n	8000ad2 <fallingDetect+0x2a>
		if (buttonStatus == 0) {
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <fallingDetect+0x3c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d104      	bne.n	8000ace <fallingDetect+0x26>
			buttonStatus = 1;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <fallingDetect+0x3c>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	701a      	strb	r2, [r3, #0]
			return 1;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e005      	b.n	8000ada <fallingDetect+0x32>
		}
		return 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e003      	b.n	8000ada <fallingDetect+0x32>
	} else {
		buttonStatus = 0;
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <fallingDetect+0x3c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40020800 	.word	0x40020800
 8000ae4:	2000005c 	.word	0x2000005c

08000ae8 <risingDetect>:

uint8_t risingDetect() {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	static uint8_t buttonStatus = 0;
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 8000aec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af0:	480b      	ldr	r0, [pc, #44]	; (8000b20 <risingDetect+0x38>)
 8000af2:	f001 f84d 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d10a      	bne.n	8000b12 <risingDetect+0x2a>
		if (buttonStatus == 0) {
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <risingDetect+0x3c>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d104      	bne.n	8000b0e <risingDetect+0x26>
			buttonStatus = 1;
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <risingDetect+0x3c>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	701a      	strb	r2, [r3, #0]
			return 1;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e005      	b.n	8000b1a <risingDetect+0x32>
		}
		return 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e003      	b.n	8000b1a <risingDetect+0x32>
	} else {
		buttonStatus = 0;
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <risingDetect+0x3c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40020800 	.word	0x40020800
 8000b24:	2000005d 	.word	0x2000005d

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b30:	e7fe      	b.n	8000b30 <Error_Handler+0x8>
	...

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	4a0f      	ldr	r2, [pc, #60]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b64:	6413      	str	r3, [r2, #64]	; 0x40
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b72:	2007      	movs	r0, #7
 8000b74:	f000 fa44 	bl	8001000 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40023800 	.word	0x40023800

08000b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a34      	ldr	r2, [pc, #208]	; (8000c74 <HAL_UART_MspInit+0xf0>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d161      	bne.n	8000c6a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	4b33      	ldr	r3, [pc, #204]	; (8000c78 <HAL_UART_MspInit+0xf4>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a32      	ldr	r2, [pc, #200]	; (8000c78 <HAL_UART_MspInit+0xf4>)
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b30      	ldr	r3, [pc, #192]	; (8000c78 <HAL_UART_MspInit+0xf4>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	4b2c      	ldr	r3, [pc, #176]	; (8000c78 <HAL_UART_MspInit+0xf4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a2b      	ldr	r2, [pc, #172]	; (8000c78 <HAL_UART_MspInit+0xf4>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b29      	ldr	r3, [pc, #164]	; (8000c78 <HAL_UART_MspInit+0xf4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bde:	230c      	movs	r3, #12
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bee:	2307      	movs	r3, #7
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4820      	ldr	r0, [pc, #128]	; (8000c7c <HAL_UART_MspInit+0xf8>)
 8000bfa:	f000 fe45 	bl	8001888 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000bfe:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <HAL_UART_MspInit+0xfc>)
 8000c00:	4a20      	ldr	r2, [pc, #128]	; (8000c84 <HAL_UART_MspInit+0x100>)
 8000c02:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000c04:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <HAL_UART_MspInit+0xfc>)
 8000c06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c0a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c0c:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <HAL_UART_MspInit+0xfc>)
 8000c0e:	2240      	movs	r2, #64	; 0x40
 8000c10:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <HAL_UART_MspInit+0xfc>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c18:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xfc>)
 8000c1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c1e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xfc>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c26:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <HAL_UART_MspInit+0xfc>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xfc>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c32:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xfc>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xfc>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000c3e:	4810      	ldr	r0, [pc, #64]	; (8000c80 <HAL_UART_MspInit+0xfc>)
 8000c40:	f000 fa20 	bl	8001084 <HAL_DMA_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000c4a:	f7ff ff6d 	bl	8000b28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <HAL_UART_MspInit+0xfc>)
 8000c52:	635a      	str	r2, [r3, #52]	; 0x34
 8000c54:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <HAL_UART_MspInit+0xfc>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2026      	movs	r0, #38	; 0x26
 8000c60:	f000 f9d9 	bl	8001016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c64:	2026      	movs	r0, #38	; 0x26
 8000c66:	f000 f9f2 	bl	800104e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	; 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40004400 	.word	0x40004400
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	20000060 	.word	0x20000060
 8000c84:	400260a0 	.word	0x400260a0

08000c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <NMI_Handler+0x4>

08000c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <HardFault_Handler+0x4>

08000c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <MemManage_Handler+0x4>

08000c9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd4:	f000 f8a4 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <DMA1_Stream6_IRQHandler+0x10>)
 8000ce2:	f000 fb67 	bl	80013b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000060 	.word	0x20000060

08000cf0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <USART2_IRQHandler+0x10>)
 8000cf6:	f001 fd99 	bl	800282c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200000c0 	.word	0x200000c0

08000d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <SystemInit+0x20>)
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0e:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <SystemInit+0x20>)
 8000d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d2e:	490e      	ldr	r1, [pc, #56]	; (8000d68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d30:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d44:	4c0b      	ldr	r4, [pc, #44]	; (8000d74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d52:	f7ff ffd7 	bl	8000d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d56:	f002 fcf9 	bl	800374c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5a:	f7ff fbc1 	bl	80004e0 <main>
  bx  lr    
 8000d5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d6c:	080038c0 	.word	0x080038c0
  ldr r2, =_sbss
 8000d70:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d74:	20000108 	.word	0x20000108

08000d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC_IRQHandler>
	...

08000d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <HAL_Init+0x40>)
 8000d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_Init+0x40>)
 8000d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_Init+0x40>)
 8000d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 f92b 	bl	8001000 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f000 f808 	bl	8000dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db0:	f7ff fec0 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023c00 	.word	0x40023c00

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_InitTick+0x54>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_InitTick+0x58>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f943 	bl	800106a <HAL_SYSTICK_Config>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00e      	b.n	8000e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d80a      	bhi.n	8000e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f000 f90b 	bl	8001016 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e00:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <HAL_InitTick+0x5c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000004 	.word	0x20000004
 8000e18:	2000000c 	.word	0x2000000c
 8000e1c:	20000008 	.word	0x20000008

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	2000000c 	.word	0x2000000c
 8000e44:	20000104 	.word	0x20000104

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000104 	.word	0x20000104

08000e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e92:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	60d3      	str	r3, [r2, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	f003 0307 	and.w	r3, r3, #7
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db0b      	blt.n	8000eee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	f003 021f 	and.w	r2, r3, #31
 8000edc:	4907      	ldr	r1, [pc, #28]	; (8000efc <__NVIC_EnableIRQ+0x38>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	095b      	lsrs	r3, r3, #5
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000e100 	.word	0xe000e100

08000f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	db0a      	blt.n	8000f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	490c      	ldr	r1, [pc, #48]	; (8000f4c <__NVIC_SetPriority+0x4c>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	0112      	lsls	r2, r2, #4
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	440b      	add	r3, r1
 8000f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f28:	e00a      	b.n	8000f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4908      	ldr	r1, [pc, #32]	; (8000f50 <__NVIC_SetPriority+0x50>)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	3b04      	subs	r3, #4
 8000f38:	0112      	lsls	r2, r2, #4
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	761a      	strb	r2, [r3, #24]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000e100 	.word	0xe000e100
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f1c3 0307 	rsb	r3, r3, #7
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	bf28      	it	cs
 8000f72:	2304      	movcs	r3, #4
 8000f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	d902      	bls.n	8000f84 <NVIC_EncodePriority+0x30>
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3b03      	subs	r3, #3
 8000f82:	e000      	b.n	8000f86 <NVIC_EncodePriority+0x32>
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43da      	mvns	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	401a      	ands	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	43d9      	mvns	r1, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	4313      	orrs	r3, r2
         );
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3724      	adds	r7, #36	; 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fcc:	d301      	bcc.n	8000fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00f      	b.n	8000ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <SysTick_Config+0x40>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fda:	210f      	movs	r1, #15
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f7ff ff8e 	bl	8000f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <SysTick_Config+0x40>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <SysTick_Config+0x40>)
 8000fec:	2207      	movs	r2, #7
 8000fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	e000e010 	.word	0xe000e010

08001000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ff29 	bl	8000e60 <__NVIC_SetPriorityGrouping>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001028:	f7ff ff3e 	bl	8000ea8 <__NVIC_GetPriorityGrouping>
 800102c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	6978      	ldr	r0, [r7, #20]
 8001034:	f7ff ff8e 	bl	8000f54 <NVIC_EncodePriority>
 8001038:	4602      	mov	r2, r0
 800103a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff5d 	bl	8000f00 <__NVIC_SetPriority>
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff31 	bl	8000ec4 <__NVIC_EnableIRQ>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ffa2 	bl	8000fbc <SysTick_Config>
 8001078:	4603      	mov	r3, r0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001090:	f7ff feda 	bl	8000e48 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d101      	bne.n	80010a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e099      	b.n	80011d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2202      	movs	r2, #2
 80010a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f022 0201 	bic.w	r2, r2, #1
 80010be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010c0:	e00f      	b.n	80010e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010c2:	f7ff fec1 	bl	8000e48 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b05      	cmp	r3, #5
 80010ce:	d908      	bls.n	80010e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2220      	movs	r2, #32
 80010d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2203      	movs	r2, #3
 80010da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e078      	b.n	80011d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1e8      	bne.n	80010c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	4b38      	ldr	r3, [pc, #224]	; (80011dc <HAL_DMA_Init+0x158>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800110e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800111a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001126:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4313      	orrs	r3, r2
 8001132:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001138:	2b04      	cmp	r3, #4
 800113a:	d107      	bne.n	800114c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	4313      	orrs	r3, r2
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	4313      	orrs	r3, r2
 800114a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	f023 0307 	bic.w	r3, r3, #7
 8001162:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	4313      	orrs	r3, r2
 800116c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001172:	2b04      	cmp	r3, #4
 8001174:	d117      	bne.n	80011a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	4313      	orrs	r3, r2
 800117e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001184:	2b00      	cmp	r3, #0
 8001186:	d00e      	beq.n	80011a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f000 fb01 	bl	8001790 <DMA_CheckFifoParam>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d008      	beq.n	80011a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2240      	movs	r2, #64	; 0x40
 8001198:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011a2:	2301      	movs	r3, #1
 80011a4:	e016      	b.n	80011d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 fab8 	bl	8001724 <DMA_CalcBaseAndBitshift>
 80011b4:	4603      	mov	r3, r0
 80011b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011bc:	223f      	movs	r2, #63	; 0x3f
 80011be:	409a      	lsls	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2201      	movs	r2, #1
 80011ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	f010803f 	.word	0xf010803f

080011e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d101      	bne.n	8001206 <HAL_DMA_Start_IT+0x26>
 8001202:	2302      	movs	r3, #2
 8001204:	e040      	b.n	8001288 <HAL_DMA_Start_IT+0xa8>
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2201      	movs	r2, #1
 800120a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b01      	cmp	r3, #1
 8001218:	d12f      	bne.n	800127a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2202      	movs	r2, #2
 800121e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2200      	movs	r2, #0
 8001226:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f000 fa4a 	bl	80016c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001238:	223f      	movs	r2, #63	; 0x3f
 800123a:	409a      	lsls	r2, r3
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 0216 	orr.w	r2, r2, #22
 800124e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	2b00      	cmp	r3, #0
 8001256:	d007      	beq.n	8001268 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0208 	orr.w	r2, r2, #8
 8001266:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0201 	orr.w	r2, r2, #1
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	e005      	b.n	8001286 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001282:	2302      	movs	r3, #2
 8001284:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001286:	7dfb      	ldrb	r3, [r7, #23]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800129e:	f7ff fdd3 	bl	8000e48 <HAL_GetTick>
 80012a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d008      	beq.n	80012c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e052      	b.n	8001368 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 0216 	bic.w	r2, r2, #22
 80012d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	695a      	ldr	r2, [r3, #20]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d103      	bne.n	80012f2 <HAL_DMA_Abort+0x62>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d007      	beq.n	8001302 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 0208 	bic.w	r2, r2, #8
 8001300:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0201 	bic.w	r2, r2, #1
 8001310:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001312:	e013      	b.n	800133c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001314:	f7ff fd98 	bl	8000e48 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b05      	cmp	r3, #5
 8001320:	d90c      	bls.n	800133c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2220      	movs	r2, #32
 8001326:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2203      	movs	r2, #3
 800132c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e015      	b.n	8001368 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1e4      	bne.n	8001314 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134e:	223f      	movs	r2, #63	; 0x3f
 8001350:	409a      	lsls	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d004      	beq.n	800138e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2280      	movs	r2, #128	; 0x80
 8001388:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e00c      	b.n	80013a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2205      	movs	r2, #5
 8001392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0201 	bic.w	r2, r2, #1
 80013a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013bc:	2300      	movs	r3, #0
 80013be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013c0:	4b92      	ldr	r3, [pc, #584]	; (800160c <HAL_DMA_IRQHandler+0x258>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a92      	ldr	r2, [pc, #584]	; (8001610 <HAL_DMA_IRQHandler+0x25c>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	0a9b      	lsrs	r3, r3, #10
 80013cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013de:	2208      	movs	r2, #8
 80013e0:	409a      	lsls	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d01a      	beq.n	8001420 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d013      	beq.n	8001420 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0204 	bic.w	r2, r2, #4
 8001406:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140c:	2208      	movs	r2, #8
 800140e:	409a      	lsls	r2, r3
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001418:	f043 0201 	orr.w	r2, r3, #1
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001424:	2201      	movs	r2, #1
 8001426:	409a      	lsls	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4013      	ands	r3, r2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d012      	beq.n	8001456 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00b      	beq.n	8001456 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001442:	2201      	movs	r2, #1
 8001444:	409a      	lsls	r2, r3
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144e:	f043 0202 	orr.w	r2, r3, #2
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145a:	2204      	movs	r2, #4
 800145c:	409a      	lsls	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	4013      	ands	r3, r2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d012      	beq.n	800148c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00b      	beq.n	800148c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001478:	2204      	movs	r2, #4
 800147a:	409a      	lsls	r2, r3
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001484:	f043 0204 	orr.w	r2, r3, #4
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001490:	2210      	movs	r2, #16
 8001492:	409a      	lsls	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4013      	ands	r3, r2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d043      	beq.n	8001524 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d03c      	beq.n	8001524 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ae:	2210      	movs	r2, #16
 80014b0:	409a      	lsls	r2, r3
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d018      	beq.n	80014f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d108      	bne.n	80014e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d024      	beq.n	8001524 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	4798      	blx	r3
 80014e2:	e01f      	b.n	8001524 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d01b      	beq.n	8001524 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	4798      	blx	r3
 80014f4:	e016      	b.n	8001524 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001500:	2b00      	cmp	r3, #0
 8001502:	d107      	bne.n	8001514 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0208 	bic.w	r2, r2, #8
 8001512:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001528:	2220      	movs	r2, #32
 800152a:	409a      	lsls	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4013      	ands	r3, r2
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 808e 	beq.w	8001652 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0310 	and.w	r3, r3, #16
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 8086 	beq.w	8001652 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154a:	2220      	movs	r2, #32
 800154c:	409a      	lsls	r2, r3
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b05      	cmp	r3, #5
 800155c:	d136      	bne.n	80015cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 0216 	bic.w	r2, r2, #22
 800156c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	695a      	ldr	r2, [r3, #20]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800157c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	2b00      	cmp	r3, #0
 8001584:	d103      	bne.n	800158e <HAL_DMA_IRQHandler+0x1da>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800158a:	2b00      	cmp	r3, #0
 800158c:	d007      	beq.n	800159e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 0208 	bic.w	r2, r2, #8
 800159c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a2:	223f      	movs	r2, #63	; 0x3f
 80015a4:	409a      	lsls	r2, r3
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d07d      	beq.n	80016be <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	4798      	blx	r3
        }
        return;
 80015ca:	e078      	b.n	80016be <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d01c      	beq.n	8001614 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d108      	bne.n	80015fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d030      	beq.n	8001652 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	4798      	blx	r3
 80015f8:	e02b      	b.n	8001652 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d027      	beq.n	8001652 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	4798      	blx	r3
 800160a:	e022      	b.n	8001652 <HAL_DMA_IRQHandler+0x29e>
 800160c:	20000004 	.word	0x20000004
 8001610:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10f      	bne.n	8001642 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0210 	bic.w	r2, r2, #16
 8001630:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001656:	2b00      	cmp	r3, #0
 8001658:	d032      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d022      	beq.n	80016ac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2205      	movs	r2, #5
 800166a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0201 	bic.w	r2, r2, #1
 800167c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	3301      	adds	r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	429a      	cmp	r2, r3
 8001688:	d307      	bcc.n	800169a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f2      	bne.n	800167e <HAL_DMA_IRQHandler+0x2ca>
 8001698:	e000      	b.n	800169c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800169a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	4798      	blx	r3
 80016bc:	e000      	b.n	80016c0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80016be:	bf00      	nop
    }
  }
}
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop

080016c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
 80016d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b40      	cmp	r3, #64	; 0x40
 80016f4:	d108      	bne.n	8001708 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001706:	e007      	b.n	8001718 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68ba      	ldr	r2, [r7, #8]
 800170e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	60da      	str	r2, [r3, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	3b10      	subs	r3, #16
 8001734:	4a14      	ldr	r2, [pc, #80]	; (8001788 <DMA_CalcBaseAndBitshift+0x64>)
 8001736:	fba2 2303 	umull	r2, r3, r2, r3
 800173a:	091b      	lsrs	r3, r3, #4
 800173c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800173e:	4a13      	ldr	r2, [pc, #76]	; (800178c <DMA_CalcBaseAndBitshift+0x68>)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4413      	add	r3, r2
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d909      	bls.n	8001766 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800175a:	f023 0303 	bic.w	r3, r3, #3
 800175e:	1d1a      	adds	r2, r3, #4
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	659a      	str	r2, [r3, #88]	; 0x58
 8001764:	e007      	b.n	8001776 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800176e:	f023 0303 	bic.w	r3, r3, #3
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	aaaaaaab 	.word	0xaaaaaaab
 800178c:	080038a8 	.word	0x080038a8

08001790 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d11f      	bne.n	80017ea <DMA_CheckFifoParam+0x5a>
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d856      	bhi.n	800185e <DMA_CheckFifoParam+0xce>
 80017b0:	a201      	add	r2, pc, #4	; (adr r2, 80017b8 <DMA_CheckFifoParam+0x28>)
 80017b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b6:	bf00      	nop
 80017b8:	080017c9 	.word	0x080017c9
 80017bc:	080017db 	.word	0x080017db
 80017c0:	080017c9 	.word	0x080017c9
 80017c4:	0800185f 	.word	0x0800185f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d046      	beq.n	8001862 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017d8:	e043      	b.n	8001862 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017e2:	d140      	bne.n	8001866 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017e8:	e03d      	b.n	8001866 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017f2:	d121      	bne.n	8001838 <DMA_CheckFifoParam+0xa8>
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d837      	bhi.n	800186a <DMA_CheckFifoParam+0xda>
 80017fa:	a201      	add	r2, pc, #4	; (adr r2, 8001800 <DMA_CheckFifoParam+0x70>)
 80017fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001800:	08001811 	.word	0x08001811
 8001804:	08001817 	.word	0x08001817
 8001808:	08001811 	.word	0x08001811
 800180c:	08001829 	.word	0x08001829
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
      break;
 8001814:	e030      	b.n	8001878 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d025      	beq.n	800186e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001826:	e022      	b.n	800186e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001830:	d11f      	bne.n	8001872 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001836:	e01c      	b.n	8001872 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d903      	bls.n	8001846 <DMA_CheckFifoParam+0xb6>
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	2b03      	cmp	r3, #3
 8001842:	d003      	beq.n	800184c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001844:	e018      	b.n	8001878 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	73fb      	strb	r3, [r7, #15]
      break;
 800184a:	e015      	b.n	8001878 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00e      	beq.n	8001876 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
      break;
 800185c:	e00b      	b.n	8001876 <DMA_CheckFifoParam+0xe6>
      break;
 800185e:	bf00      	nop
 8001860:	e00a      	b.n	8001878 <DMA_CheckFifoParam+0xe8>
      break;
 8001862:	bf00      	nop
 8001864:	e008      	b.n	8001878 <DMA_CheckFifoParam+0xe8>
      break;
 8001866:	bf00      	nop
 8001868:	e006      	b.n	8001878 <DMA_CheckFifoParam+0xe8>
      break;
 800186a:	bf00      	nop
 800186c:	e004      	b.n	8001878 <DMA_CheckFifoParam+0xe8>
      break;
 800186e:	bf00      	nop
 8001870:	e002      	b.n	8001878 <DMA_CheckFifoParam+0xe8>
      break;   
 8001872:	bf00      	nop
 8001874:	e000      	b.n	8001878 <DMA_CheckFifoParam+0xe8>
      break;
 8001876:	bf00      	nop
    }
  } 
  
  return status; 
 8001878:	7bfb      	ldrb	r3, [r7, #15]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop

08001888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	e159      	b.n	8001b58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018a4:	2201      	movs	r2, #1
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	429a      	cmp	r2, r3
 80018be:	f040 8148 	bne.w	8001b52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d005      	beq.n	80018da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d130      	bne.n	800193c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	2203      	movs	r2, #3
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001910:	2201      	movs	r2, #1
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 0201 	and.w	r2, r3, #1
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b03      	cmp	r3, #3
 8001946:	d017      	beq.n	8001978 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	2203      	movs	r2, #3
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d123      	bne.n	80019cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	08da      	lsrs	r2, r3, #3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3208      	adds	r2, #8
 800198c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001990:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	220f      	movs	r2, #15
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	691a      	ldr	r2, [r3, #16]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	08da      	lsrs	r2, r3, #3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3208      	adds	r2, #8
 80019c6:	69b9      	ldr	r1, [r7, #24]
 80019c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	2203      	movs	r2, #3
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0203 	and.w	r2, r3, #3
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 80a2 	beq.w	8001b52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b57      	ldr	r3, [pc, #348]	; (8001b70 <HAL_GPIO_Init+0x2e8>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	4a56      	ldr	r2, [pc, #344]	; (8001b70 <HAL_GPIO_Init+0x2e8>)
 8001a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1e:	4b54      	ldr	r3, [pc, #336]	; (8001b70 <HAL_GPIO_Init+0x2e8>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a2a:	4a52      	ldr	r2, [pc, #328]	; (8001b74 <HAL_GPIO_Init+0x2ec>)
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	089b      	lsrs	r3, r3, #2
 8001a30:	3302      	adds	r3, #2
 8001a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	220f      	movs	r2, #15
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a49      	ldr	r2, [pc, #292]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d019      	beq.n	8001a8a <HAL_GPIO_Init+0x202>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a48      	ldr	r2, [pc, #288]	; (8001b7c <HAL_GPIO_Init+0x2f4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d013      	beq.n	8001a86 <HAL_GPIO_Init+0x1fe>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a47      	ldr	r2, [pc, #284]	; (8001b80 <HAL_GPIO_Init+0x2f8>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d00d      	beq.n	8001a82 <HAL_GPIO_Init+0x1fa>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a46      	ldr	r2, [pc, #280]	; (8001b84 <HAL_GPIO_Init+0x2fc>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d007      	beq.n	8001a7e <HAL_GPIO_Init+0x1f6>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a45      	ldr	r2, [pc, #276]	; (8001b88 <HAL_GPIO_Init+0x300>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d101      	bne.n	8001a7a <HAL_GPIO_Init+0x1f2>
 8001a76:	2304      	movs	r3, #4
 8001a78:	e008      	b.n	8001a8c <HAL_GPIO_Init+0x204>
 8001a7a:	2307      	movs	r3, #7
 8001a7c:	e006      	b.n	8001a8c <HAL_GPIO_Init+0x204>
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e004      	b.n	8001a8c <HAL_GPIO_Init+0x204>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e002      	b.n	8001a8c <HAL_GPIO_Init+0x204>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <HAL_GPIO_Init+0x204>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	69fa      	ldr	r2, [r7, #28]
 8001a8e:	f002 0203 	and.w	r2, r2, #3
 8001a92:	0092      	lsls	r2, r2, #2
 8001a94:	4093      	lsls	r3, r2
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a9c:	4935      	ldr	r1, [pc, #212]	; (8001b74 <HAL_GPIO_Init+0x2ec>)
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aaa:	4b38      	ldr	r3, [pc, #224]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ace:	4a2f      	ldr	r2, [pc, #188]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ad4:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001af8:	4a24      	ldr	r2, [pc, #144]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001afe:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b22:	4a1a      	ldr	r2, [pc, #104]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b4c:	4a0f      	ldr	r2, [pc, #60]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3301      	adds	r3, #1
 8001b56:	61fb      	str	r3, [r7, #28]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	2b0f      	cmp	r3, #15
 8001b5c:	f67f aea2 	bls.w	80018a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3724      	adds	r7, #36	; 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40013800 	.word	0x40013800
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	40020400 	.word	0x40020400
 8001b80:	40020800 	.word	0x40020800
 8001b84:	40020c00 	.word	0x40020c00
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40013c00 	.word	0x40013c00

08001b90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	887b      	ldrh	r3, [r7, #2]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
 8001bac:	e001      	b.n	8001bb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd0:	787b      	ldrb	r3, [r7, #1]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bdc:	e003      	b.n	8001be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bde:	887b      	ldrh	r3, [r7, #2]
 8001be0:	041a      	lsls	r2, r3, #16
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	619a      	str	r2, [r3, #24]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b085      	sub	sp, #20
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c04:	887a      	ldrh	r2, [r7, #2]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	041a      	lsls	r2, r3, #16
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	43d9      	mvns	r1, r3
 8001c10:	887b      	ldrh	r3, [r7, #2]
 8001c12:	400b      	ands	r3, r1
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	619a      	str	r2, [r3, #24]
}
 8001c1a:	bf00      	nop
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e264      	b.n	8002104 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d075      	beq.n	8001d32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c46:	4ba3      	ldr	r3, [pc, #652]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d00c      	beq.n	8001c6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c52:	4ba0      	ldr	r3, [pc, #640]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d112      	bne.n	8001c84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c5e:	4b9d      	ldr	r3, [pc, #628]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c6a:	d10b      	bne.n	8001c84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6c:	4b99      	ldr	r3, [pc, #612]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d05b      	beq.n	8001d30 <HAL_RCC_OscConfig+0x108>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d157      	bne.n	8001d30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e23f      	b.n	8002104 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c8c:	d106      	bne.n	8001c9c <HAL_RCC_OscConfig+0x74>
 8001c8e:	4b91      	ldr	r3, [pc, #580]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a90      	ldr	r2, [pc, #576]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e01d      	b.n	8001cd8 <HAL_RCC_OscConfig+0xb0>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x98>
 8001ca6:	4b8b      	ldr	r3, [pc, #556]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a8a      	ldr	r2, [pc, #552]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b88      	ldr	r3, [pc, #544]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a87      	ldr	r2, [pc, #540]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e00b      	b.n	8001cd8 <HAL_RCC_OscConfig+0xb0>
 8001cc0:	4b84      	ldr	r3, [pc, #528]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a83      	ldr	r2, [pc, #524]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b81      	ldr	r3, [pc, #516]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a80      	ldr	r2, [pc, #512]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff f8b2 	bl	8000e48 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff f8ae 	bl	8000e48 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e204      	b.n	8002104 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfa:	4b76      	ldr	r3, [pc, #472]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xc0>
 8001d06:	e014      	b.n	8001d32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7ff f89e 	bl	8000e48 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff f89a 	bl	8000e48 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e1f0      	b.n	8002104 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d22:	4b6c      	ldr	r3, [pc, #432]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0xe8>
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d063      	beq.n	8001e06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d3e:	4b65      	ldr	r3, [pc, #404]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00b      	beq.n	8001d62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d4a:	4b62      	ldr	r3, [pc, #392]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d11c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d56:	4b5f      	ldr	r3, [pc, #380]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d116      	bne.n	8001d90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d62:	4b5c      	ldr	r3, [pc, #368]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d005      	beq.n	8001d7a <HAL_RCC_OscConfig+0x152>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d001      	beq.n	8001d7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e1c4      	b.n	8002104 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7a:	4b56      	ldr	r3, [pc, #344]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4952      	ldr	r1, [pc, #328]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8e:	e03a      	b.n	8001e06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d020      	beq.n	8001dda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d98:	4b4f      	ldr	r3, [pc, #316]	; (8001ed8 <HAL_RCC_OscConfig+0x2b0>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9e:	f7ff f853 	bl	8000e48 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001da6:	f7ff f84f 	bl	8000e48 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e1a5      	b.n	8002104 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db8:	4b46      	ldr	r3, [pc, #280]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc4:	4b43      	ldr	r3, [pc, #268]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4940      	ldr	r1, [pc, #256]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]
 8001dd8:	e015      	b.n	8001e06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dda:	4b3f      	ldr	r3, [pc, #252]	; (8001ed8 <HAL_RCC_OscConfig+0x2b0>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7ff f832 	bl	8000e48 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001de8:	f7ff f82e 	bl	8000e48 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e184      	b.n	8002104 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfa:	4b36      	ldr	r3, [pc, #216]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d030      	beq.n	8001e74 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d016      	beq.n	8001e48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1a:	4b30      	ldr	r3, [pc, #192]	; (8001edc <HAL_RCC_OscConfig+0x2b4>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e20:	f7ff f812 	bl	8000e48 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e28:	f7ff f80e 	bl	8000e48 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e164      	b.n	8002104 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3a:	4b26      	ldr	r3, [pc, #152]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0x200>
 8001e46:	e015      	b.n	8001e74 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e48:	4b24      	ldr	r3, [pc, #144]	; (8001edc <HAL_RCC_OscConfig+0x2b4>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4e:	f7fe fffb 	bl	8000e48 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e56:	f7fe fff7 	bl	8000e48 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e14d      	b.n	8002104 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e68:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f0      	bne.n	8001e56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 80a0 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e86:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10f      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_RCC_OscConfig+0x2b8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d121      	bne.n	8001f02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <HAL_RCC_OscConfig+0x2b8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a07      	ldr	r2, [pc, #28]	; (8001ee0 <HAL_RCC_OscConfig+0x2b8>)
 8001ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eca:	f7fe ffbd 	bl	8000e48 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed0:	e011      	b.n	8001ef6 <HAL_RCC_OscConfig+0x2ce>
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	42470000 	.word	0x42470000
 8001edc:	42470e80 	.word	0x42470e80
 8001ee0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee4:	f7fe ffb0 	bl	8000e48 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e106      	b.n	8002104 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef6:	4b85      	ldr	r3, [pc, #532]	; (800210c <HAL_RCC_OscConfig+0x4e4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d106      	bne.n	8001f18 <HAL_RCC_OscConfig+0x2f0>
 8001f0a:	4b81      	ldr	r3, [pc, #516]	; (8002110 <HAL_RCC_OscConfig+0x4e8>)
 8001f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0e:	4a80      	ldr	r2, [pc, #512]	; (8002110 <HAL_RCC_OscConfig+0x4e8>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6713      	str	r3, [r2, #112]	; 0x70
 8001f16:	e01c      	b.n	8001f52 <HAL_RCC_OscConfig+0x32a>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b05      	cmp	r3, #5
 8001f1e:	d10c      	bne.n	8001f3a <HAL_RCC_OscConfig+0x312>
 8001f20:	4b7b      	ldr	r3, [pc, #492]	; (8002110 <HAL_RCC_OscConfig+0x4e8>)
 8001f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f24:	4a7a      	ldr	r2, [pc, #488]	; (8002110 <HAL_RCC_OscConfig+0x4e8>)
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f2c:	4b78      	ldr	r3, [pc, #480]	; (8002110 <HAL_RCC_OscConfig+0x4e8>)
 8001f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f30:	4a77      	ldr	r2, [pc, #476]	; (8002110 <HAL_RCC_OscConfig+0x4e8>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6713      	str	r3, [r2, #112]	; 0x70
 8001f38:	e00b      	b.n	8001f52 <HAL_RCC_OscConfig+0x32a>
 8001f3a:	4b75      	ldr	r3, [pc, #468]	; (8002110 <HAL_RCC_OscConfig+0x4e8>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3e:	4a74      	ldr	r2, [pc, #464]	; (8002110 <HAL_RCC_OscConfig+0x4e8>)
 8001f40:	f023 0301 	bic.w	r3, r3, #1
 8001f44:	6713      	str	r3, [r2, #112]	; 0x70
 8001f46:	4b72      	ldr	r3, [pc, #456]	; (8002110 <HAL_RCC_OscConfig+0x4e8>)
 8001f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4a:	4a71      	ldr	r2, [pc, #452]	; (8002110 <HAL_RCC_OscConfig+0x4e8>)
 8001f4c:	f023 0304 	bic.w	r3, r3, #4
 8001f50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d015      	beq.n	8001f86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5a:	f7fe ff75 	bl	8000e48 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f60:	e00a      	b.n	8001f78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7fe ff71 	bl	8000e48 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e0c5      	b.n	8002104 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f78:	4b65      	ldr	r3, [pc, #404]	; (8002110 <HAL_RCC_OscConfig+0x4e8>)
 8001f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0ee      	beq.n	8001f62 <HAL_RCC_OscConfig+0x33a>
 8001f84:	e014      	b.n	8001fb0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f86:	f7fe ff5f 	bl	8000e48 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f8c:	e00a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7fe ff5b 	bl	8000e48 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e0af      	b.n	8002104 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa4:	4b5a      	ldr	r3, [pc, #360]	; (8002110 <HAL_RCC_OscConfig+0x4e8>)
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1ee      	bne.n	8001f8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fb0:	7dfb      	ldrb	r3, [r7, #23]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d105      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb6:	4b56      	ldr	r3, [pc, #344]	; (8002110 <HAL_RCC_OscConfig+0x4e8>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	4a55      	ldr	r2, [pc, #340]	; (8002110 <HAL_RCC_OscConfig+0x4e8>)
 8001fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 809b 	beq.w	8002102 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fcc:	4b50      	ldr	r3, [pc, #320]	; (8002110 <HAL_RCC_OscConfig+0x4e8>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d05c      	beq.n	8002092 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d141      	bne.n	8002064 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe0:	4b4c      	ldr	r3, [pc, #304]	; (8002114 <HAL_RCC_OscConfig+0x4ec>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe6:	f7fe ff2f 	bl	8000e48 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fee:	f7fe ff2b 	bl	8000e48 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e081      	b.n	8002104 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002000:	4b43      	ldr	r3, [pc, #268]	; (8002110 <HAL_RCC_OscConfig+0x4e8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69da      	ldr	r2, [r3, #28]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	019b      	lsls	r3, r3, #6
 800201c:	431a      	orrs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002022:	085b      	lsrs	r3, r3, #1
 8002024:	3b01      	subs	r3, #1
 8002026:	041b      	lsls	r3, r3, #16
 8002028:	431a      	orrs	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	061b      	lsls	r3, r3, #24
 8002030:	4937      	ldr	r1, [pc, #220]	; (8002110 <HAL_RCC_OscConfig+0x4e8>)
 8002032:	4313      	orrs	r3, r2
 8002034:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002036:	4b37      	ldr	r3, [pc, #220]	; (8002114 <HAL_RCC_OscConfig+0x4ec>)
 8002038:	2201      	movs	r2, #1
 800203a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7fe ff04 	bl	8000e48 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002044:	f7fe ff00 	bl	8000e48 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e056      	b.n	8002104 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002056:	4b2e      	ldr	r3, [pc, #184]	; (8002110 <HAL_RCC_OscConfig+0x4e8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0x41c>
 8002062:	e04e      	b.n	8002102 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002064:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <HAL_RCC_OscConfig+0x4ec>)
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7fe feed 	bl	8000e48 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002072:	f7fe fee9 	bl	8000e48 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e03f      	b.n	8002104 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002084:	4b22      	ldr	r3, [pc, #136]	; (8002110 <HAL_RCC_OscConfig+0x4e8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f0      	bne.n	8002072 <HAL_RCC_OscConfig+0x44a>
 8002090:	e037      	b.n	8002102 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e032      	b.n	8002104 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800209e:	4b1c      	ldr	r3, [pc, #112]	; (8002110 <HAL_RCC_OscConfig+0x4e8>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d028      	beq.n	80020fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d121      	bne.n	80020fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d11a      	bne.n	80020fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020ce:	4013      	ands	r3, r2
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020d4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d111      	bne.n	80020fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	085b      	lsrs	r3, r3, #1
 80020e6:	3b01      	subs	r3, #1
 80020e8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d001      	beq.n	8002102 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40007000 	.word	0x40007000
 8002110:	40023800 	.word	0x40023800
 8002114:	42470060 	.word	0x42470060

08002118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0cc      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800212c:	4b68      	ldr	r3, [pc, #416]	; (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d90c      	bls.n	8002154 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b65      	ldr	r3, [pc, #404]	; (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b63      	ldr	r3, [pc, #396]	; (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0b8      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d020      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800216c:	4b59      	ldr	r3, [pc, #356]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	4a58      	ldr	r2, [pc, #352]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002176:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002184:	4b53      	ldr	r3, [pc, #332]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4a52      	ldr	r2, [pc, #328]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800218e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002190:	4b50      	ldr	r3, [pc, #320]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	494d      	ldr	r1, [pc, #308]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d044      	beq.n	8002238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d107      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b6:	4b47      	ldr	r3, [pc, #284]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d119      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e07f      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d003      	beq.n	80021d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d6:	4b3f      	ldr	r3, [pc, #252]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d109      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e06f      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e6:	4b3b      	ldr	r3, [pc, #236]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e067      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f6:	4b37      	ldr	r3, [pc, #220]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f023 0203 	bic.w	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4934      	ldr	r1, [pc, #208]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	4313      	orrs	r3, r2
 8002206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002208:	f7fe fe1e 	bl	8000e48 <HAL_GetTick>
 800220c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220e:	e00a      	b.n	8002226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002210:	f7fe fe1a 	bl	8000e48 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f241 3288 	movw	r2, #5000	; 0x1388
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e04f      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002226:	4b2b      	ldr	r3, [pc, #172]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 020c 	and.w	r2, r3, #12
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	429a      	cmp	r2, r3
 8002236:	d1eb      	bne.n	8002210 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002238:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d20c      	bcs.n	8002260 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800224e:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e032      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800226c:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4916      	ldr	r1, [pc, #88]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800228a:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	490e      	ldr	r1, [pc, #56]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800229e:	f000 f821 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 80022a2:	4602      	mov	r2, r0
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	490a      	ldr	r1, [pc, #40]	; (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	5ccb      	ldrb	r3, [r1, r3]
 80022b2:	fa22 f303 	lsr.w	r3, r2, r3
 80022b6:	4a09      	ldr	r2, [pc, #36]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80022b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <HAL_RCC_ClockConfig+0x1c8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe fd7e 	bl	8000dc0 <HAL_InitTick>

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023c00 	.word	0x40023c00
 80022d4:	40023800 	.word	0x40023800
 80022d8:	08003890 	.word	0x08003890
 80022dc:	20000004 	.word	0x20000004
 80022e0:	20000008 	.word	0x20000008

080022e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	607b      	str	r3, [r7, #4]
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	2300      	movs	r3, #0
 80022f6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022fc:	4b67      	ldr	r3, [pc, #412]	; (800249c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 030c 	and.w	r3, r3, #12
 8002304:	2b08      	cmp	r3, #8
 8002306:	d00d      	beq.n	8002324 <HAL_RCC_GetSysClockFreq+0x40>
 8002308:	2b08      	cmp	r3, #8
 800230a:	f200 80bd 	bhi.w	8002488 <HAL_RCC_GetSysClockFreq+0x1a4>
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0x34>
 8002312:	2b04      	cmp	r3, #4
 8002314:	d003      	beq.n	800231e <HAL_RCC_GetSysClockFreq+0x3a>
 8002316:	e0b7      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002318:	4b61      	ldr	r3, [pc, #388]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800231a:	60bb      	str	r3, [r7, #8]
       break;
 800231c:	e0b7      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800231e:	4b61      	ldr	r3, [pc, #388]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002320:	60bb      	str	r3, [r7, #8]
      break;
 8002322:	e0b4      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002324:	4b5d      	ldr	r3, [pc, #372]	; (800249c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800232c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800232e:	4b5b      	ldr	r3, [pc, #364]	; (800249c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d04d      	beq.n	80023d6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800233a:	4b58      	ldr	r3, [pc, #352]	; (800249c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	099b      	lsrs	r3, r3, #6
 8002340:	461a      	mov	r2, r3
 8002342:	f04f 0300 	mov.w	r3, #0
 8002346:	f240 10ff 	movw	r0, #511	; 0x1ff
 800234a:	f04f 0100 	mov.w	r1, #0
 800234e:	ea02 0800 	and.w	r8, r2, r0
 8002352:	ea03 0901 	and.w	r9, r3, r1
 8002356:	4640      	mov	r0, r8
 8002358:	4649      	mov	r1, r9
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	014b      	lsls	r3, r1, #5
 8002364:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002368:	0142      	lsls	r2, r0, #5
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	ebb0 0008 	subs.w	r0, r0, r8
 8002372:	eb61 0109 	sbc.w	r1, r1, r9
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	f04f 0300 	mov.w	r3, #0
 800237e:	018b      	lsls	r3, r1, #6
 8002380:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002384:	0182      	lsls	r2, r0, #6
 8002386:	1a12      	subs	r2, r2, r0
 8002388:	eb63 0301 	sbc.w	r3, r3, r1
 800238c:	f04f 0000 	mov.w	r0, #0
 8002390:	f04f 0100 	mov.w	r1, #0
 8002394:	00d9      	lsls	r1, r3, #3
 8002396:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800239a:	00d0      	lsls	r0, r2, #3
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	eb12 0208 	adds.w	r2, r2, r8
 80023a4:	eb43 0309 	adc.w	r3, r3, r9
 80023a8:	f04f 0000 	mov.w	r0, #0
 80023ac:	f04f 0100 	mov.w	r1, #0
 80023b0:	0259      	lsls	r1, r3, #9
 80023b2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80023b6:	0250      	lsls	r0, r2, #9
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	461a      	mov	r2, r3
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	f7fd ff0e 	bl	80001e8 <__aeabi_uldivmod>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4613      	mov	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	e04a      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d6:	4b31      	ldr	r3, [pc, #196]	; (800249c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	099b      	lsrs	r3, r3, #6
 80023dc:	461a      	mov	r2, r3
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023e6:	f04f 0100 	mov.w	r1, #0
 80023ea:	ea02 0400 	and.w	r4, r2, r0
 80023ee:	ea03 0501 	and.w	r5, r3, r1
 80023f2:	4620      	mov	r0, r4
 80023f4:	4629      	mov	r1, r5
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	014b      	lsls	r3, r1, #5
 8002400:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002404:	0142      	lsls	r2, r0, #5
 8002406:	4610      	mov	r0, r2
 8002408:	4619      	mov	r1, r3
 800240a:	1b00      	subs	r0, r0, r4
 800240c:	eb61 0105 	sbc.w	r1, r1, r5
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	f04f 0300 	mov.w	r3, #0
 8002418:	018b      	lsls	r3, r1, #6
 800241a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800241e:	0182      	lsls	r2, r0, #6
 8002420:	1a12      	subs	r2, r2, r0
 8002422:	eb63 0301 	sbc.w	r3, r3, r1
 8002426:	f04f 0000 	mov.w	r0, #0
 800242a:	f04f 0100 	mov.w	r1, #0
 800242e:	00d9      	lsls	r1, r3, #3
 8002430:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002434:	00d0      	lsls	r0, r2, #3
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	1912      	adds	r2, r2, r4
 800243c:	eb45 0303 	adc.w	r3, r5, r3
 8002440:	f04f 0000 	mov.w	r0, #0
 8002444:	f04f 0100 	mov.w	r1, #0
 8002448:	0299      	lsls	r1, r3, #10
 800244a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800244e:	0290      	lsls	r0, r2, #10
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4610      	mov	r0, r2
 8002456:	4619      	mov	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	461a      	mov	r2, r3
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	f7fd fec2 	bl	80001e8 <__aeabi_uldivmod>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4613      	mov	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	0c1b      	lsrs	r3, r3, #16
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	3301      	adds	r3, #1
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	fbb2 f3f3 	udiv	r3, r2, r3
 8002484:	60bb      	str	r3, [r7, #8]
      break;
 8002486:	e002      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800248a:	60bb      	str	r3, [r7, #8]
      break;
 800248c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800248e:	68bb      	ldr	r3, [r7, #8]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800
 80024a0:	00f42400 	.word	0x00f42400
 80024a4:	007a1200 	.word	0x007a1200

080024a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024ac:	4b03      	ldr	r3, [pc, #12]	; (80024bc <HAL_RCC_GetHCLKFreq+0x14>)
 80024ae:	681b      	ldr	r3, [r3, #0]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000004 	.word	0x20000004

080024c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024c4:	f7ff fff0 	bl	80024a8 <HAL_RCC_GetHCLKFreq>
 80024c8:	4602      	mov	r2, r0
 80024ca:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	0a9b      	lsrs	r3, r3, #10
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024d6:	5ccb      	ldrb	r3, [r1, r3]
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	080038a0 	.word	0x080038a0

080024e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024ec:	f7ff ffdc 	bl	80024a8 <HAL_RCC_GetHCLKFreq>
 80024f0:	4602      	mov	r2, r0
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	0b5b      	lsrs	r3, r3, #13
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	4903      	ldr	r1, [pc, #12]	; (800250c <HAL_RCC_GetPCLK2Freq+0x24>)
 80024fe:	5ccb      	ldrb	r3, [r1, r3]
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002504:	4618      	mov	r0, r3
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40023800 	.word	0x40023800
 800250c:	080038a0 	.word	0x080038a0

08002510 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e03f      	b.n	80025a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d106      	bne.n	800253c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7fe fb24 	bl	8000b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2224      	movs	r2, #36	; 0x24
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002552:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 ff31 	bl	80033bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002568:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002578:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002588:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b08a      	sub	sp, #40	; 0x28
 80025ae:	af02      	add	r7, sp, #8
 80025b0:	60f8      	str	r0, [r7, #12]
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	603b      	str	r3, [r7, #0]
 80025b6:	4613      	mov	r3, r2
 80025b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b20      	cmp	r3, #32
 80025c8:	d17c      	bne.n	80026c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <HAL_UART_Transmit+0x2c>
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e075      	b.n	80026c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_UART_Transmit+0x3e>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e06e      	b.n	80026c6 <HAL_UART_Transmit+0x11c>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2221      	movs	r2, #33	; 0x21
 80025fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025fe:	f7fe fc23 	bl	8000e48 <HAL_GetTick>
 8002602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	88fa      	ldrh	r2, [r7, #6]
 8002608:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	88fa      	ldrh	r2, [r7, #6]
 800260e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002618:	d108      	bne.n	800262c <HAL_UART_Transmit+0x82>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d104      	bne.n	800262c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	61bb      	str	r3, [r7, #24]
 800262a:	e003      	b.n	8002634 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002630:	2300      	movs	r3, #0
 8002632:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800263c:	e02a      	b.n	8002694 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2200      	movs	r2, #0
 8002646:	2180      	movs	r1, #128	; 0x80
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 fc4c 	bl	8002ee6 <UART_WaitOnFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e036      	b.n	80026c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10b      	bne.n	8002676 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800266c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	3302      	adds	r3, #2
 8002672:	61bb      	str	r3, [r7, #24]
 8002674:	e007      	b.n	8002686 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	781a      	ldrb	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	3301      	adds	r3, #1
 8002684:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800268a:	b29b      	uxth	r3, r3
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1cf      	bne.n	800263e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2200      	movs	r2, #0
 80026a6:	2140      	movs	r1, #64	; 0x40
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 fc1c 	bl	8002ee6 <UART_WaitOnFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e006      	b.n	80026c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	e000      	b.n	80026c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80026c4:	2302      	movs	r3, #2
  }
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3720      	adds	r7, #32
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b084      	sub	sp, #16
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	4613      	mov	r3, r2
 80026da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b20      	cmp	r3, #32
 80026e6:	d11d      	bne.n	8002724 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <HAL_UART_Receive_IT+0x26>
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e016      	b.n	8002726 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_UART_Receive_IT+0x38>
 8002702:	2302      	movs	r3, #2
 8002704:	e00f      	b.n	8002726 <HAL_UART_Receive_IT+0x58>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	461a      	mov	r2, r3
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 fc51 	bl	8002fc2 <UART_Start_Receive_IT>
 8002720:	4603      	mov	r3, r0
 8002722:	e000      	b.n	8002726 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002724:	2302      	movs	r3, #2
  }
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08c      	sub	sp, #48	; 0x30
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	4613      	mov	r3, r2
 800273c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b20      	cmp	r3, #32
 8002748:	d165      	bne.n	8002816 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <HAL_UART_Transmit_DMA+0x26>
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e05e      	b.n	8002818 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_UART_Transmit_DMA+0x38>
 8002764:	2302      	movs	r3, #2
 8002766:	e057      	b.n	8002818 <HAL_UART_Transmit_DMA+0xe8>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	88fa      	ldrh	r2, [r7, #6]
 800277a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	88fa      	ldrh	r2, [r7, #6]
 8002780:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2221      	movs	r2, #33	; 0x21
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002794:	4a22      	ldr	r2, [pc, #136]	; (8002820 <HAL_UART_Transmit_DMA+0xf0>)
 8002796:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279c:	4a21      	ldr	r2, [pc, #132]	; (8002824 <HAL_UART_Transmit_DMA+0xf4>)
 800279e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a4:	4a20      	ldr	r2, [pc, #128]	; (8002828 <HAL_UART_Transmit_DMA+0xf8>)
 80027a6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ac:	2200      	movs	r2, #0
 80027ae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80027b0:	f107 0308 	add.w	r3, r7, #8
 80027b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80027ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027bc:	6819      	ldr	r1, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3304      	adds	r3, #4
 80027c4:	461a      	mov	r2, r3
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	f7fe fd0a 	bl	80011e0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027d4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	3314      	adds	r3, #20
 80027e4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	e853 3f00 	ldrex	r3, [r3]
 80027ec:	617b      	str	r3, [r7, #20]
   return(result);
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	3314      	adds	r3, #20
 80027fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027fe:	627a      	str	r2, [r7, #36]	; 0x24
 8002800:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002802:	6a39      	ldr	r1, [r7, #32]
 8002804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002806:	e841 2300 	strex	r3, r2, [r1]
 800280a:	61fb      	str	r3, [r7, #28]
   return(result);
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1e5      	bne.n	80027de <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	e000      	b.n	8002818 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8002816:	2302      	movs	r3, #2
  }
}
 8002818:	4618      	mov	r0, r3
 800281a:	3730      	adds	r7, #48	; 0x30
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	08002d9d 	.word	0x08002d9d
 8002824:	08002e37 	.word	0x08002e37
 8002828:	08002e53 	.word	0x08002e53

0800282c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b0ba      	sub	sp, #232	; 0xe8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002852:	2300      	movs	r3, #0
 8002854:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002858:	2300      	movs	r3, #0
 800285a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800285e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800286a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10f      	bne.n	8002892 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002876:	f003 0320 	and.w	r3, r3, #32
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <HAL_UART_IRQHandler+0x66>
 800287e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fcda 	bl	8003244 <UART_Receive_IT>
      return;
 8002890:	e256      	b.n	8002d40 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 80de 	beq.w	8002a58 <HAL_UART_IRQHandler+0x22c>
 800289c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d106      	bne.n	80028b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80d1 	beq.w	8002a58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <HAL_UART_IRQHandler+0xae>
 80028c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d005      	beq.n	80028da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f043 0201 	orr.w	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00b      	beq.n	80028fe <HAL_UART_IRQHandler+0xd2>
 80028e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d005      	beq.n	80028fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f043 0202 	orr.w	r2, r3, #2
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00b      	beq.n	8002922 <HAL_UART_IRQHandler+0xf6>
 800290a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f043 0204 	orr.w	r2, r3, #4
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d011      	beq.n	8002952 <HAL_UART_IRQHandler+0x126>
 800292e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002932:	f003 0320 	and.w	r3, r3, #32
 8002936:	2b00      	cmp	r3, #0
 8002938:	d105      	bne.n	8002946 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800293a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f043 0208 	orr.w	r2, r3, #8
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 81ed 	beq.w	8002d36 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800295c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002960:	f003 0320 	and.w	r3, r3, #32
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_UART_IRQHandler+0x14e>
 8002968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fc65 	bl	8003244 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002984:	2b40      	cmp	r3, #64	; 0x40
 8002986:	bf0c      	ite	eq
 8002988:	2301      	moveq	r3, #1
 800298a:	2300      	movne	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d103      	bne.n	80029a6 <HAL_UART_IRQHandler+0x17a>
 800299e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d04f      	beq.n	8002a46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 fb6d 	bl	8003086 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b6:	2b40      	cmp	r3, #64	; 0x40
 80029b8:	d141      	bne.n	8002a3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	3314      	adds	r3, #20
 80029c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029c8:	e853 3f00 	ldrex	r3, [r3]
 80029cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80029d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	3314      	adds	r3, #20
 80029e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80029e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80029ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80029f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80029f6:	e841 2300 	strex	r3, r2, [r1]
 80029fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80029fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1d9      	bne.n	80029ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d013      	beq.n	8002a36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	4a7d      	ldr	r2, [pc, #500]	; (8002c08 <HAL_UART_IRQHandler+0x3dc>)
 8002a14:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe fca8 	bl	8001370 <HAL_DMA_Abort_IT>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d016      	beq.n	8002a54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a30:	4610      	mov	r0, r2
 8002a32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a34:	e00e      	b.n	8002a54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f99a 	bl	8002d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a3c:	e00a      	b.n	8002a54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f996 	bl	8002d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a44:	e006      	b.n	8002a54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f992 	bl	8002d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002a52:	e170      	b.n	8002d36 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a54:	bf00      	nop
    return;
 8002a56:	e16e      	b.n	8002d36 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	f040 814a 	bne.w	8002cf6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 8143 	beq.w	8002cf6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 813c 	beq.w	8002cf6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9e:	2b40      	cmp	r3, #64	; 0x40
 8002aa0:	f040 80b4 	bne.w	8002c0c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ab0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 8140 	beq.w	8002d3a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002abe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	f080 8139 	bcs.w	8002d3a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ace:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ada:	f000 8088 	beq.w	8002bee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	330c      	adds	r3, #12
 8002ae4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002aec:	e853 3f00 	ldrex	r3, [r3]
 8002af0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002af4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002af8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002afc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002b0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b1a:	e841 2300 	strex	r3, r2, [r1]
 8002b1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1d9      	bne.n	8002ade <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	3314      	adds	r3, #20
 8002b30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b34:	e853 3f00 	ldrex	r3, [r3]
 8002b38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b3c:	f023 0301 	bic.w	r3, r3, #1
 8002b40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	3314      	adds	r3, #20
 8002b4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b5a:	e841 2300 	strex	r3, r2, [r1]
 8002b5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1e1      	bne.n	8002b2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	3314      	adds	r3, #20
 8002b6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b70:	e853 3f00 	ldrex	r3, [r3]
 8002b74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3314      	adds	r3, #20
 8002b86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b92:	e841 2300 	strex	r3, r2, [r1]
 8002b96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1e3      	bne.n	8002b66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	330c      	adds	r3, #12
 8002bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb6:	e853 3f00 	ldrex	r3, [r3]
 8002bba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bbe:	f023 0310 	bic.w	r3, r3, #16
 8002bc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	330c      	adds	r3, #12
 8002bcc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002bd0:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bd2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bd8:	e841 2300 	strex	r3, r2, [r1]
 8002bdc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1e3      	bne.n	8002bac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fe fb51 	bl	8001290 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f8c0 	bl	8002d84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c04:	e099      	b.n	8002d3a <HAL_UART_IRQHandler+0x50e>
 8002c06:	bf00      	nop
 8002c08:	0800314d 	.word	0x0800314d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 808b 	beq.w	8002d3e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002c28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 8086 	beq.w	8002d3e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	330c      	adds	r3, #12
 8002c38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3c:	e853 3f00 	ldrex	r3, [r3]
 8002c40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	330c      	adds	r3, #12
 8002c52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002c56:	647a      	str	r2, [r7, #68]	; 0x44
 8002c58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c5e:	e841 2300 	strex	r3, r2, [r1]
 8002c62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1e3      	bne.n	8002c32 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3314      	adds	r3, #20
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	e853 3f00 	ldrex	r3, [r3]
 8002c78:	623b      	str	r3, [r7, #32]
   return(result);
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	f023 0301 	bic.w	r3, r3, #1
 8002c80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	3314      	adds	r3, #20
 8002c8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c8e:	633a      	str	r2, [r7, #48]	; 0x30
 8002c90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c96:	e841 2300 	strex	r3, r2, [r1]
 8002c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1e3      	bne.n	8002c6a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	330c      	adds	r3, #12
 8002cb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	e853 3f00 	ldrex	r3, [r3]
 8002cbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0310 	bic.w	r3, r3, #16
 8002cc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	330c      	adds	r3, #12
 8002cd0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002cd4:	61fa      	str	r2, [r7, #28]
 8002cd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd8:	69b9      	ldr	r1, [r7, #24]
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	e841 2300 	strex	r3, r2, [r1]
 8002ce0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1e3      	bne.n	8002cb0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ce8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cec:	4619      	mov	r1, r3
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f848 	bl	8002d84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cf4:	e023      	b.n	8002d3e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d009      	beq.n	8002d16 <HAL_UART_IRQHandler+0x4ea>
 8002d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fa30 	bl	8003174 <UART_Transmit_IT>
    return;
 8002d14:	e014      	b.n	8002d40 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00e      	beq.n	8002d40 <HAL_UART_IRQHandler+0x514>
 8002d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d008      	beq.n	8002d40 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fa70 	bl	8003214 <UART_EndTransmit_IT>
    return;
 8002d34:	e004      	b.n	8002d40 <HAL_UART_IRQHandler+0x514>
    return;
 8002d36:	bf00      	nop
 8002d38:	e002      	b.n	8002d40 <HAL_UART_IRQHandler+0x514>
      return;
 8002d3a:	bf00      	nop
 8002d3c:	e000      	b.n	8002d40 <HAL_UART_IRQHandler+0x514>
      return;
 8002d3e:	bf00      	nop
  }
}
 8002d40:	37e8      	adds	r7, #232	; 0xe8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop

08002d48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b090      	sub	sp, #64	; 0x40
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d137      	bne.n	8002e28 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dba:	2200      	movs	r2, #0
 8002dbc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	3314      	adds	r3, #20
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	e853 3f00 	ldrex	r3, [r3]
 8002dcc:	623b      	str	r3, [r7, #32]
   return(result);
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	3314      	adds	r3, #20
 8002ddc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dde:	633a      	str	r2, [r7, #48]	; 0x30
 8002de0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002de6:	e841 2300 	strex	r3, r2, [r1]
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1e5      	bne.n	8002dbe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	330c      	adds	r3, #12
 8002df8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	e853 3f00 	ldrex	r3, [r3]
 8002e00:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e08:	637b      	str	r3, [r7, #52]	; 0x34
 8002e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	330c      	adds	r3, #12
 8002e10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e12:	61fa      	str	r2, [r7, #28]
 8002e14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e16:	69b9      	ldr	r1, [r7, #24]
 8002e18:	69fa      	ldr	r2, [r7, #28]
 8002e1a:	e841 2300 	strex	r3, r2, [r1]
 8002e1e:	617b      	str	r3, [r7, #20]
   return(result);
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1e5      	bne.n	8002df2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e26:	e002      	b.n	8002e2e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002e28:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e2a:	f7ff ff8d 	bl	8002d48 <HAL_UART_TxCpltCallback>
}
 8002e2e:	bf00      	nop
 8002e30:	3740      	adds	r7, #64	; 0x40
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b084      	sub	sp, #16
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e42:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f7ff ff89 	bl	8002d5c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e62:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6e:	2b80      	cmp	r3, #128	; 0x80
 8002e70:	bf0c      	ite	eq
 8002e72:	2301      	moveq	r3, #1
 8002e74:	2300      	movne	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b21      	cmp	r3, #33	; 0x21
 8002e84:	d108      	bne.n	8002e98 <UART_DMAError+0x46>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002e92:	68b8      	ldr	r0, [r7, #8]
 8002e94:	f000 f8cf 	bl	8003036 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea2:	2b40      	cmp	r3, #64	; 0x40
 8002ea4:	bf0c      	ite	eq
 8002ea6:	2301      	moveq	r3, #1
 8002ea8:	2300      	movne	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b22      	cmp	r3, #34	; 0x22
 8002eb8:	d108      	bne.n	8002ecc <UART_DMAError+0x7a>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002ec6:	68b8      	ldr	r0, [r7, #8]
 8002ec8:	f000 f8dd 	bl	8003086 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f043 0210 	orr.w	r2, r3, #16
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ed8:	68b8      	ldr	r0, [r7, #8]
 8002eda:	f7ff ff49 	bl	8002d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ede:	bf00      	nop
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b090      	sub	sp, #64	; 0x40
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	603b      	str	r3, [r7, #0]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ef6:	e050      	b.n	8002f9a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efe:	d04c      	beq.n	8002f9a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d007      	beq.n	8002f16 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f06:	f7fd ff9f 	bl	8000e48 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d241      	bcs.n	8002f9a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	330c      	adds	r3, #12
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	e853 3f00 	ldrex	r3, [r3]
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	330c      	adds	r3, #12
 8002f34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f36:	637a      	str	r2, [r7, #52]	; 0x34
 8002f38:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f3e:	e841 2300 	strex	r3, r2, [r1]
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1e5      	bne.n	8002f16 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	3314      	adds	r3, #20
 8002f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	e853 3f00 	ldrex	r3, [r3]
 8002f58:	613b      	str	r3, [r7, #16]
   return(result);
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f023 0301 	bic.w	r3, r3, #1
 8002f60:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	3314      	adds	r3, #20
 8002f68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f6a:	623a      	str	r2, [r7, #32]
 8002f6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6e:	69f9      	ldr	r1, [r7, #28]
 8002f70:	6a3a      	ldr	r2, [r7, #32]
 8002f72:	e841 2300 	strex	r3, r2, [r1]
 8002f76:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1e5      	bne.n	8002f4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e00f      	b.n	8002fba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	bf0c      	ite	eq
 8002faa:	2301      	moveq	r3, #1
 8002fac:	2300      	movne	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d09f      	beq.n	8002ef8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3740      	adds	r7, #64	; 0x40
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b085      	sub	sp, #20
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	60f8      	str	r0, [r7, #12]
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	88fa      	ldrh	r2, [r7, #6]
 8002fda:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	88fa      	ldrh	r2, [r7, #6]
 8002fe0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2222      	movs	r2, #34	; 0x22
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003006:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0220 	orr.w	r2, r2, #32
 8003026:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003036:	b480      	push	{r7}
 8003038:	b089      	sub	sp, #36	; 0x24
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	330c      	adds	r3, #12
 8003044:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	e853 3f00 	ldrex	r3, [r3]
 800304c:	60bb      	str	r3, [r7, #8]
   return(result);
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003054:	61fb      	str	r3, [r7, #28]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	330c      	adds	r3, #12
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	61ba      	str	r2, [r7, #24]
 8003060:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003062:	6979      	ldr	r1, [r7, #20]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	e841 2300 	strex	r3, r2, [r1]
 800306a:	613b      	str	r3, [r7, #16]
   return(result);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1e5      	bne.n	800303e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2220      	movs	r2, #32
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800307a:	bf00      	nop
 800307c:	3724      	adds	r7, #36	; 0x24
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003086:	b480      	push	{r7}
 8003088:	b095      	sub	sp, #84	; 0x54
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	330c      	adds	r3, #12
 8003094:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003098:	e853 3f00 	ldrex	r3, [r3]
 800309c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	330c      	adds	r3, #12
 80030ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030ae:	643a      	str	r2, [r7, #64]	; 0x40
 80030b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030b6:	e841 2300 	strex	r3, r2, [r1]
 80030ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1e5      	bne.n	800308e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3314      	adds	r3, #20
 80030c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	e853 3f00 	ldrex	r3, [r3]
 80030d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	f023 0301 	bic.w	r3, r3, #1
 80030d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	3314      	adds	r3, #20
 80030e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ea:	e841 2300 	strex	r3, r2, [r1]
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1e5      	bne.n	80030c2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d119      	bne.n	8003132 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	330c      	adds	r3, #12
 8003104:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	e853 3f00 	ldrex	r3, [r3]
 800310c:	60bb      	str	r3, [r7, #8]
   return(result);
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	f023 0310 	bic.w	r3, r3, #16
 8003114:	647b      	str	r3, [r7, #68]	; 0x44
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	330c      	adds	r3, #12
 800311c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800311e:	61ba      	str	r2, [r7, #24]
 8003120:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003122:	6979      	ldr	r1, [r7, #20]
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	e841 2300 	strex	r3, r2, [r1]
 800312a:	613b      	str	r3, [r7, #16]
   return(result);
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1e5      	bne.n	80030fe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003140:	bf00      	nop
 8003142:	3754      	adds	r7, #84	; 0x54
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003158:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f7ff fe02 	bl	8002d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800316c:	bf00      	nop
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b21      	cmp	r3, #33	; 0x21
 8003186:	d13e      	bne.n	8003206 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003190:	d114      	bne.n	80031bc <UART_Transmit_IT+0x48>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d110      	bne.n	80031bc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	1c9a      	adds	r2, r3, #2
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	621a      	str	r2, [r3, #32]
 80031ba:	e008      	b.n	80031ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	1c59      	adds	r1, r3, #1
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6211      	str	r1, [r2, #32]
 80031c6:	781a      	ldrb	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	4619      	mov	r1, r3
 80031dc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10f      	bne.n	8003202 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003200:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	e000      	b.n	8003208 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003206:	2302      	movs	r3, #2
  }
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800322a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff fd87 	bl	8002d48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08c      	sub	sp, #48	; 0x30
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b22      	cmp	r3, #34	; 0x22
 8003256:	f040 80ab 	bne.w	80033b0 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003262:	d117      	bne.n	8003294 <UART_Receive_IT+0x50>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d113      	bne.n	8003294 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800326c:	2300      	movs	r3, #0
 800326e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	b29b      	uxth	r3, r3
 800327e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003282:	b29a      	uxth	r2, r3
 8003284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003286:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	1c9a      	adds	r2, r3, #2
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	629a      	str	r2, [r3, #40]	; 0x28
 8003292:	e026      	b.n	80032e2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800329a:	2300      	movs	r3, #0
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a6:	d007      	beq.n	80032b8 <UART_Receive_IT+0x74>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <UART_Receive_IT+0x82>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d106      	bne.n	80032c6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c2:	701a      	strb	r2, [r3, #0]
 80032c4:	e008      	b.n	80032d8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4619      	mov	r1, r3
 80032f0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d15a      	bne.n	80033ac <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0220 	bic.w	r2, r2, #32
 8003304:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003314:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0201 	bic.w	r2, r2, #1
 8003324:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	2b01      	cmp	r3, #1
 8003334:	d135      	bne.n	80033a2 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	330c      	adds	r3, #12
 8003342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	e853 3f00 	ldrex	r3, [r3]
 800334a:	613b      	str	r3, [r7, #16]
   return(result);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f023 0310 	bic.w	r3, r3, #16
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	330c      	adds	r3, #12
 800335a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335c:	623a      	str	r2, [r7, #32]
 800335e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003360:	69f9      	ldr	r1, [r7, #28]
 8003362:	6a3a      	ldr	r2, [r7, #32]
 8003364:	e841 2300 	strex	r3, r2, [r1]
 8003368:	61bb      	str	r3, [r7, #24]
   return(result);
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1e5      	bne.n	800333c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0310 	and.w	r3, r3, #16
 800337a:	2b10      	cmp	r3, #16
 800337c:	d10a      	bne.n	8003394 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003398:	4619      	mov	r1, r3
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff fcf2 	bl	8002d84 <HAL_UARTEx_RxEventCallback>
 80033a0:	e002      	b.n	80033a8 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7fd fb76 	bl	8000a94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	e002      	b.n	80033b2 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	e000      	b.n	80033b2 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80033b0:	2302      	movs	r3, #2
  }
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3730      	adds	r7, #48	; 0x30
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033c0:	b09f      	sub	sp, #124	; 0x7c
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d2:	68d9      	ldr	r1, [r3, #12]
 80033d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	ea40 0301 	orr.w	r3, r0, r1
 80033dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	431a      	orrs	r2, r3
 80033ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80033f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003400:	f021 010c 	bic.w	r1, r1, #12
 8003404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800340a:	430b      	orrs	r3, r1
 800340c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800340e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341a:	6999      	ldr	r1, [r3, #24]
 800341c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	ea40 0301 	orr.w	r3, r0, r1
 8003424:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	4bc5      	ldr	r3, [pc, #788]	; (8003740 <UART_SetConfig+0x384>)
 800342c:	429a      	cmp	r2, r3
 800342e:	d004      	beq.n	800343a <UART_SetConfig+0x7e>
 8003430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	4bc3      	ldr	r3, [pc, #780]	; (8003744 <UART_SetConfig+0x388>)
 8003436:	429a      	cmp	r2, r3
 8003438:	d103      	bne.n	8003442 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800343a:	f7ff f855 	bl	80024e8 <HAL_RCC_GetPCLK2Freq>
 800343e:	6778      	str	r0, [r7, #116]	; 0x74
 8003440:	e002      	b.n	8003448 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003442:	f7ff f83d 	bl	80024c0 <HAL_RCC_GetPCLK1Freq>
 8003446:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003450:	f040 80b6 	bne.w	80035c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003454:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003456:	461c      	mov	r4, r3
 8003458:	f04f 0500 	mov.w	r5, #0
 800345c:	4622      	mov	r2, r4
 800345e:	462b      	mov	r3, r5
 8003460:	1891      	adds	r1, r2, r2
 8003462:	6439      	str	r1, [r7, #64]	; 0x40
 8003464:	415b      	adcs	r3, r3
 8003466:	647b      	str	r3, [r7, #68]	; 0x44
 8003468:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800346c:	1912      	adds	r2, r2, r4
 800346e:	eb45 0303 	adc.w	r3, r5, r3
 8003472:	f04f 0000 	mov.w	r0, #0
 8003476:	f04f 0100 	mov.w	r1, #0
 800347a:	00d9      	lsls	r1, r3, #3
 800347c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003480:	00d0      	lsls	r0, r2, #3
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	1911      	adds	r1, r2, r4
 8003488:	6639      	str	r1, [r7, #96]	; 0x60
 800348a:	416b      	adcs	r3, r5
 800348c:	667b      	str	r3, [r7, #100]	; 0x64
 800348e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	461a      	mov	r2, r3
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	1891      	adds	r1, r2, r2
 800349a:	63b9      	str	r1, [r7, #56]	; 0x38
 800349c:	415b      	adcs	r3, r3
 800349e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80034a8:	f7fc fe9e 	bl	80001e8 <__aeabi_uldivmod>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4ba5      	ldr	r3, [pc, #660]	; (8003748 <UART_SetConfig+0x38c>)
 80034b2:	fba3 2302 	umull	r2, r3, r3, r2
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	011e      	lsls	r6, r3, #4
 80034ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034bc:	461c      	mov	r4, r3
 80034be:	f04f 0500 	mov.w	r5, #0
 80034c2:	4622      	mov	r2, r4
 80034c4:	462b      	mov	r3, r5
 80034c6:	1891      	adds	r1, r2, r2
 80034c8:	6339      	str	r1, [r7, #48]	; 0x30
 80034ca:	415b      	adcs	r3, r3
 80034cc:	637b      	str	r3, [r7, #52]	; 0x34
 80034ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80034d2:	1912      	adds	r2, r2, r4
 80034d4:	eb45 0303 	adc.w	r3, r5, r3
 80034d8:	f04f 0000 	mov.w	r0, #0
 80034dc:	f04f 0100 	mov.w	r1, #0
 80034e0:	00d9      	lsls	r1, r3, #3
 80034e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034e6:	00d0      	lsls	r0, r2, #3
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	1911      	adds	r1, r2, r4
 80034ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80034f0:	416b      	adcs	r3, r5
 80034f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	461a      	mov	r2, r3
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	1891      	adds	r1, r2, r2
 8003500:	62b9      	str	r1, [r7, #40]	; 0x28
 8003502:	415b      	adcs	r3, r3
 8003504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003506:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800350a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800350e:	f7fc fe6b 	bl	80001e8 <__aeabi_uldivmod>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4b8c      	ldr	r3, [pc, #560]	; (8003748 <UART_SetConfig+0x38c>)
 8003518:	fba3 1302 	umull	r1, r3, r3, r2
 800351c:	095b      	lsrs	r3, r3, #5
 800351e:	2164      	movs	r1, #100	; 0x64
 8003520:	fb01 f303 	mul.w	r3, r1, r3
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	3332      	adds	r3, #50	; 0x32
 800352a:	4a87      	ldr	r2, [pc, #540]	; (8003748 <UART_SetConfig+0x38c>)
 800352c:	fba2 2303 	umull	r2, r3, r2, r3
 8003530:	095b      	lsrs	r3, r3, #5
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003538:	441e      	add	r6, r3
 800353a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800353c:	4618      	mov	r0, r3
 800353e:	f04f 0100 	mov.w	r1, #0
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	1894      	adds	r4, r2, r2
 8003548:	623c      	str	r4, [r7, #32]
 800354a:	415b      	adcs	r3, r3
 800354c:	627b      	str	r3, [r7, #36]	; 0x24
 800354e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003552:	1812      	adds	r2, r2, r0
 8003554:	eb41 0303 	adc.w	r3, r1, r3
 8003558:	f04f 0400 	mov.w	r4, #0
 800355c:	f04f 0500 	mov.w	r5, #0
 8003560:	00dd      	lsls	r5, r3, #3
 8003562:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003566:	00d4      	lsls	r4, r2, #3
 8003568:	4622      	mov	r2, r4
 800356a:	462b      	mov	r3, r5
 800356c:	1814      	adds	r4, r2, r0
 800356e:	653c      	str	r4, [r7, #80]	; 0x50
 8003570:	414b      	adcs	r3, r1
 8003572:	657b      	str	r3, [r7, #84]	; 0x54
 8003574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	461a      	mov	r2, r3
 800357a:	f04f 0300 	mov.w	r3, #0
 800357e:	1891      	adds	r1, r2, r2
 8003580:	61b9      	str	r1, [r7, #24]
 8003582:	415b      	adcs	r3, r3
 8003584:	61fb      	str	r3, [r7, #28]
 8003586:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800358a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800358e:	f7fc fe2b 	bl	80001e8 <__aeabi_uldivmod>
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	4b6c      	ldr	r3, [pc, #432]	; (8003748 <UART_SetConfig+0x38c>)
 8003598:	fba3 1302 	umull	r1, r3, r3, r2
 800359c:	095b      	lsrs	r3, r3, #5
 800359e:	2164      	movs	r1, #100	; 0x64
 80035a0:	fb01 f303 	mul.w	r3, r1, r3
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	3332      	adds	r3, #50	; 0x32
 80035aa:	4a67      	ldr	r2, [pc, #412]	; (8003748 <UART_SetConfig+0x38c>)
 80035ac:	fba2 2303 	umull	r2, r3, r2, r3
 80035b0:	095b      	lsrs	r3, r3, #5
 80035b2:	f003 0207 	and.w	r2, r3, #7
 80035b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4432      	add	r2, r6
 80035bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035be:	e0b9      	b.n	8003734 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035c2:	461c      	mov	r4, r3
 80035c4:	f04f 0500 	mov.w	r5, #0
 80035c8:	4622      	mov	r2, r4
 80035ca:	462b      	mov	r3, r5
 80035cc:	1891      	adds	r1, r2, r2
 80035ce:	6139      	str	r1, [r7, #16]
 80035d0:	415b      	adcs	r3, r3
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035d8:	1912      	adds	r2, r2, r4
 80035da:	eb45 0303 	adc.w	r3, r5, r3
 80035de:	f04f 0000 	mov.w	r0, #0
 80035e2:	f04f 0100 	mov.w	r1, #0
 80035e6:	00d9      	lsls	r1, r3, #3
 80035e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035ec:	00d0      	lsls	r0, r2, #3
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	eb12 0804 	adds.w	r8, r2, r4
 80035f6:	eb43 0905 	adc.w	r9, r3, r5
 80035fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	4618      	mov	r0, r3
 8003600:	f04f 0100 	mov.w	r1, #0
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	008b      	lsls	r3, r1, #2
 800360e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003612:	0082      	lsls	r2, r0, #2
 8003614:	4640      	mov	r0, r8
 8003616:	4649      	mov	r1, r9
 8003618:	f7fc fde6 	bl	80001e8 <__aeabi_uldivmod>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4b49      	ldr	r3, [pc, #292]	; (8003748 <UART_SetConfig+0x38c>)
 8003622:	fba3 2302 	umull	r2, r3, r3, r2
 8003626:	095b      	lsrs	r3, r3, #5
 8003628:	011e      	lsls	r6, r3, #4
 800362a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800362c:	4618      	mov	r0, r3
 800362e:	f04f 0100 	mov.w	r1, #0
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	1894      	adds	r4, r2, r2
 8003638:	60bc      	str	r4, [r7, #8]
 800363a:	415b      	adcs	r3, r3
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003642:	1812      	adds	r2, r2, r0
 8003644:	eb41 0303 	adc.w	r3, r1, r3
 8003648:	f04f 0400 	mov.w	r4, #0
 800364c:	f04f 0500 	mov.w	r5, #0
 8003650:	00dd      	lsls	r5, r3, #3
 8003652:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003656:	00d4      	lsls	r4, r2, #3
 8003658:	4622      	mov	r2, r4
 800365a:	462b      	mov	r3, r5
 800365c:	1814      	adds	r4, r2, r0
 800365e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003660:	414b      	adcs	r3, r1
 8003662:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	4618      	mov	r0, r3
 800366a:	f04f 0100 	mov.w	r1, #0
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	008b      	lsls	r3, r1, #2
 8003678:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800367c:	0082      	lsls	r2, r0, #2
 800367e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003682:	f7fc fdb1 	bl	80001e8 <__aeabi_uldivmod>
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	4b2f      	ldr	r3, [pc, #188]	; (8003748 <UART_SetConfig+0x38c>)
 800368c:	fba3 1302 	umull	r1, r3, r3, r2
 8003690:	095b      	lsrs	r3, r3, #5
 8003692:	2164      	movs	r1, #100	; 0x64
 8003694:	fb01 f303 	mul.w	r3, r1, r3
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	3332      	adds	r3, #50	; 0x32
 800369e:	4a2a      	ldr	r2, [pc, #168]	; (8003748 <UART_SetConfig+0x38c>)
 80036a0:	fba2 2303 	umull	r2, r3, r2, r3
 80036a4:	095b      	lsrs	r3, r3, #5
 80036a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036aa:	441e      	add	r6, r3
 80036ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ae:	4618      	mov	r0, r3
 80036b0:	f04f 0100 	mov.w	r1, #0
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	1894      	adds	r4, r2, r2
 80036ba:	603c      	str	r4, [r7, #0]
 80036bc:	415b      	adcs	r3, r3
 80036be:	607b      	str	r3, [r7, #4]
 80036c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036c4:	1812      	adds	r2, r2, r0
 80036c6:	eb41 0303 	adc.w	r3, r1, r3
 80036ca:	f04f 0400 	mov.w	r4, #0
 80036ce:	f04f 0500 	mov.w	r5, #0
 80036d2:	00dd      	lsls	r5, r3, #3
 80036d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036d8:	00d4      	lsls	r4, r2, #3
 80036da:	4622      	mov	r2, r4
 80036dc:	462b      	mov	r3, r5
 80036de:	eb12 0a00 	adds.w	sl, r2, r0
 80036e2:	eb43 0b01 	adc.w	fp, r3, r1
 80036e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f04f 0100 	mov.w	r1, #0
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	008b      	lsls	r3, r1, #2
 80036fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80036fe:	0082      	lsls	r2, r0, #2
 8003700:	4650      	mov	r0, sl
 8003702:	4659      	mov	r1, fp
 8003704:	f7fc fd70 	bl	80001e8 <__aeabi_uldivmod>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <UART_SetConfig+0x38c>)
 800370e:	fba3 1302 	umull	r1, r3, r3, r2
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	2164      	movs	r1, #100	; 0x64
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	3332      	adds	r3, #50	; 0x32
 8003720:	4a09      	ldr	r2, [pc, #36]	; (8003748 <UART_SetConfig+0x38c>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	f003 020f 	and.w	r2, r3, #15
 800372c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4432      	add	r2, r6
 8003732:	609a      	str	r2, [r3, #8]
}
 8003734:	bf00      	nop
 8003736:	377c      	adds	r7, #124	; 0x7c
 8003738:	46bd      	mov	sp, r7
 800373a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800373e:	bf00      	nop
 8003740:	40011000 	.word	0x40011000
 8003744:	40011400 	.word	0x40011400
 8003748:	51eb851f 	.word	0x51eb851f

0800374c <__libc_init_array>:
 800374c:	b570      	push	{r4, r5, r6, lr}
 800374e:	4d0d      	ldr	r5, [pc, #52]	; (8003784 <__libc_init_array+0x38>)
 8003750:	4c0d      	ldr	r4, [pc, #52]	; (8003788 <__libc_init_array+0x3c>)
 8003752:	1b64      	subs	r4, r4, r5
 8003754:	10a4      	asrs	r4, r4, #2
 8003756:	2600      	movs	r6, #0
 8003758:	42a6      	cmp	r6, r4
 800375a:	d109      	bne.n	8003770 <__libc_init_array+0x24>
 800375c:	4d0b      	ldr	r5, [pc, #44]	; (800378c <__libc_init_array+0x40>)
 800375e:	4c0c      	ldr	r4, [pc, #48]	; (8003790 <__libc_init_array+0x44>)
 8003760:	f000 f820 	bl	80037a4 <_init>
 8003764:	1b64      	subs	r4, r4, r5
 8003766:	10a4      	asrs	r4, r4, #2
 8003768:	2600      	movs	r6, #0
 800376a:	42a6      	cmp	r6, r4
 800376c:	d105      	bne.n	800377a <__libc_init_array+0x2e>
 800376e:	bd70      	pop	{r4, r5, r6, pc}
 8003770:	f855 3b04 	ldr.w	r3, [r5], #4
 8003774:	4798      	blx	r3
 8003776:	3601      	adds	r6, #1
 8003778:	e7ee      	b.n	8003758 <__libc_init_array+0xc>
 800377a:	f855 3b04 	ldr.w	r3, [r5], #4
 800377e:	4798      	blx	r3
 8003780:	3601      	adds	r6, #1
 8003782:	e7f2      	b.n	800376a <__libc_init_array+0x1e>
 8003784:	080038b8 	.word	0x080038b8
 8003788:	080038b8 	.word	0x080038b8
 800378c:	080038b8 	.word	0x080038b8
 8003790:	080038bc 	.word	0x080038bc

08003794 <memset>:
 8003794:	4402      	add	r2, r0
 8003796:	4603      	mov	r3, r0
 8003798:	4293      	cmp	r3, r2
 800379a:	d100      	bne.n	800379e <memset+0xa>
 800379c:	4770      	bx	lr
 800379e:	f803 1b01 	strb.w	r1, [r3], #1
 80037a2:	e7f9      	b.n	8003798 <memset+0x4>

080037a4 <_init>:
 80037a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a6:	bf00      	nop
 80037a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037aa:	bc08      	pop	{r3}
 80037ac:	469e      	mov	lr, r3
 80037ae:	4770      	bx	lr

080037b0 <_fini>:
 80037b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b2:	bf00      	nop
 80037b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b6:	bc08      	pop	{r3}
 80037b8:	469e      	mov	lr, r3
 80037ba:	4770      	bx	lr
