
UARTtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002770  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002908  08002908  00012908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002918  08002918  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002918  08002918  00012918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002920  08002920  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002920  08002920  00012920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002924  08002924  00012924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000010  08002938  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002938  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d93  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015ba  00000000  00000000  00028dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0002a390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  0002aa50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000149e0  00000000  00000000  0002b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008489  00000000  00000000  0003fa78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081b7f  00000000  00000000  00047f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c9a80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a74  00000000  00000000  000c9ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080028f0 	.word	0x080028f0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	080028f0 	.word	0x080028f0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004d4:	f000 fa72 	bl	80009bc <HAL_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_DMA_Init();
 80004d8:	f000 f83c 	bl	8000554 <MX_DMA_Init>
	MX_GPIO_Init();
 80004dc:	f000 f85a 	bl	8000594 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004e0:	f000 f80c 	bl	80004fc <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, RxDataBuffer, 32);
 80004e4:	2220      	movs	r2, #32
 80004e6:	4903      	ldr	r1, [pc, #12]	; (80004f4 <main+0x24>)
 80004e8:	4803      	ldr	r0, [pc, #12]	; (80004f8 <main+0x28>)
 80004ea:	f001 fa0c 	bl	8001906 <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		UARTRecieveIT();
 80004ee:	f000 f8bf 	bl	8000670 <UARTRecieveIT>
 80004f2:	e7fc      	b.n	80004ee <main+0x1e>
 80004f4:	2000002c 	.word	0x2000002c
 80004f8:	200000b8 	.word	0x200000b8

080004fc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <MX_USART2_UART_Init+0x50>)
 8000502:	4a13      	ldr	r2, [pc, #76]	; (8000550 <MX_USART2_UART_Init+0x54>)
 8000504:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 512000;
 8000506:	4b11      	ldr	r3, [pc, #68]	; (800054c <MX_USART2_UART_Init+0x50>)
 8000508:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 800050c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <MX_USART2_UART_Init+0x50>)
 8000510:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000514:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000516:	4b0d      	ldr	r3, [pc, #52]	; (800054c <MX_USART2_UART_Init+0x50>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 800051c:	4b0b      	ldr	r3, [pc, #44]	; (800054c <MX_USART2_UART_Init+0x50>)
 800051e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000522:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000524:	4b09      	ldr	r3, [pc, #36]	; (800054c <MX_USART2_UART_Init+0x50>)
 8000526:	220c      	movs	r2, #12
 8000528:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <MX_USART2_UART_Init+0x50>)
 800052c:	2200      	movs	r2, #0
 800052e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <MX_USART2_UART_Init+0x50>)
 8000532:	2200      	movs	r2, #0
 8000534:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000536:	4805      	ldr	r0, [pc, #20]	; (800054c <MX_USART2_UART_Init+0x50>)
 8000538:	f001 f998 	bl	800186c <HAL_UART_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_USART2_UART_Init+0x4a>
		Error_Handler();
 8000542:	f000 f911 	bl	8000768 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	200000b8 	.word	0x200000b8
 8000550:	40004400 	.word	0x40004400

08000554 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <MX_DMA_Init+0x3c>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a0b      	ldr	r2, [pc, #44]	; (8000590 <MX_DMA_Init+0x3c>)
 8000564:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <MX_DMA_Init+0x3c>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	2100      	movs	r1, #0
 800057a:	2011      	movs	r0, #17
 800057c:	f000 fb6b 	bl	8000c56 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000580:	2011      	movs	r0, #17
 8000582:	f000 fb84 	bl	8000c8e <HAL_NVIC_EnableIRQ>

}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40023800 	.word	0x40023800

08000594 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]
 80005ae:	4b2d      	ldr	r3, [pc, #180]	; (8000664 <MX_GPIO_Init+0xd0>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a2c      	ldr	r2, [pc, #176]	; (8000664 <MX_GPIO_Init+0xd0>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <MX_GPIO_Init+0xd0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	613b      	str	r3, [r7, #16]
 80005c4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	4b26      	ldr	r3, [pc, #152]	; (8000664 <MX_GPIO_Init+0xd0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a25      	ldr	r2, [pc, #148]	; (8000664 <MX_GPIO_Init+0xd0>)
 80005d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b23      	ldr	r3, [pc, #140]	; (8000664 <MX_GPIO_Init+0xd0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <MX_GPIO_Init+0xd0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a1e      	ldr	r2, [pc, #120]	; (8000664 <MX_GPIO_Init+0xd0>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <MX_GPIO_Init+0xd0>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_GPIO_Init+0xd0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a17      	ldr	r2, [pc, #92]	; (8000664 <MX_GPIO_Init+0xd0>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_GPIO_Init+0xd0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2120      	movs	r1, #32
 800061e:	4812      	ldr	r0, [pc, #72]	; (8000668 <MX_GPIO_Init+0xd4>)
 8000620:	f001 f8d6 	bl	80017d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000628:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800062a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800062e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4619      	mov	r1, r3
 800063a:	480c      	ldr	r0, [pc, #48]	; (800066c <MX_GPIO_Init+0xd8>)
 800063c:	f000 ff44 	bl	80014c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000640:	2320      	movs	r3, #32
 8000642:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	4804      	ldr	r0, [pc, #16]	; (8000668 <MX_GPIO_Init+0xd4>)
 8000658:	f000 ff36 	bl	80014c8 <HAL_GPIO_Init>

}
 800065c:	bf00      	nop
 800065e:	3728      	adds	r7, #40	; 0x28
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40023800 	.word	0x40023800
 8000668:	40020000 	.word	0x40020000
 800066c:	40020800 	.word	0x40020800

08000670 <UARTRecieveIT>:

/* USER CODE BEGIN 4 */
void UARTRecieveIT() {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
	static uint8_t sum = 0;
	static uint8_t str_idx = 0;
	static uint32_t dataPos = 0;
	int8_t data = -1;
 8000676:	23ff      	movs	r3, #255	; 0xff
 8000678:	71fb      	strb	r3, [r7, #7]
	if (huart2.RxXferSize - huart2.RxXferCount != dataPos) {
 800067a:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <UARTRecieveIT+0xb8>)
 800067c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800067e:	461a      	mov	r2, r3
 8000680:	4b29      	ldr	r3, [pc, #164]	; (8000728 <UARTRecieveIT+0xb8>)
 8000682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000684:	b29b      	uxth	r3, r3
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	4a28      	ldr	r2, [pc, #160]	; (800072c <UARTRecieveIT+0xbc>)
 800068a:	6812      	ldr	r2, [r2, #0]
 800068c:	4293      	cmp	r3, r2
 800068e:	d047      	beq.n	8000720 <UARTRecieveIT+0xb0>
		if ((uint8_t)RxDataBuffer[dataPos]==(uint8_t)(~sum)) {
 8000690:	4b26      	ldr	r3, [pc, #152]	; (800072c <UARTRecieveIT+0xbc>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a26      	ldr	r2, [pc, #152]	; (8000730 <UARTRecieveIT+0xc0>)
 8000696:	5cd2      	ldrb	r2, [r2, r3]
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <UARTRecieveIT+0xc4>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	43db      	mvns	r3, r3
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d127      	bne.n	80006f4 <UARTRecieveIT+0x84>
			sum = 0;
 80006a4:	4b23      	ldr	r3, [pc, #140]	; (8000734 <UARTRecieveIT+0xc4>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
			switch (RxDataBuffer[str_idx]) {
 80006aa:	4b23      	ldr	r3, [pc, #140]	; (8000738 <UARTRecieveIT+0xc8>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <UARTRecieveIT+0xc0>)
 80006b2:	5c9b      	ldrb	r3, [r3, r2]
 80006b4:	2b92      	cmp	r3, #146	; 0x92
 80006b6:	d002      	beq.n	80006be <UARTRecieveIT+0x4e>
 80006b8:	2b93      	cmp	r3, #147	; 0x93
 80006ba:	d004      	beq.n	80006c6 <UARTRecieveIT+0x56>
 80006bc:	e007      	b.n	80006ce <UARTRecieveIT+0x5e>
			case 0b10010010:
				//mode 2
				connected = 1;
 80006be:	4b1f      	ldr	r3, [pc, #124]	; (800073c <UARTRecieveIT+0xcc>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	701a      	strb	r2, [r3, #0]
				break;
 80006c4:	e003      	b.n	80006ce <UARTRecieveIT+0x5e>
			case 0b10010011:
				//mode 3
				connected = 0;
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <UARTRecieveIT+0xcc>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
				break;
 80006cc:	bf00      	nop
			}
			str_idx = (dataPos + 1) % huart2.RxXferSize;
 80006ce:	4b17      	ldr	r3, [pc, #92]	; (800072c <UARTRecieveIT+0xbc>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	3301      	adds	r3, #1
 80006d4:	4a14      	ldr	r2, [pc, #80]	; (8000728 <UARTRecieveIT+0xb8>)
 80006d6:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80006d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80006dc:	fb02 f201 	mul.w	r2, r2, r1
 80006e0:	1a9b      	subs	r3, r3, r2
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <UARTRecieveIT+0xc8>)
 80006e6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, ACK_1, 2);
 80006e8:	2202      	movs	r2, #2
 80006ea:	4915      	ldr	r1, [pc, #84]	; (8000740 <UARTRecieveIT+0xd0>)
 80006ec:	480e      	ldr	r0, [pc, #56]	; (8000728 <UARTRecieveIT+0xb8>)
 80006ee:	f001 f93b 	bl	8001968 <HAL_UART_Transmit_DMA>
 80006f2:	e009      	b.n	8000708 <UARTRecieveIT+0x98>
		} else {
			sum = sum+RxDataBuffer[dataPos];
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <UARTRecieveIT+0xbc>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a0d      	ldr	r2, [pc, #52]	; (8000730 <UARTRecieveIT+0xc0>)
 80006fa:	5cd2      	ldrb	r2, [r2, r3]
 80006fc:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <UARTRecieveIT+0xc4>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4413      	add	r3, r2
 8000702:	b2da      	uxtb	r2, r3
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <UARTRecieveIT+0xc4>)
 8000706:	701a      	strb	r2, [r3, #0]
		}
		dataPos = (dataPos + 1) % huart2.RxXferSize;
 8000708:	4b08      	ldr	r3, [pc, #32]	; (800072c <UARTRecieveIT+0xbc>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	3301      	adds	r3, #1
 800070e:	4a06      	ldr	r2, [pc, #24]	; (8000728 <UARTRecieveIT+0xb8>)
 8000710:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8000712:	fbb3 f1f2 	udiv	r1, r3, r2
 8000716:	fb02 f201 	mul.w	r2, r2, r1
 800071a:	1a9b      	subs	r3, r3, r2
 800071c:	4a03      	ldr	r2, [pc, #12]	; (800072c <UARTRecieveIT+0xbc>)
 800071e:	6013      	str	r3, [r2, #0]
	}
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000b8 	.word	0x200000b8
 800072c:	20000050 	.word	0x20000050
 8000730:	2000002c 	.word	0x2000002c
 8000734:	20000054 	.word	0x20000054
 8000738:	20000055 	.word	0x20000055
 800073c:	2000004c 	.word	0x2000004c
 8000740:	20000000 	.word	0x20000000

08000744 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, RxDataBuffer, 32);
 800074c:	2220      	movs	r2, #32
 800074e:	4904      	ldr	r1, [pc, #16]	; (8000760 <HAL_UART_RxCpltCallback+0x1c>)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <HAL_UART_RxCpltCallback+0x20>)
 8000752:	f001 f8d8 	bl	8001906 <HAL_UART_Receive_IT>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000002c 	.word	0x2000002c
 8000764:	200000b8 	.word	0x200000b8

08000768 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000770:	e7fe      	b.n	8000770 <Error_Handler+0x8>
	...

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <HAL_MspInit+0x4c>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000782:	4a0f      	ldr	r2, [pc, #60]	; (80007c0 <HAL_MspInit+0x4c>)
 8000784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000788:	6453      	str	r3, [r2, #68]	; 0x44
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <HAL_MspInit+0x4c>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_MspInit+0x4c>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <HAL_MspInit+0x4c>)
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a4:	6413      	str	r3, [r2, #64]	; 0x40
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_MspInit+0x4c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007b2:	2007      	movs	r0, #7
 80007b4:	f000 fa44 	bl	8000c40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40023800 	.word	0x40023800

080007c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a34      	ldr	r2, [pc, #208]	; (80008b4 <HAL_UART_MspInit+0xf0>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d161      	bne.n	80008aa <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b33      	ldr	r3, [pc, #204]	; (80008b8 <HAL_UART_MspInit+0xf4>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	4a32      	ldr	r2, [pc, #200]	; (80008b8 <HAL_UART_MspInit+0xf4>)
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f4:	6413      	str	r3, [r2, #64]	; 0x40
 80007f6:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <HAL_UART_MspInit+0xf4>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b2c      	ldr	r3, [pc, #176]	; (80008b8 <HAL_UART_MspInit+0xf4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a2b      	ldr	r2, [pc, #172]	; (80008b8 <HAL_UART_MspInit+0xf4>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b29      	ldr	r3, [pc, #164]	; (80008b8 <HAL_UART_MspInit+0xf4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800081e:	230c      	movs	r3, #12
 8000820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082a:	2303      	movs	r3, #3
 800082c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800082e:	2307      	movs	r3, #7
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	4820      	ldr	r0, [pc, #128]	; (80008bc <HAL_UART_MspInit+0xf8>)
 800083a:	f000 fe45 	bl	80014c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800083e:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <HAL_UART_MspInit+0xfc>)
 8000840:	4a20      	ldr	r2, [pc, #128]	; (80008c4 <HAL_UART_MspInit+0x100>)
 8000842:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <HAL_UART_MspInit+0xfc>)
 8000846:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800084a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <HAL_UART_MspInit+0xfc>)
 800084e:	2240      	movs	r2, #64	; 0x40
 8000850:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000852:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <HAL_UART_MspInit+0xfc>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000858:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <HAL_UART_MspInit+0xfc>)
 800085a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800085e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000860:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <HAL_UART_MspInit+0xfc>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <HAL_UART_MspInit+0xfc>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <HAL_UART_MspInit+0xfc>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <HAL_UART_MspInit+0xfc>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <HAL_UART_MspInit+0xfc>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800087e:	4810      	ldr	r0, [pc, #64]	; (80008c0 <HAL_UART_MspInit+0xfc>)
 8000880:	f000 fa20 	bl	8000cc4 <HAL_DMA_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800088a:	f7ff ff6d 	bl	8000768 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a0b      	ldr	r2, [pc, #44]	; (80008c0 <HAL_UART_MspInit+0xfc>)
 8000892:	635a      	str	r2, [r3, #52]	; 0x34
 8000894:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <HAL_UART_MspInit+0xfc>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	2026      	movs	r0, #38	; 0x26
 80008a0:	f000 f9d9 	bl	8000c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008a4:	2026      	movs	r0, #38	; 0x26
 80008a6:	f000 f9f2 	bl	8000c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008aa:	bf00      	nop
 80008ac:	3728      	adds	r7, #40	; 0x28
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40004400 	.word	0x40004400
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020000 	.word	0x40020000
 80008c0:	20000058 	.word	0x20000058
 80008c4:	400260a0 	.word	0x400260a0

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <NMI_Handler+0x4>

080008ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <MemManage_Handler+0x4>

080008da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000914:	f000 f8a4 	bl	8000a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}

0800091c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <DMA1_Stream6_IRQHandler+0x10>)
 8000922:	f000 fb67 	bl	8000ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000058 	.word	0x20000058

08000930 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000934:	4802      	ldr	r0, [pc, #8]	; (8000940 <USART2_IRQHandler+0x10>)
 8000936:	f001 f895 	bl	8001a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200000b8 	.word	0x200000b8

08000944 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <SystemInit+0x20>)
 800094a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800094e:	4a05      	ldr	r2, [pc, #20]	; (8000964 <SystemInit+0x20>)
 8000950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000968:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800096c:	480d      	ldr	r0, [pc, #52]	; (80009a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800096e:	490e      	ldr	r1, [pc, #56]	; (80009a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000970:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000974:	e002      	b.n	800097c <LoopCopyDataInit>

08000976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097a:	3304      	adds	r3, #4

0800097c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800097c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000980:	d3f9      	bcc.n	8000976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000982:	4a0b      	ldr	r2, [pc, #44]	; (80009b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000984:	4c0b      	ldr	r4, [pc, #44]	; (80009b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000988:	e001      	b.n	800098e <LoopFillZerobss>

0800098a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800098c:	3204      	adds	r2, #4

0800098e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000990:	d3fb      	bcc.n	800098a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000992:	f7ff ffd7 	bl	8000944 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000996:	f001 ff87 	bl	80028a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800099a:	f7ff fd99 	bl	80004d0 <main>
  bx  lr    
 800099e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009ac:	08002928 	.word	0x08002928
  ldr r2, =_sbss
 80009b0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009b4:	20000100 	.word	0x20000100

080009b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b8:	e7fe      	b.n	80009b8 <ADC_IRQHandler>
	...

080009bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_Init+0x40>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <HAL_Init+0x40>)
 80009c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <HAL_Init+0x40>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <HAL_Init+0x40>)
 80009d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <HAL_Init+0x40>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a07      	ldr	r2, [pc, #28]	; (80009fc <HAL_Init+0x40>)
 80009de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e4:	2003      	movs	r0, #3
 80009e6:	f000 f92b 	bl	8000c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ea:	2000      	movs	r0, #0
 80009ec:	f000 f808 	bl	8000a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f0:	f7ff fec0 	bl	8000774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023c00 	.word	0x40023c00

08000a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_InitTick+0x54>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <HAL_InitTick+0x58>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4619      	mov	r1, r3
 8000a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 f943 	bl	8000caa <HAL_SYSTICK_Config>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e00e      	b.n	8000a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b0f      	cmp	r3, #15
 8000a32:	d80a      	bhi.n	8000a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a34:	2200      	movs	r2, #0
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	f000 f90b 	bl	8000c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a40:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <HAL_InitTick+0x5c>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	e000      	b.n	8000a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000004 	.word	0x20000004
 8000a58:	2000000c 	.word	0x2000000c
 8000a5c:	20000008 	.word	0x20000008

08000a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_IncTick+0x20>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_IncTick+0x24>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <HAL_IncTick+0x24>)
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	2000000c 	.word	0x2000000c
 8000a84:	200000fc 	.word	0x200000fc

08000a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <HAL_GetTick+0x14>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	200000fc 	.word	0x200000fc

08000aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000abc:	4013      	ands	r3, r2
 8000abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad2:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	60d3      	str	r3, [r2, #12]
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <__NVIC_GetPriorityGrouping+0x18>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	0a1b      	lsrs	r3, r3, #8
 8000af2:	f003 0307 	and.w	r3, r3, #7
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	db0b      	blt.n	8000b2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	f003 021f 	and.w	r2, r3, #31
 8000b1c:	4907      	ldr	r1, [pc, #28]	; (8000b3c <__NVIC_EnableIRQ+0x38>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	095b      	lsrs	r3, r3, #5
 8000b24:	2001      	movs	r0, #1
 8000b26:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000e100 	.word	0xe000e100

08000b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	6039      	str	r1, [r7, #0]
 8000b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	db0a      	blt.n	8000b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	490c      	ldr	r1, [pc, #48]	; (8000b8c <__NVIC_SetPriority+0x4c>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	0112      	lsls	r2, r2, #4
 8000b60:	b2d2      	uxtb	r2, r2
 8000b62:	440b      	add	r3, r1
 8000b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b68:	e00a      	b.n	8000b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4908      	ldr	r1, [pc, #32]	; (8000b90 <__NVIC_SetPriority+0x50>)
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	f003 030f 	and.w	r3, r3, #15
 8000b76:	3b04      	subs	r3, #4
 8000b78:	0112      	lsls	r2, r2, #4
 8000b7a:	b2d2      	uxtb	r2, r2
 8000b7c:	440b      	add	r3, r1
 8000b7e:	761a      	strb	r2, [r3, #24]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000e100 	.word	0xe000e100
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b089      	sub	sp, #36	; 0x24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	f1c3 0307 	rsb	r3, r3, #7
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	bf28      	it	cs
 8000bb2:	2304      	movcs	r3, #4
 8000bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	2b06      	cmp	r3, #6
 8000bbc:	d902      	bls.n	8000bc4 <NVIC_EncodePriority+0x30>
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3b03      	subs	r3, #3
 8000bc2:	e000      	b.n	8000bc6 <NVIC_EncodePriority+0x32>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	fa01 f303 	lsl.w	r3, r1, r3
 8000be6:	43d9      	mvns	r1, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	4313      	orrs	r3, r2
         );
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3724      	adds	r7, #36	; 0x24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
	...

08000bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c0c:	d301      	bcc.n	8000c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00f      	b.n	8000c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <SysTick_Config+0x40>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1a:	210f      	movs	r1, #15
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	f7ff ff8e 	bl	8000b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <SysTick_Config+0x40>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2a:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <SysTick_Config+0x40>)
 8000c2c:	2207      	movs	r2, #7
 8000c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	e000e010 	.word	0xe000e010

08000c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ff29 	bl	8000aa0 <__NVIC_SetPriorityGrouping>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b086      	sub	sp, #24
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c68:	f7ff ff3e 	bl	8000ae8 <__NVIC_GetPriorityGrouping>
 8000c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	68b9      	ldr	r1, [r7, #8]
 8000c72:	6978      	ldr	r0, [r7, #20]
 8000c74:	f7ff ff8e 	bl	8000b94 <NVIC_EncodePriority>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff5d 	bl	8000b40 <__NVIC_SetPriority>
}
 8000c86:	bf00      	nop
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff31 	bl	8000b04 <__NVIC_EnableIRQ>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff ffa2 	bl	8000bfc <SysTick_Config>
 8000cb8:	4603      	mov	r3, r0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000cd0:	f7ff feda 	bl	8000a88 <HAL_GetTick>
 8000cd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d101      	bne.n	8000ce0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e099      	b.n	8000e14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f022 0201 	bic.w	r2, r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d00:	e00f      	b.n	8000d22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d02:	f7ff fec1 	bl	8000a88 <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	2b05      	cmp	r3, #5
 8000d0e:	d908      	bls.n	8000d22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2220      	movs	r2, #32
 8000d14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2203      	movs	r2, #3
 8000d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e078      	b.n	8000e14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1e8      	bne.n	8000d02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	4b38      	ldr	r3, [pc, #224]	; (8000e1c <HAL_DMA_Init+0x158>)
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a1b      	ldr	r3, [r3, #32]
 8000d6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d6e:	697a      	ldr	r2, [r7, #20]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	d107      	bne.n	8000d8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	4313      	orrs	r3, r2
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f023 0307 	bic.w	r3, r3, #7
 8000da2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	d117      	bne.n	8000de6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d00e      	beq.n	8000de6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f000 fb01 	bl	80013d0 <DMA_CheckFifoParam>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d008      	beq.n	8000de6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2240      	movs	r2, #64	; 0x40
 8000dd8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000de2:	2301      	movs	r3, #1
 8000de4:	e016      	b.n	8000e14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 fab8 	bl	8001364 <DMA_CalcBaseAndBitshift>
 8000df4:	4603      	mov	r3, r0
 8000df6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dfc:	223f      	movs	r2, #63	; 0x3f
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	f010803f 	.word	0xf010803f

08000e20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d101      	bne.n	8000e46 <HAL_DMA_Start_IT+0x26>
 8000e42:	2302      	movs	r3, #2
 8000e44:	e040      	b.n	8000ec8 <HAL_DMA_Start_IT+0xa8>
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d12f      	bne.n	8000eba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	2200      	movs	r2, #0
 8000e66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f000 fa4a 	bl	8001308 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e78:	223f      	movs	r2, #63	; 0x3f
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f042 0216 	orr.w	r2, r2, #22
 8000e8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d007      	beq.n	8000ea8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f042 0208 	orr.w	r2, r2, #8
 8000ea6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f042 0201 	orr.w	r2, r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	e005      	b.n	8000ec6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000edc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ede:	f7ff fdd3 	bl	8000a88 <HAL_GetTick>
 8000ee2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d008      	beq.n	8000f02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e052      	b.n	8000fa8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f022 0216 	bic.w	r2, r2, #22
 8000f10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	695a      	ldr	r2, [r3, #20]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d103      	bne.n	8000f32 <HAL_DMA_Abort+0x62>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d007      	beq.n	8000f42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f022 0208 	bic.w	r2, r2, #8
 8000f40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 0201 	bic.w	r2, r2, #1
 8000f50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f52:	e013      	b.n	8000f7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f54:	f7ff fd98 	bl	8000a88 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b05      	cmp	r3, #5
 8000f60:	d90c      	bls.n	8000f7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2220      	movs	r2, #32
 8000f66:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e015      	b.n	8000fa8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1e4      	bne.n	8000f54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f8e:	223f      	movs	r2, #63	; 0x3f
 8000f90:	409a      	lsls	r2, r3
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d004      	beq.n	8000fce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00c      	b.n	8000fe8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2205      	movs	r2, #5
 8000fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 0201 	bic.w	r2, r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001000:	4b92      	ldr	r3, [pc, #584]	; (800124c <HAL_DMA_IRQHandler+0x258>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a92      	ldr	r2, [pc, #584]	; (8001250 <HAL_DMA_IRQHandler+0x25c>)
 8001006:	fba2 2303 	umull	r2, r3, r2, r3
 800100a:	0a9b      	lsrs	r3, r3, #10
 800100c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001012:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800101e:	2208      	movs	r2, #8
 8001020:	409a      	lsls	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4013      	ands	r3, r2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d01a      	beq.n	8001060 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	2b00      	cmp	r3, #0
 8001036:	d013      	beq.n	8001060 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 0204 	bic.w	r2, r2, #4
 8001046:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800104c:	2208      	movs	r2, #8
 800104e:	409a      	lsls	r2, r3
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001058:	f043 0201 	orr.w	r2, r3, #1
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001064:	2201      	movs	r2, #1
 8001066:	409a      	lsls	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4013      	ands	r3, r2
 800106c:	2b00      	cmp	r3, #0
 800106e:	d012      	beq.n	8001096 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00b      	beq.n	8001096 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001082:	2201      	movs	r2, #1
 8001084:	409a      	lsls	r2, r3
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800108e:	f043 0202 	orr.w	r2, r3, #2
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800109a:	2204      	movs	r2, #4
 800109c:	409a      	lsls	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4013      	ands	r3, r2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d012      	beq.n	80010cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00b      	beq.n	80010cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b8:	2204      	movs	r2, #4
 80010ba:	409a      	lsls	r2, r3
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c4:	f043 0204 	orr.w	r2, r3, #4
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d0:	2210      	movs	r2, #16
 80010d2:	409a      	lsls	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4013      	ands	r3, r2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d043      	beq.n	8001164 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d03c      	beq.n	8001164 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ee:	2210      	movs	r2, #16
 80010f0:	409a      	lsls	r2, r3
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d018      	beq.n	8001136 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d108      	bne.n	8001124 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	2b00      	cmp	r3, #0
 8001118:	d024      	beq.n	8001164 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	4798      	blx	r3
 8001122:	e01f      	b.n	8001164 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001128:	2b00      	cmp	r3, #0
 800112a:	d01b      	beq.n	8001164 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	4798      	blx	r3
 8001134:	e016      	b.n	8001164 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001140:	2b00      	cmp	r3, #0
 8001142:	d107      	bne.n	8001154 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 0208 	bic.w	r2, r2, #8
 8001152:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001168:	2220      	movs	r2, #32
 800116a:	409a      	lsls	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4013      	ands	r3, r2
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 808e 	beq.w	8001292 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0310 	and.w	r3, r3, #16
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 8086 	beq.w	8001292 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800118a:	2220      	movs	r2, #32
 800118c:	409a      	lsls	r2, r3
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b05      	cmp	r3, #5
 800119c:	d136      	bne.n	800120c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0216 	bic.w	r2, r2, #22
 80011ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	695a      	ldr	r2, [r3, #20]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d103      	bne.n	80011ce <HAL_DMA_IRQHandler+0x1da>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d007      	beq.n	80011de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0208 	bic.w	r2, r2, #8
 80011dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e2:	223f      	movs	r2, #63	; 0x3f
 80011e4:	409a      	lsls	r2, r3
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d07d      	beq.n	80012fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	4798      	blx	r3
        }
        return;
 800120a:	e078      	b.n	80012fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d01c      	beq.n	8001254 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d108      	bne.n	800123a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122c:	2b00      	cmp	r3, #0
 800122e:	d030      	beq.n	8001292 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	4798      	blx	r3
 8001238:	e02b      	b.n	8001292 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800123e:	2b00      	cmp	r3, #0
 8001240:	d027      	beq.n	8001292 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	4798      	blx	r3
 800124a:	e022      	b.n	8001292 <HAL_DMA_IRQHandler+0x29e>
 800124c:	20000004 	.word	0x20000004
 8001250:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10f      	bne.n	8001282 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0210 	bic.w	r2, r2, #16
 8001270:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001296:	2b00      	cmp	r3, #0
 8001298:	d032      	beq.n	8001300 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d022      	beq.n	80012ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2205      	movs	r2, #5
 80012aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0201 	bic.w	r2, r2, #1
 80012bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	3301      	adds	r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d307      	bcc.n	80012da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f2      	bne.n	80012be <HAL_DMA_IRQHandler+0x2ca>
 80012d8:	e000      	b.n	80012dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80012da:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	4798      	blx	r3
 80012fc:	e000      	b.n	8001300 <HAL_DMA_IRQHandler+0x30c>
        return;
 80012fe:	bf00      	nop
    }
  }
}
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop

08001308 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001324:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b40      	cmp	r3, #64	; 0x40
 8001334:	d108      	bne.n	8001348 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001346:	e007      	b.n	8001358 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	60da      	str	r2, [r3, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	3b10      	subs	r3, #16
 8001374:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <DMA_CalcBaseAndBitshift+0x64>)
 8001376:	fba2 2303 	umull	r2, r3, r2, r3
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800137e:	4a13      	ldr	r2, [pc, #76]	; (80013cc <DMA_CalcBaseAndBitshift+0x68>)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2b03      	cmp	r3, #3
 8001390:	d909      	bls.n	80013a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800139a:	f023 0303 	bic.w	r3, r3, #3
 800139e:	1d1a      	adds	r2, r3, #4
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	659a      	str	r2, [r3, #88]	; 0x58
 80013a4:	e007      	b.n	80013b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013ae:	f023 0303 	bic.w	r3, r3, #3
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	aaaaaaab 	.word	0xaaaaaaab
 80013cc:	08002910 	.word	0x08002910

080013d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013d8:	2300      	movs	r3, #0
 80013da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d11f      	bne.n	800142a <DMA_CheckFifoParam+0x5a>
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d856      	bhi.n	800149e <DMA_CheckFifoParam+0xce>
 80013f0:	a201      	add	r2, pc, #4	; (adr r2, 80013f8 <DMA_CheckFifoParam+0x28>)
 80013f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f6:	bf00      	nop
 80013f8:	08001409 	.word	0x08001409
 80013fc:	0800141b 	.word	0x0800141b
 8001400:	08001409 	.word	0x08001409
 8001404:	0800149f 	.word	0x0800149f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d046      	beq.n	80014a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001418:	e043      	b.n	80014a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001422:	d140      	bne.n	80014a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001428:	e03d      	b.n	80014a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001432:	d121      	bne.n	8001478 <DMA_CheckFifoParam+0xa8>
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	2b03      	cmp	r3, #3
 8001438:	d837      	bhi.n	80014aa <DMA_CheckFifoParam+0xda>
 800143a:	a201      	add	r2, pc, #4	; (adr r2, 8001440 <DMA_CheckFifoParam+0x70>)
 800143c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001440:	08001451 	.word	0x08001451
 8001444:	08001457 	.word	0x08001457
 8001448:	08001451 	.word	0x08001451
 800144c:	08001469 	.word	0x08001469
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	73fb      	strb	r3, [r7, #15]
      break;
 8001454:	e030      	b.n	80014b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d025      	beq.n	80014ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001466:	e022      	b.n	80014ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001470:	d11f      	bne.n	80014b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001476:	e01c      	b.n	80014b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d903      	bls.n	8001486 <DMA_CheckFifoParam+0xb6>
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	2b03      	cmp	r3, #3
 8001482:	d003      	beq.n	800148c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001484:	e018      	b.n	80014b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	73fb      	strb	r3, [r7, #15]
      break;
 800148a:	e015      	b.n	80014b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00e      	beq.n	80014b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	73fb      	strb	r3, [r7, #15]
      break;
 800149c:	e00b      	b.n	80014b6 <DMA_CheckFifoParam+0xe6>
      break;
 800149e:	bf00      	nop
 80014a0:	e00a      	b.n	80014b8 <DMA_CheckFifoParam+0xe8>
      break;
 80014a2:	bf00      	nop
 80014a4:	e008      	b.n	80014b8 <DMA_CheckFifoParam+0xe8>
      break;
 80014a6:	bf00      	nop
 80014a8:	e006      	b.n	80014b8 <DMA_CheckFifoParam+0xe8>
      break;
 80014aa:	bf00      	nop
 80014ac:	e004      	b.n	80014b8 <DMA_CheckFifoParam+0xe8>
      break;
 80014ae:	bf00      	nop
 80014b0:	e002      	b.n	80014b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80014b2:	bf00      	nop
 80014b4:	e000      	b.n	80014b8 <DMA_CheckFifoParam+0xe8>
      break;
 80014b6:	bf00      	nop
    }
  } 
  
  return status; 
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop

080014c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
 80014e2:	e159      	b.n	8001798 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014e4:	2201      	movs	r2, #1
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	f040 8148 	bne.w	8001792 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	2b01      	cmp	r3, #1
 800150c:	d005      	beq.n	800151a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001516:	2b02      	cmp	r3, #2
 8001518:	d130      	bne.n	800157c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	2203      	movs	r2, #3
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	68da      	ldr	r2, [r3, #12]
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001550:	2201      	movs	r2, #1
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f003 0201 	and.w	r2, r3, #1
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b03      	cmp	r3, #3
 8001586:	d017      	beq.n	80015b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	2203      	movs	r2, #3
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d123      	bne.n	800160c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	08da      	lsrs	r2, r3, #3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3208      	adds	r2, #8
 80015cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	220f      	movs	r2, #15
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	691a      	ldr	r2, [r3, #16]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	08da      	lsrs	r2, r3, #3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3208      	adds	r2, #8
 8001606:	69b9      	ldr	r1, [r7, #24]
 8001608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	2203      	movs	r2, #3
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0203 	and.w	r2, r3, #3
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 80a2 	beq.w	8001792 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b57      	ldr	r3, [pc, #348]	; (80017b0 <HAL_GPIO_Init+0x2e8>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	4a56      	ldr	r2, [pc, #344]	; (80017b0 <HAL_GPIO_Init+0x2e8>)
 8001658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165c:	6453      	str	r3, [r2, #68]	; 0x44
 800165e:	4b54      	ldr	r3, [pc, #336]	; (80017b0 <HAL_GPIO_Init+0x2e8>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800166a:	4a52      	ldr	r2, [pc, #328]	; (80017b4 <HAL_GPIO_Init+0x2ec>)
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	089b      	lsrs	r3, r3, #2
 8001670:	3302      	adds	r3, #2
 8001672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	220f      	movs	r2, #15
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a49      	ldr	r2, [pc, #292]	; (80017b8 <HAL_GPIO_Init+0x2f0>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d019      	beq.n	80016ca <HAL_GPIO_Init+0x202>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a48      	ldr	r2, [pc, #288]	; (80017bc <HAL_GPIO_Init+0x2f4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <HAL_GPIO_Init+0x1fe>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a47      	ldr	r2, [pc, #284]	; (80017c0 <HAL_GPIO_Init+0x2f8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d00d      	beq.n	80016c2 <HAL_GPIO_Init+0x1fa>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a46      	ldr	r2, [pc, #280]	; (80017c4 <HAL_GPIO_Init+0x2fc>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d007      	beq.n	80016be <HAL_GPIO_Init+0x1f6>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a45      	ldr	r2, [pc, #276]	; (80017c8 <HAL_GPIO_Init+0x300>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d101      	bne.n	80016ba <HAL_GPIO_Init+0x1f2>
 80016b6:	2304      	movs	r3, #4
 80016b8:	e008      	b.n	80016cc <HAL_GPIO_Init+0x204>
 80016ba:	2307      	movs	r3, #7
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x204>
 80016be:	2303      	movs	r3, #3
 80016c0:	e004      	b.n	80016cc <HAL_GPIO_Init+0x204>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e002      	b.n	80016cc <HAL_GPIO_Init+0x204>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <HAL_GPIO_Init+0x204>
 80016ca:	2300      	movs	r3, #0
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	f002 0203 	and.w	r2, r2, #3
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	4093      	lsls	r3, r2
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016dc:	4935      	ldr	r1, [pc, #212]	; (80017b4 <HAL_GPIO_Init+0x2ec>)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016ea:	4b38      	ldr	r3, [pc, #224]	; (80017cc <HAL_GPIO_Init+0x304>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800170e:	4a2f      	ldr	r2, [pc, #188]	; (80017cc <HAL_GPIO_Init+0x304>)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <HAL_GPIO_Init+0x304>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001738:	4a24      	ldr	r2, [pc, #144]	; (80017cc <HAL_GPIO_Init+0x304>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800173e:	4b23      	ldr	r3, [pc, #140]	; (80017cc <HAL_GPIO_Init+0x304>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001762:	4a1a      	ldr	r2, [pc, #104]	; (80017cc <HAL_GPIO_Init+0x304>)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001768:	4b18      	ldr	r3, [pc, #96]	; (80017cc <HAL_GPIO_Init+0x304>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800178c:	4a0f      	ldr	r2, [pc, #60]	; (80017cc <HAL_GPIO_Init+0x304>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3301      	adds	r3, #1
 8001796:	61fb      	str	r3, [r7, #28]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	2b0f      	cmp	r3, #15
 800179c:	f67f aea2 	bls.w	80014e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3724      	adds	r7, #36	; 0x24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40013800 	.word	0x40013800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020400 	.word	0x40020400
 80017c0:	40020800 	.word	0x40020800
 80017c4:	40020c00 	.word	0x40020c00
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40013c00 	.word	0x40013c00

080017d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	807b      	strh	r3, [r7, #2]
 80017dc:	4613      	mov	r3, r2
 80017de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017e0:	787b      	ldrb	r3, [r7, #1]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017e6:	887a      	ldrh	r2, [r7, #2]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017ec:	e003      	b.n	80017f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017ee:	887b      	ldrh	r3, [r7, #2]
 80017f0:	041a      	lsls	r2, r3, #16
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	619a      	str	r2, [r3, #24]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <HAL_RCC_GetHCLKFreq+0x14>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000004 	.word	0x20000004

0800181c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001820:	f7ff fff0 	bl	8001804 <HAL_RCC_GetHCLKFreq>
 8001824:	4602      	mov	r2, r0
 8001826:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	0a9b      	lsrs	r3, r3, #10
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	4903      	ldr	r1, [pc, #12]	; (8001840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001832:	5ccb      	ldrb	r3, [r1, r3]
 8001834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001838:	4618      	mov	r0, r3
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40023800 	.word	0x40023800
 8001840:	08002908 	.word	0x08002908

08001844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001848:	f7ff ffdc 	bl	8001804 <HAL_RCC_GetHCLKFreq>
 800184c:	4602      	mov	r2, r0
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	0b5b      	lsrs	r3, r3, #13
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	4903      	ldr	r1, [pc, #12]	; (8001868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800185a:	5ccb      	ldrb	r3, [r1, r3]
 800185c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001860:	4618      	mov	r0, r3
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40023800 	.word	0x40023800
 8001868:	08002908 	.word	0x08002908

0800186c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e03f      	b.n	80018fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d106      	bne.n	8001898 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7fe ff96 	bl	80007c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2224      	movs	r2, #36	; 0x24
 800189c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 fe31 	bl	8002518 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	691a      	ldr	r2, [r3, #16]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	695a      	ldr	r2, [r3, #20]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2220      	movs	r2, #32
 80018f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2220      	movs	r2, #32
 80018f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b084      	sub	sp, #16
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	4613      	mov	r3, r2
 8001912:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b20      	cmp	r3, #32
 800191e:	d11d      	bne.n	800195c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <HAL_UART_Receive_IT+0x26>
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e016      	b.n	800195e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001936:	2b01      	cmp	r3, #1
 8001938:	d101      	bne.n	800193e <HAL_UART_Receive_IT+0x38>
 800193a:	2302      	movs	r3, #2
 800193c:	e00f      	b.n	800195e <HAL_UART_Receive_IT+0x58>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	461a      	mov	r2, r3
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f000 fbe3 	bl	800211e <UART_Start_Receive_IT>
 8001958:	4603      	mov	r3, r0
 800195a:	e000      	b.n	800195e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800195c:	2302      	movs	r3, #2
  }
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08c      	sub	sp, #48	; 0x30
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	4613      	mov	r3, r2
 8001974:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b20      	cmp	r3, #32
 8001980:	d165      	bne.n	8001a4e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d002      	beq.n	800198e <HAL_UART_Transmit_DMA+0x26>
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e05e      	b.n	8001a50 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <HAL_UART_Transmit_DMA+0x38>
 800199c:	2302      	movs	r3, #2
 800199e:	e057      	b.n	8001a50 <HAL_UART_Transmit_DMA+0xe8>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	88fa      	ldrh	r2, [r7, #6]
 80019b2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	88fa      	ldrh	r2, [r7, #6]
 80019b8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2221      	movs	r2, #33	; 0x21
 80019c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019cc:	4a22      	ldr	r2, [pc, #136]	; (8001a58 <HAL_UART_Transmit_DMA+0xf0>)
 80019ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d4:	4a21      	ldr	r2, [pc, #132]	; (8001a5c <HAL_UART_Transmit_DMA+0xf4>)
 80019d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019dc:	4a20      	ldr	r2, [pc, #128]	; (8001a60 <HAL_UART_Transmit_DMA+0xf8>)
 80019de:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e4:	2200      	movs	r2, #0
 80019e6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80019e8:	f107 0308 	add.w	r3, r7, #8
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80019f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f4:	6819      	ldr	r1, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	3304      	adds	r3, #4
 80019fc:	461a      	mov	r2, r3
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	f7ff fa0e 	bl	8000e20 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a0c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	3314      	adds	r3, #20
 8001a1c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	e853 3f00 	ldrex	r3, [r3]
 8001a24:	617b      	str	r3, [r7, #20]
   return(result);
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	3314      	adds	r3, #20
 8001a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a36:	627a      	str	r2, [r7, #36]	; 0x24
 8001a38:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a3a:	6a39      	ldr	r1, [r7, #32]
 8001a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3e:	e841 2300 	strex	r3, r2, [r1]
 8001a42:	61fb      	str	r3, [r7, #28]
   return(result);
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1e5      	bne.n	8001a16 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e000      	b.n	8001a50 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8001a4e:	2302      	movs	r3, #2
  }
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3730      	adds	r7, #48	; 0x30
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	08001fd5 	.word	0x08001fd5
 8001a5c:	0800206f 	.word	0x0800206f
 8001a60:	0800208b 	.word	0x0800208b

08001a64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b0ba      	sub	sp, #232	; 0xe8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001aa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10f      	bne.n	8001aca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001aae:	f003 0320 	and.w	r3, r3, #32
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <HAL_UART_IRQHandler+0x66>
 8001ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001aba:	f003 0320 	and.w	r3, r3, #32
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 fc6c 	bl	80023a0 <UART_Receive_IT>
      return;
 8001ac8:	e256      	b.n	8001f78 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001aca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 80de 	beq.w	8001c90 <HAL_UART_IRQHandler+0x22c>
 8001ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d106      	bne.n	8001aee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ae4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80d1 	beq.w	8001c90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00b      	beq.n	8001b12 <HAL_UART_IRQHandler+0xae>
 8001afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f043 0201 	orr.w	r2, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00b      	beq.n	8001b36 <HAL_UART_IRQHandler+0xd2>
 8001b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d005      	beq.n	8001b36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f043 0202 	orr.w	r2, r3, #2
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00b      	beq.n	8001b5a <HAL_UART_IRQHandler+0xf6>
 8001b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f043 0204 	orr.w	r2, r3, #4
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d011      	beq.n	8001b8a <HAL_UART_IRQHandler+0x126>
 8001b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001b6a:	f003 0320 	and.w	r3, r3, #32
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d105      	bne.n	8001b7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f043 0208 	orr.w	r2, r3, #8
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 81ed 	beq.w	8001f6e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b98:	f003 0320 	and.w	r3, r3, #32
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d008      	beq.n	8001bb2 <HAL_UART_IRQHandler+0x14e>
 8001ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ba4:	f003 0320 	and.w	r3, r3, #32
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d002      	beq.n	8001bb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 fbf7 	bl	80023a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bbc:	2b40      	cmp	r3, #64	; 0x40
 8001bbe:	bf0c      	ite	eq
 8001bc0:	2301      	moveq	r3, #1
 8001bc2:	2300      	movne	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d103      	bne.n	8001bde <HAL_UART_IRQHandler+0x17a>
 8001bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d04f      	beq.n	8001c7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 faff 	bl	80021e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bee:	2b40      	cmp	r3, #64	; 0x40
 8001bf0:	d141      	bne.n	8001c76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	3314      	adds	r3, #20
 8001bf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c00:	e853 3f00 	ldrex	r3, [r3]
 8001c04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	3314      	adds	r3, #20
 8001c1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001c1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001c22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001c2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001c2e:	e841 2300 	strex	r3, r2, [r1]
 8001c32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1d9      	bne.n	8001bf2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d013      	beq.n	8001c6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4a:	4a7d      	ldr	r2, [pc, #500]	; (8001e40 <HAL_UART_IRQHandler+0x3dc>)
 8001c4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff f9ac 	bl	8000fb0 <HAL_DMA_Abort_IT>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d016      	beq.n	8001c8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c6c:	e00e      	b.n	8001c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f99a 	bl	8001fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c74:	e00a      	b.n	8001c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f996 	bl	8001fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c7c:	e006      	b.n	8001c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f992 	bl	8001fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001c8a:	e170      	b.n	8001f6e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c8c:	bf00      	nop
    return;
 8001c8e:	e16e      	b.n	8001f6e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	f040 814a 	bne.w	8001f2e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 8143 	beq.w	8001f2e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cac:	f003 0310 	and.w	r3, r3, #16
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 813c 	beq.w	8001f2e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd6:	2b40      	cmp	r3, #64	; 0x40
 8001cd8:	f040 80b4 	bne.w	8001e44 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001ce8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 8140 	beq.w	8001f72 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001cf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	f080 8139 	bcs.w	8001f72 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001d06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d12:	f000 8088 	beq.w	8001e26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	330c      	adds	r3, #12
 8001d1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d24:	e853 3f00 	ldrex	r3, [r3]
 8001d28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	330c      	adds	r3, #12
 8001d3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001d42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001d46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001d4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001d52:	e841 2300 	strex	r3, r2, [r1]
 8001d56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1d9      	bne.n	8001d16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	3314      	adds	r3, #20
 8001d68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d6c:	e853 3f00 	ldrex	r3, [r3]
 8001d70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001d72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	3314      	adds	r3, #20
 8001d82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001d86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001d8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001d8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001d92:	e841 2300 	strex	r3, r2, [r1]
 8001d96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1e1      	bne.n	8001d62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	3314      	adds	r3, #20
 8001da4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001da8:	e853 3f00 	ldrex	r3, [r3]
 8001dac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001db4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	3314      	adds	r3, #20
 8001dbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001dc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001dc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001dc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001dca:	e841 2300 	strex	r3, r2, [r1]
 8001dce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1e3      	bne.n	8001d9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	330c      	adds	r3, #12
 8001dea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dee:	e853 3f00 	ldrex	r3, [r3]
 8001df2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001df6:	f023 0310 	bic.w	r3, r3, #16
 8001dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	330c      	adds	r3, #12
 8001e04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001e08:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e10:	e841 2300 	strex	r3, r2, [r1]
 8001e14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1e3      	bne.n	8001de4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff f855 	bl	8000ed0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	4619      	mov	r1, r3
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f8c0 	bl	8001fbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001e3c:	e099      	b.n	8001f72 <HAL_UART_IRQHandler+0x50e>
 8001e3e:	bf00      	nop
 8001e40:	080022a9 	.word	0x080022a9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 808b 	beq.w	8001f76 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8001e60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 8086 	beq.w	8001f76 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	330c      	adds	r3, #12
 8001e70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e74:	e853 3f00 	ldrex	r3, [r3]
 8001e78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001e80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	330c      	adds	r3, #12
 8001e8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001e8e:	647a      	str	r2, [r7, #68]	; 0x44
 8001e90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001e94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e96:	e841 2300 	strex	r3, r2, [r1]
 8001e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1e3      	bne.n	8001e6a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	3314      	adds	r3, #20
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	e853 3f00 	ldrex	r3, [r3]
 8001eb0:	623b      	str	r3, [r7, #32]
   return(result);
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	3314      	adds	r3, #20
 8001ec2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001ec6:	633a      	str	r2, [r7, #48]	; 0x30
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ece:	e841 2300 	strex	r3, r2, [r1]
 8001ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1e3      	bne.n	8001ea2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2220      	movs	r2, #32
 8001ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	330c      	adds	r3, #12
 8001eee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	e853 3f00 	ldrex	r3, [r3]
 8001ef6:	60fb      	str	r3, [r7, #12]
   return(result);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f023 0310 	bic.w	r3, r3, #16
 8001efe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	330c      	adds	r3, #12
 8001f08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001f0c:	61fa      	str	r2, [r7, #28]
 8001f0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f10:	69b9      	ldr	r1, [r7, #24]
 8001f12:	69fa      	ldr	r2, [r7, #28]
 8001f14:	e841 2300 	strex	r3, r2, [r1]
 8001f18:	617b      	str	r3, [r7, #20]
   return(result);
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1e3      	bne.n	8001ee8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001f20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001f24:	4619      	mov	r1, r3
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f848 	bl	8001fbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001f2c:	e023      	b.n	8001f76 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d009      	beq.n	8001f4e <HAL_UART_IRQHandler+0x4ea>
 8001f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f9c2 	bl	80022d0 <UART_Transmit_IT>
    return;
 8001f4c:	e014      	b.n	8001f78 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00e      	beq.n	8001f78 <HAL_UART_IRQHandler+0x514>
 8001f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 fa02 	bl	8002370 <UART_EndTransmit_IT>
    return;
 8001f6c:	e004      	b.n	8001f78 <HAL_UART_IRQHandler+0x514>
    return;
 8001f6e:	bf00      	nop
 8001f70:	e002      	b.n	8001f78 <HAL_UART_IRQHandler+0x514>
      return;
 8001f72:	bf00      	nop
 8001f74:	e000      	b.n	8001f78 <HAL_UART_IRQHandler+0x514>
      return;
 8001f76:	bf00      	nop
  }
}
 8001f78:	37e8      	adds	r7, #232	; 0xe8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop

08001f80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b090      	sub	sp, #64	; 0x40
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d137      	bne.n	8002060 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8001ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	3314      	adds	r3, #20
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	e853 3f00 	ldrex	r3, [r3]
 8002004:	623b      	str	r3, [r7, #32]
   return(result);
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800200c:	63bb      	str	r3, [r7, #56]	; 0x38
 800200e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	3314      	adds	r3, #20
 8002014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002016:	633a      	str	r2, [r7, #48]	; 0x30
 8002018:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800201a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800201c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800201e:	e841 2300 	strex	r3, r2, [r1]
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1e5      	bne.n	8001ff6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800202a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	330c      	adds	r3, #12
 8002030:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	e853 3f00 	ldrex	r3, [r3]
 8002038:	60fb      	str	r3, [r7, #12]
   return(result);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002040:	637b      	str	r3, [r7, #52]	; 0x34
 8002042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	330c      	adds	r3, #12
 8002048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800204a:	61fa      	str	r2, [r7, #28]
 800204c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800204e:	69b9      	ldr	r1, [r7, #24]
 8002050:	69fa      	ldr	r2, [r7, #28]
 8002052:	e841 2300 	strex	r3, r2, [r1]
 8002056:	617b      	str	r3, [r7, #20]
   return(result);
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1e5      	bne.n	800202a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800205e:	e002      	b.n	8002066 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002060:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002062:	f7ff ff8d 	bl	8001f80 <HAL_UART_TxCpltCallback>
}
 8002066:	bf00      	nop
 8002068:	3740      	adds	r7, #64	; 0x40
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f7ff ff89 	bl	8001f94 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a6:	2b80      	cmp	r3, #128	; 0x80
 80020a8:	bf0c      	ite	eq
 80020aa:	2301      	moveq	r3, #1
 80020ac:	2300      	movne	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b21      	cmp	r3, #33	; 0x21
 80020bc:	d108      	bne.n	80020d0 <UART_DMAError+0x46>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2200      	movs	r2, #0
 80020c8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80020ca:	68b8      	ldr	r0, [r7, #8]
 80020cc:	f000 f861 	bl	8002192 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020da:	2b40      	cmp	r3, #64	; 0x40
 80020dc:	bf0c      	ite	eq
 80020de:	2301      	moveq	r3, #1
 80020e0:	2300      	movne	r3, #0
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b22      	cmp	r3, #34	; 0x22
 80020f0:	d108      	bne.n	8002104 <UART_DMAError+0x7a>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2200      	movs	r2, #0
 80020fc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80020fe:	68b8      	ldr	r0, [r7, #8]
 8002100:	f000 f86f 	bl	80021e2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	f043 0210 	orr.w	r2, r3, #16
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002110:	68b8      	ldr	r0, [r7, #8]
 8002112:	f7ff ff49 	bl	8001fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800211e:	b480      	push	{r7}
 8002120:	b085      	sub	sp, #20
 8002122:	af00      	add	r7, sp, #0
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	4613      	mov	r3, r2
 800212a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	88fa      	ldrh	r2, [r7, #6]
 8002136:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	88fa      	ldrh	r2, [r7, #6]
 800213c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2222      	movs	r2, #34	; 0x22
 8002148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002162:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0201 	orr.w	r2, r2, #1
 8002172:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0220 	orr.w	r2, r2, #32
 8002182:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002192:	b480      	push	{r7}
 8002194:	b089      	sub	sp, #36	; 0x24
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	330c      	adds	r3, #12
 80021a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	e853 3f00 	ldrex	r3, [r3]
 80021a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	330c      	adds	r3, #12
 80021b8:	69fa      	ldr	r2, [r7, #28]
 80021ba:	61ba      	str	r2, [r7, #24]
 80021bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021be:	6979      	ldr	r1, [r7, #20]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	e841 2300 	strex	r3, r2, [r1]
 80021c6:	613b      	str	r3, [r7, #16]
   return(result);
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1e5      	bne.n	800219a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2220      	movs	r2, #32
 80021d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80021d6:	bf00      	nop
 80021d8:	3724      	adds	r7, #36	; 0x24
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b095      	sub	sp, #84	; 0x54
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	330c      	adds	r3, #12
 80021f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f4:	e853 3f00 	ldrex	r3, [r3]
 80021f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80021fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002200:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	330c      	adds	r3, #12
 8002208:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800220a:	643a      	str	r2, [r7, #64]	; 0x40
 800220c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800220e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002210:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002212:	e841 2300 	strex	r3, r2, [r1]
 8002216:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1e5      	bne.n	80021ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	3314      	adds	r3, #20
 8002224:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	e853 3f00 	ldrex	r3, [r3]
 800222c:	61fb      	str	r3, [r7, #28]
   return(result);
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	f023 0301 	bic.w	r3, r3, #1
 8002234:	64bb      	str	r3, [r7, #72]	; 0x48
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	3314      	adds	r3, #20
 800223c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800223e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002240:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002242:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002246:	e841 2300 	strex	r3, r2, [r1]
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1e5      	bne.n	800221e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	2b01      	cmp	r3, #1
 8002258:	d119      	bne.n	800228e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	330c      	adds	r3, #12
 8002260:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	e853 3f00 	ldrex	r3, [r3]
 8002268:	60bb      	str	r3, [r7, #8]
   return(result);
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	f023 0310 	bic.w	r3, r3, #16
 8002270:	647b      	str	r3, [r7, #68]	; 0x44
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	330c      	adds	r3, #12
 8002278:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800227a:	61ba      	str	r2, [r7, #24]
 800227c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800227e:	6979      	ldr	r1, [r7, #20]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	e841 2300 	strex	r3, r2, [r1]
 8002286:	613b      	str	r3, [r7, #16]
   return(result);
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1e5      	bne.n	800225a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2220      	movs	r2, #32
 8002292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800229c:	bf00      	nop
 800229e:	3754      	adds	r7, #84	; 0x54
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f7ff fe70 	bl	8001fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80022c8:	bf00      	nop
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b21      	cmp	r3, #33	; 0x21
 80022e2:	d13e      	bne.n	8002362 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ec:	d114      	bne.n	8002318 <UART_Transmit_IT+0x48>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d110      	bne.n	8002318 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800230a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	1c9a      	adds	r2, r3, #2
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	621a      	str	r2, [r3, #32]
 8002316:	e008      	b.n	800232a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	1c59      	adds	r1, r3, #1
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6211      	str	r1, [r2, #32]
 8002322:	781a      	ldrb	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800232e:	b29b      	uxth	r3, r3
 8002330:	3b01      	subs	r3, #1
 8002332:	b29b      	uxth	r3, r3
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	4619      	mov	r1, r3
 8002338:	84d1      	strh	r1, [r2, #38]	; 0x26
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10f      	bne.n	800235e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800234c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800235c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	e000      	b.n	8002364 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002362:	2302      	movs	r3, #2
  }
}
 8002364:	4618      	mov	r0, r3
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002386:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff fdf5 	bl	8001f80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08c      	sub	sp, #48	; 0x30
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b22      	cmp	r3, #34	; 0x22
 80023b2:	f040 80ab 	bne.w	800250c <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023be:	d117      	bne.n	80023f0 <UART_Receive_IT+0x50>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d113      	bne.n	80023f0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023de:	b29a      	uxth	r2, r3
 80023e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	1c9a      	adds	r2, r3, #2
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	629a      	str	r2, [r3, #40]	; 0x28
 80023ee:	e026      	b.n	800243e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002402:	d007      	beq.n	8002414 <UART_Receive_IT+0x74>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10a      	bne.n	8002422 <UART_Receive_IT+0x82>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d106      	bne.n	8002422 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241e:	701a      	strb	r2, [r3, #0]
 8002420:	e008      	b.n	8002434 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800242e:	b2da      	uxtb	r2, r3
 8002430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002432:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29b      	uxth	r3, r3
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	4619      	mov	r1, r3
 800244c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800244e:	2b00      	cmp	r3, #0
 8002450:	d15a      	bne.n	8002508 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0220 	bic.w	r2, r2, #32
 8002460:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002470:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695a      	ldr	r2, [r3, #20]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0201 	bic.w	r2, r2, #1
 8002480:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	2b01      	cmp	r3, #1
 8002490:	d135      	bne.n	80024fe <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	330c      	adds	r3, #12
 800249e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	e853 3f00 	ldrex	r3, [r3]
 80024a6:	613b      	str	r3, [r7, #16]
   return(result);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	f023 0310 	bic.w	r3, r3, #16
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	330c      	adds	r3, #12
 80024b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b8:	623a      	str	r2, [r7, #32]
 80024ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024bc:	69f9      	ldr	r1, [r7, #28]
 80024be:	6a3a      	ldr	r2, [r7, #32]
 80024c0:	e841 2300 	strex	r3, r2, [r1]
 80024c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1e5      	bne.n	8002498 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	2b10      	cmp	r3, #16
 80024d8:	d10a      	bne.n	80024f0 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024f4:	4619      	mov	r1, r3
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff fd60 	bl	8001fbc <HAL_UARTEx_RxEventCallback>
 80024fc:	e002      	b.n	8002504 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7fe f920 	bl	8000744 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	e002      	b.n	800250e <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	e000      	b.n	800250e <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800250c:	2302      	movs	r3, #2
  }
}
 800250e:	4618      	mov	r0, r3
 8002510:	3730      	adds	r7, #48	; 0x30
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800251c:	b09f      	sub	sp, #124	; 0x7c
 800251e:	af00      	add	r7, sp, #0
 8002520:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800252c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800252e:	68d9      	ldr	r1, [r3, #12]
 8002530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	ea40 0301 	orr.w	r3, r0, r1
 8002538:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800253a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	431a      	orrs	r2, r3
 8002544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	431a      	orrs	r2, r3
 800254a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	4313      	orrs	r3, r2
 8002550:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800255c:	f021 010c 	bic.w	r1, r1, #12
 8002560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002566:	430b      	orrs	r3, r1
 8002568:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800256a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002576:	6999      	ldr	r1, [r3, #24]
 8002578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	ea40 0301 	orr.w	r3, r0, r1
 8002580:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	4bc5      	ldr	r3, [pc, #788]	; (800289c <UART_SetConfig+0x384>)
 8002588:	429a      	cmp	r2, r3
 800258a:	d004      	beq.n	8002596 <UART_SetConfig+0x7e>
 800258c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4bc3      	ldr	r3, [pc, #780]	; (80028a0 <UART_SetConfig+0x388>)
 8002592:	429a      	cmp	r2, r3
 8002594:	d103      	bne.n	800259e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002596:	f7ff f955 	bl	8001844 <HAL_RCC_GetPCLK2Freq>
 800259a:	6778      	str	r0, [r7, #116]	; 0x74
 800259c:	e002      	b.n	80025a4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800259e:	f7ff f93d 	bl	800181c <HAL_RCC_GetPCLK1Freq>
 80025a2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ac:	f040 80b6 	bne.w	800271c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025b2:	461c      	mov	r4, r3
 80025b4:	f04f 0500 	mov.w	r5, #0
 80025b8:	4622      	mov	r2, r4
 80025ba:	462b      	mov	r3, r5
 80025bc:	1891      	adds	r1, r2, r2
 80025be:	6439      	str	r1, [r7, #64]	; 0x40
 80025c0:	415b      	adcs	r3, r3
 80025c2:	647b      	str	r3, [r7, #68]	; 0x44
 80025c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025c8:	1912      	adds	r2, r2, r4
 80025ca:	eb45 0303 	adc.w	r3, r5, r3
 80025ce:	f04f 0000 	mov.w	r0, #0
 80025d2:	f04f 0100 	mov.w	r1, #0
 80025d6:	00d9      	lsls	r1, r3, #3
 80025d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025dc:	00d0      	lsls	r0, r2, #3
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	1911      	adds	r1, r2, r4
 80025e4:	6639      	str	r1, [r7, #96]	; 0x60
 80025e6:	416b      	adcs	r3, r5
 80025e8:	667b      	str	r3, [r7, #100]	; 0x64
 80025ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	461a      	mov	r2, r3
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	1891      	adds	r1, r2, r2
 80025f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80025f8:	415b      	adcs	r3, r3
 80025fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002600:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002604:	f7fd fde8 	bl	80001d8 <__aeabi_uldivmod>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4ba5      	ldr	r3, [pc, #660]	; (80028a4 <UART_SetConfig+0x38c>)
 800260e:	fba3 2302 	umull	r2, r3, r3, r2
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	011e      	lsls	r6, r3, #4
 8002616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002618:	461c      	mov	r4, r3
 800261a:	f04f 0500 	mov.w	r5, #0
 800261e:	4622      	mov	r2, r4
 8002620:	462b      	mov	r3, r5
 8002622:	1891      	adds	r1, r2, r2
 8002624:	6339      	str	r1, [r7, #48]	; 0x30
 8002626:	415b      	adcs	r3, r3
 8002628:	637b      	str	r3, [r7, #52]	; 0x34
 800262a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800262e:	1912      	adds	r2, r2, r4
 8002630:	eb45 0303 	adc.w	r3, r5, r3
 8002634:	f04f 0000 	mov.w	r0, #0
 8002638:	f04f 0100 	mov.w	r1, #0
 800263c:	00d9      	lsls	r1, r3, #3
 800263e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002642:	00d0      	lsls	r0, r2, #3
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	1911      	adds	r1, r2, r4
 800264a:	65b9      	str	r1, [r7, #88]	; 0x58
 800264c:	416b      	adcs	r3, r5
 800264e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	461a      	mov	r2, r3
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	1891      	adds	r1, r2, r2
 800265c:	62b9      	str	r1, [r7, #40]	; 0x28
 800265e:	415b      	adcs	r3, r3
 8002660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002662:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002666:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800266a:	f7fd fdb5 	bl	80001d8 <__aeabi_uldivmod>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4b8c      	ldr	r3, [pc, #560]	; (80028a4 <UART_SetConfig+0x38c>)
 8002674:	fba3 1302 	umull	r1, r3, r3, r2
 8002678:	095b      	lsrs	r3, r3, #5
 800267a:	2164      	movs	r1, #100	; 0x64
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	3332      	adds	r3, #50	; 0x32
 8002686:	4a87      	ldr	r2, [pc, #540]	; (80028a4 <UART_SetConfig+0x38c>)
 8002688:	fba2 2303 	umull	r2, r3, r2, r3
 800268c:	095b      	lsrs	r3, r3, #5
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002694:	441e      	add	r6, r3
 8002696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002698:	4618      	mov	r0, r3
 800269a:	f04f 0100 	mov.w	r1, #0
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	1894      	adds	r4, r2, r2
 80026a4:	623c      	str	r4, [r7, #32]
 80026a6:	415b      	adcs	r3, r3
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
 80026aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026ae:	1812      	adds	r2, r2, r0
 80026b0:	eb41 0303 	adc.w	r3, r1, r3
 80026b4:	f04f 0400 	mov.w	r4, #0
 80026b8:	f04f 0500 	mov.w	r5, #0
 80026bc:	00dd      	lsls	r5, r3, #3
 80026be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80026c2:	00d4      	lsls	r4, r2, #3
 80026c4:	4622      	mov	r2, r4
 80026c6:	462b      	mov	r3, r5
 80026c8:	1814      	adds	r4, r2, r0
 80026ca:	653c      	str	r4, [r7, #80]	; 0x50
 80026cc:	414b      	adcs	r3, r1
 80026ce:	657b      	str	r3, [r7, #84]	; 0x54
 80026d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	461a      	mov	r2, r3
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	1891      	adds	r1, r2, r2
 80026dc:	61b9      	str	r1, [r7, #24]
 80026de:	415b      	adcs	r3, r3
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80026ea:	f7fd fd75 	bl	80001d8 <__aeabi_uldivmod>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4b6c      	ldr	r3, [pc, #432]	; (80028a4 <UART_SetConfig+0x38c>)
 80026f4:	fba3 1302 	umull	r1, r3, r3, r2
 80026f8:	095b      	lsrs	r3, r3, #5
 80026fa:	2164      	movs	r1, #100	; 0x64
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	3332      	adds	r3, #50	; 0x32
 8002706:	4a67      	ldr	r2, [pc, #412]	; (80028a4 <UART_SetConfig+0x38c>)
 8002708:	fba2 2303 	umull	r2, r3, r2, r3
 800270c:	095b      	lsrs	r3, r3, #5
 800270e:	f003 0207 	and.w	r2, r3, #7
 8002712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4432      	add	r2, r6
 8002718:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800271a:	e0b9      	b.n	8002890 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800271c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800271e:	461c      	mov	r4, r3
 8002720:	f04f 0500 	mov.w	r5, #0
 8002724:	4622      	mov	r2, r4
 8002726:	462b      	mov	r3, r5
 8002728:	1891      	adds	r1, r2, r2
 800272a:	6139      	str	r1, [r7, #16]
 800272c:	415b      	adcs	r3, r3
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002734:	1912      	adds	r2, r2, r4
 8002736:	eb45 0303 	adc.w	r3, r5, r3
 800273a:	f04f 0000 	mov.w	r0, #0
 800273e:	f04f 0100 	mov.w	r1, #0
 8002742:	00d9      	lsls	r1, r3, #3
 8002744:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002748:	00d0      	lsls	r0, r2, #3
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	eb12 0804 	adds.w	r8, r2, r4
 8002752:	eb43 0905 	adc.w	r9, r3, r5
 8002756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4618      	mov	r0, r3
 800275c:	f04f 0100 	mov.w	r1, #0
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	008b      	lsls	r3, r1, #2
 800276a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800276e:	0082      	lsls	r2, r0, #2
 8002770:	4640      	mov	r0, r8
 8002772:	4649      	mov	r1, r9
 8002774:	f7fd fd30 	bl	80001d8 <__aeabi_uldivmod>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4b49      	ldr	r3, [pc, #292]	; (80028a4 <UART_SetConfig+0x38c>)
 800277e:	fba3 2302 	umull	r2, r3, r3, r2
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	011e      	lsls	r6, r3, #4
 8002786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002788:	4618      	mov	r0, r3
 800278a:	f04f 0100 	mov.w	r1, #0
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	1894      	adds	r4, r2, r2
 8002794:	60bc      	str	r4, [r7, #8]
 8002796:	415b      	adcs	r3, r3
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800279e:	1812      	adds	r2, r2, r0
 80027a0:	eb41 0303 	adc.w	r3, r1, r3
 80027a4:	f04f 0400 	mov.w	r4, #0
 80027a8:	f04f 0500 	mov.w	r5, #0
 80027ac:	00dd      	lsls	r5, r3, #3
 80027ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80027b2:	00d4      	lsls	r4, r2, #3
 80027b4:	4622      	mov	r2, r4
 80027b6:	462b      	mov	r3, r5
 80027b8:	1814      	adds	r4, r2, r0
 80027ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80027bc:	414b      	adcs	r3, r1
 80027be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f04f 0100 	mov.w	r1, #0
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	008b      	lsls	r3, r1, #2
 80027d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80027d8:	0082      	lsls	r2, r0, #2
 80027da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80027de:	f7fd fcfb 	bl	80001d8 <__aeabi_uldivmod>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4b2f      	ldr	r3, [pc, #188]	; (80028a4 <UART_SetConfig+0x38c>)
 80027e8:	fba3 1302 	umull	r1, r3, r3, r2
 80027ec:	095b      	lsrs	r3, r3, #5
 80027ee:	2164      	movs	r1, #100	; 0x64
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	3332      	adds	r3, #50	; 0x32
 80027fa:	4a2a      	ldr	r2, [pc, #168]	; (80028a4 <UART_SetConfig+0x38c>)
 80027fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002800:	095b      	lsrs	r3, r3, #5
 8002802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002806:	441e      	add	r6, r3
 8002808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800280a:	4618      	mov	r0, r3
 800280c:	f04f 0100 	mov.w	r1, #0
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	1894      	adds	r4, r2, r2
 8002816:	603c      	str	r4, [r7, #0]
 8002818:	415b      	adcs	r3, r3
 800281a:	607b      	str	r3, [r7, #4]
 800281c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002820:	1812      	adds	r2, r2, r0
 8002822:	eb41 0303 	adc.w	r3, r1, r3
 8002826:	f04f 0400 	mov.w	r4, #0
 800282a:	f04f 0500 	mov.w	r5, #0
 800282e:	00dd      	lsls	r5, r3, #3
 8002830:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002834:	00d4      	lsls	r4, r2, #3
 8002836:	4622      	mov	r2, r4
 8002838:	462b      	mov	r3, r5
 800283a:	eb12 0a00 	adds.w	sl, r2, r0
 800283e:	eb43 0b01 	adc.w	fp, r3, r1
 8002842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4618      	mov	r0, r3
 8002848:	f04f 0100 	mov.w	r1, #0
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	008b      	lsls	r3, r1, #2
 8002856:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800285a:	0082      	lsls	r2, r0, #2
 800285c:	4650      	mov	r0, sl
 800285e:	4659      	mov	r1, fp
 8002860:	f7fd fcba 	bl	80001d8 <__aeabi_uldivmod>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <UART_SetConfig+0x38c>)
 800286a:	fba3 1302 	umull	r1, r3, r3, r2
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	2164      	movs	r1, #100	; 0x64
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	3332      	adds	r3, #50	; 0x32
 800287c:	4a09      	ldr	r2, [pc, #36]	; (80028a4 <UART_SetConfig+0x38c>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	f003 020f 	and.w	r2, r3, #15
 8002888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4432      	add	r2, r6
 800288e:	609a      	str	r2, [r3, #8]
}
 8002890:	bf00      	nop
 8002892:	377c      	adds	r7, #124	; 0x7c
 8002894:	46bd      	mov	sp, r7
 8002896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800289a:	bf00      	nop
 800289c:	40011000 	.word	0x40011000
 80028a0:	40011400 	.word	0x40011400
 80028a4:	51eb851f 	.word	0x51eb851f

080028a8 <__libc_init_array>:
 80028a8:	b570      	push	{r4, r5, r6, lr}
 80028aa:	4d0d      	ldr	r5, [pc, #52]	; (80028e0 <__libc_init_array+0x38>)
 80028ac:	4c0d      	ldr	r4, [pc, #52]	; (80028e4 <__libc_init_array+0x3c>)
 80028ae:	1b64      	subs	r4, r4, r5
 80028b0:	10a4      	asrs	r4, r4, #2
 80028b2:	2600      	movs	r6, #0
 80028b4:	42a6      	cmp	r6, r4
 80028b6:	d109      	bne.n	80028cc <__libc_init_array+0x24>
 80028b8:	4d0b      	ldr	r5, [pc, #44]	; (80028e8 <__libc_init_array+0x40>)
 80028ba:	4c0c      	ldr	r4, [pc, #48]	; (80028ec <__libc_init_array+0x44>)
 80028bc:	f000 f818 	bl	80028f0 <_init>
 80028c0:	1b64      	subs	r4, r4, r5
 80028c2:	10a4      	asrs	r4, r4, #2
 80028c4:	2600      	movs	r6, #0
 80028c6:	42a6      	cmp	r6, r4
 80028c8:	d105      	bne.n	80028d6 <__libc_init_array+0x2e>
 80028ca:	bd70      	pop	{r4, r5, r6, pc}
 80028cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80028d0:	4798      	blx	r3
 80028d2:	3601      	adds	r6, #1
 80028d4:	e7ee      	b.n	80028b4 <__libc_init_array+0xc>
 80028d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80028da:	4798      	blx	r3
 80028dc:	3601      	adds	r6, #1
 80028de:	e7f2      	b.n	80028c6 <__libc_init_array+0x1e>
 80028e0:	08002920 	.word	0x08002920
 80028e4:	08002920 	.word	0x08002920
 80028e8:	08002920 	.word	0x08002920
 80028ec:	08002924 	.word	0x08002924

080028f0 <_init>:
 80028f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f2:	bf00      	nop
 80028f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028f6:	bc08      	pop	{r3}
 80028f8:	469e      	mov	lr, r3
 80028fa:	4770      	bx	lr

080028fc <_fini>:
 80028fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fe:	bf00      	nop
 8002900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002902:	bc08      	pop	{r3}
 8002904:	469e      	mov	lr, r3
 8002906:	4770      	bx	lr
